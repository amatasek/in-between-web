{"version":3,"file":"Lobby-CrGfswz3.js","sources":["../../src/components/common/OnlinePlayerCount.jsx","../../src/components/ProgressInfo.jsx","../../src/components/GameSettingsModal.jsx","../../src/components/PlayerPanel.jsx","../../src/components/icons/LockIcon.jsx","../../src/components/GameCard.jsx","../../src/components/Lobby.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSocket } from '../../contexts/SocketContext';\nimport styles from './OnlinePlayerCount.module.css';\n\nconst OnlinePlayerCount = () => {\n  const { socket, isConnected } = useSocket();\n  const [count, setCount] = useState(null);\n\n  useEffect(() => {\n    if (!socket || !isConnected) return;\n    // Request the current online player count\n    socket.emit('getOnlinePlayerCount', (n) => {\n      setCount(n);\n    });\n    // Listen for real-time updates\n    const handler = (n) => setCount(n);\n    socket.on('onlinePlayerCountUpdate', handler);\n    return () => {\n      socket.off('onlinePlayerCountUpdate', handler);\n    };\n  }, [socket, isConnected]);\n\n  if (count === null) return null;\n  return (\n    <div className={styles.pill}>\n      <span className={styles.pulse} />\n      <span className={styles.text}>{count} online</span>\n    </div>\n  );\n};\n\nexport default OnlinePlayerCount;\n","import React from 'react';\nimport styles from './styles/ProgressInfo.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport { useUserData } from '../contexts/UserDataContext';\n\n/**\n * ProgressInfo component displays user's balance and XP progress in a unified display\n * \n * @param {Object} props - Component props\n * @param {string} props.userId - User ID to fetch data for\n * @param {number} props.balance - User's balance amount\n */\nconst ProgressInfo = ({ userId, balance }) => {\n  const userData = useUserData(userId);\n\n  return (\n    <div className={styles.progressInfoContainer}>\n      <div className={styles.balanceSection}>\n        <span className={styles.balanceLabel}>Balance:</span>\n        <CurrencyAmount amount={Number(balance) || 0} size=\"medium\" />\n      </div>\n      \n      {userData && (\n        <div className={styles.xpSection}>\n          <div className={styles.xpBarContainer}>\n            <div \n              className={styles.xpBar}\n              style={{ \n                width: userData.level >= 100 ? '100%' : `${userData.percentToNextLevel || 0}%`\n              }}\n            />\n            <div className={styles.xpOverlay}>\n              <div className={styles.xpLevel}>Level {userData.level}</div>\n              <div className={styles.xpNext}>\n                {userData.level < 100 ? `${userData.xpToNextLevel.toLocaleString()} XP` : 'MAX'}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProgressInfo;","import React, { useState, useEffect } from 'react';\nimport ToggleSwitch from './ToggleSwitch.jsx';\nimport playerPanelStyles from './styles/PlayerPanel.module.css';\nimport BaseModal from './common/BaseModal';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport GamepadInput from './GamepadInput';\n\nconst DEFAULT_SETTINGS = {\n  useCustomName: false,\n  customName: '',\n  isPrivate: false,\n  password: '',\n  enableAceChoice: true,\n  enableSecondChance: true,\n  numberOfBots: 0,\n};\n\nconst GameSettingsModal = ({ initialSettings = DEFAULT_SETTINGS, onSubmit, onClose }) => {\n  const [settings, setSettings] = useState({ ...DEFAULT_SETTINGS, ...initialSettings });\n  const [errors, setErrors] = useState({});\n\n  // Validation logic\n  const validateSettings = (currentSettings) => {\n    const newErrors = {};\n\n    // Validate Custom Name\n    if (currentSettings.useCustomName) {\n      const name = currentSettings.customName || '';\n      if (!name) {\n        newErrors.customName = 'Custom name is required.';\n      } else if (name.length < 4 || name.length > 26) {\n        newErrors.customName = 'Name must be 4-26 characters.';\n      } else if (!/^[a-zA-Z0-9_-]+$/.test(name)) {\n        newErrors.customName = 'Use letters, numbers, -, or _.';\n      }\n    }\n\n    // Validate Password\n    if (currentSettings.isPrivate) {\n      const pass = currentSettings.password || '';\n      if (!pass) {\n        newErrors.password = 'Password is required.';\n      } else if (pass.length < 3 || pass.length > 36) {\n        newErrors.password = 'Password must be 3-36 characters.';\n      }\n    }\n\n    // Validate Number of Bots\n    const botCount = currentSettings.numberOfBots;\n    if (botCount < 0 || botCount > 16) {\n      newErrors.numberOfBots = 'Number of bots must be between 0 and 16.';\n    }\n\n    return newErrors;\n  };\n\n  const handleChange = (key, value) => {\n    setSettings(prev => {\n      const updatedSettings = { ...prev, [key]: value };\n\n      // Clear customName and its error if useCustomName is turned off\n      if (key === 'useCustomName' && !value) {\n        updatedSettings.customName = '';\n        if (errors.customName) {\n          setErrors(currentErrors => {\n            const newErrors = { ...currentErrors };\n            delete newErrors.customName;\n            return newErrors;\n          });\n        }\n      }\n\n      // Clear password and its error if private is turned off\n      if (key === 'isPrivate' && !value) {\n        updatedSettings.password = '';\n        if (errors.password) {\n          setErrors(currentErrors => {\n            const newErrors = { ...currentErrors };\n            delete newErrors.password;\n            return newErrors;\n          });\n        }\n      }\n      return updatedSettings;\n    });\n\n    // Clear specific error when user starts typing/toggling again\n    if ((key === 'customName' || key === 'useCustomName') && errors.customName) {\n      setErrors(currentErrors => {\n        const newErrors = { ...currentErrors };\n        delete newErrors.customName;\n        return newErrors;\n      });\n    }\n    if ((key === 'password' || key === 'isPrivate') && errors.password) {\n      setErrors(currentErrors => {\n        const newErrors = { ...currentErrors };\n        delete newErrors.password;\n        return newErrors;\n      });\n    }\n    if (key === 'numberOfBots' && errors.numberOfBots) {\n      setErrors(currentErrors => {\n        const newErrors = { ...currentErrors };\n        delete newErrors.numberOfBots;\n        return newErrors;\n      });\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const validationErrors = validateSettings(settings);\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n    } else {\n      setErrors({}); // Clear errors on successful submit\n      // Prepare the payload for submission\n      const payload = {\n        ...settings,\n        customName: settings.useCustomName ? settings.customName : null,\n      };\n      delete payload.useCustomName; // Remove the toggle state key\n\n      onSubmit(payload);\n    }\n  };\n\n  return (\n    <BaseModal\n      title=\"Game Options\"\n      onClose={onClose}\n      style={{ maxWidth: 600 }}\n      footer={\n        <div style={{ display: 'flex', gap: 8 }}>\n          <button\n            type=\"button\"\n            onClick={onClose}\n            className={`${playerPanelStyles.actionButton} ${playerPanelStyles.cancelButton || ''}`}\n            data-gamepad-focusable=\"true\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"submit\"\n            form=\"gameSettingsForm\"\n            className={`${playerPanelStyles.actionButton} ${playerPanelStyles.createButton}`}\n            disabled={Object.keys(errors).length > 0}\n            data-gamepad-focusable=\"true\"\n          >\n            Create Game\n          </button>\n        </div>\n      }\n    >\n      <form id=\"gameSettingsForm\" onSubmit={handleSubmit}>\n        <div className={baseModalStyles.settingsContainer}>\n          {/* Custom Game Name Setting */}\n          <div className={baseModalStyles.settingItem}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Custom Game Name</h4>\n              <p>Set a custom name for your game lobby</p>\n            </div>\n            <div className={baseModalStyles.settingControls}>\n              <ToggleSwitch\n                isChecked={settings.useCustomName}\n                onChange={e => handleChange('useCustomName', e.target.checked)}\n              />\n              {settings.useCustomName && (\n                <GamepadInput\n                  title=\"Enter Game Name\"\n                  type=\"text\"\n                  value={settings.customName || ''}\n                  onChange={e => handleChange('customName', e.target.value)}\n                  className={`${baseModalStyles.textInput}${errors.customName ? ' ' + baseModalStyles.inputError : ''}`}\n                  placeholder=\"Game Name\"\n                  maxLength={26}\n                  autoFocus\n                  style={{ marginTop: 8 }}\n                />\n              )}\n              {errors.customName && <span className=\"errorMessage\">{errors.customName}</span>}\n            </div>\n          </div>\n\n          {/* Private Game Setting */}\n          <div className={baseModalStyles.settingItem}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Private Game</h4>\n              <p>Only players with the password can join</p>\n            </div>\n            <div className={baseModalStyles.settingControls}>\n              <ToggleSwitch\n                isChecked={settings.isPrivate}\n                onChange={e => handleChange('isPrivate', e.target.checked)}\n              />\n              {settings.isPrivate && (\n                <GamepadInput\n                  title=\"Enter Game Password\"\n                  type=\"password\"\n                  value={settings.password || ''}\n                  onChange={e => handleChange('password', e.target.value)}\n                  className={`${baseModalStyles.textInput}${errors.password ? ' ' + baseModalStyles.inputError : ''}`}\n                  placeholder=\"Password\"\n                  maxLength={36}\n                  autoFocus={settings.isPrivate && !settings.useCustomName}\n                  style={{ marginTop: 8 }}\n                />\n              )}\n              {errors.password && <span className=\"errorMessage\">{errors.password}</span>}\n            </div>\n          </div>\n\n          {/* Number of Bots Setting */}\n          <div className={baseModalStyles.settingItem}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Number of Bots</h4>\n              <p>Add AI players to your game (0-16)</p>\n            </div>\n            <div className={baseModalStyles.settingControls}>\n              <GamepadInput\n                title=\"Number of AI Players\"\n                type=\"number\"\n                min=\"0\"\n                max=\"16\"\n                value={settings.numberOfBots}\n                onChange={e => handleChange('numberOfBots', parseInt(e.target.value) || 0)}\n                className={`${baseModalStyles.textInput}${errors.numberOfBots ? ' ' + baseModalStyles.inputError : ''}`}\n              />\n              {errors.numberOfBots && <span className=\"errorMessage\">{errors.numberOfBots}</span>}\n            </div>\n          </div>\n\n          {/* Ace Choice Setting */}\n          <div className={baseModalStyles.settingItem}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Enable Ace Choice</h4>\n              <p>Allow players to choose high/low on Ace</p>\n            </div>\n            <div className={baseModalStyles.settingControls}>\n              <ToggleSwitch\n                isChecked={settings.enableAceChoice}\n                onChange={e => handleChange('enableAceChoice', e.target.checked)}\n              />\n            </div>\n          </div>\n\n          {/* Second Chance Setting */}\n          <div className={baseModalStyles.settingItem}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Enable Second Chance</h4>\n              <p>Allow players to ante up for a second chance</p>\n            </div>\n            <div className={baseModalStyles.settingControls}>\n              <ToggleSwitch\n                isChecked={settings.enableSecondChance}\n                onChange={e => handleChange('enableSecondChance', e.target.checked)}\n              />\n            </div>\n          </div>\n        </div>\n      </form>\n    </BaseModal>\n  );\n};\n\nexport default GameSettingsModal;\n","import React, { useState } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useNavigate } from 'react-router-dom';\nimport UserAvatar from './UserAvatar.jsx';\nimport ProgressInfo from './ProgressInfo.jsx';\nimport PreferencesButton from './common/PreferencesButton.jsx';\nimport PlayerStatsButton from './common/PlayerStatsButton.jsx';\nimport StoreButton from './StoreButton.jsx';\nimport RulesButton from './common/RulesButton';\nimport GameSettingsModal from './GameSettingsModal.jsx';\nimport StoreModal from './StoreModal.jsx';\nimport styles from './styles/PlayerPanel.module.css';\n\nconst PlayerPanel = () => {\n  const { user, logout, refreshUserData } = useAuth();\n  const { socket, isConnected } = useSocket();\n  const navigate = useNavigate();\n  \n  const [showGameSettingsModal, setShowGameSettingsModal] = useState(false);\n  const [showStoreModal, setShowStoreModal] = useState(false);\n\n  const createGameWithSettings = (settings) => {\n    if (!user?.id || !isConnected) {\n      return;\n    }\n\n    const handleGameCreated = (data) => {\n      socket.off('gameCreated', handleGameCreated);\n      if (data?.game?.id) {\n        navigate(`/${data.game.id}`);\n      }\n    };\n\n    socket.on('gameCreated', handleGameCreated);\n    \n    if (settings) {\n      socket.emit('createGame', { settings });\n    } else {\n      socket.emit('createGame');\n    }\n  };\n\n  const handleCreateGame = () => createGameWithSettings({ numberOfBots: 5 });\n\n  const handleCreateCustomGame = () => {\n    setShowGameSettingsModal(true);\n  };\n\n  const handleSubmitCustomSettings = (settings) => {\n    setShowGameSettingsModal(false);\n    createGameWithSettings(settings);\n  };\n\n  return (\n    <div className={styles.playerPanel}>\n      <div className={styles.userSection}>\n        <div className={styles.avatarContainer}>\n          <UserAvatar \n            userId={user?.id}\n            size=\"medium\" \n            showName={true} \n            namePosition=\"right\"\n          />\n        </div>\n        <ProgressInfo \n          userId={user?.id}\n          balance={user?.balance}\n        />\n        <div className={styles.headerButtons}>\n          <button \n            className={styles.logoutButton}\n            onClick={logout}\n            data-gamepad-focusable=\"true\"\n          >\n            <span className={styles.buttonText}>Logout</span>\n          </button>\n          <RulesButton data-gamepad-focusable=\"true\" />\n          <PlayerStatsButton data-gamepad-focusable=\"true\" />\n          <StoreButton onClick={() => setShowStoreModal(true)} data-gamepad-focusable=\"true\" />\n          <PreferencesButton data-gamepad-focusable=\"true\" />\n        </div>\n      </div>\n      \n      <div className={styles.divider}></div>\n      \n      <div className={styles.actionSection}>\n        <button \n          className={`${styles.actionButton} ${styles.createButton}`}\n          onClick={handleCreateGame}\n          disabled={!user?.username}\n          data-gamepad-focusable=\"true\"\n        >\n          Create Quick Game\n        </button>\n        <button\n          className={`${styles.actionButton} ${styles.createButton}`}\n          onClick={handleCreateCustomGame}\n          disabled={!user?.username}\n          data-gamepad-focusable=\"true\"\n        >\n          Create Custom Game\n        </button>\n      </div>\n\n      {showGameSettingsModal && (\n        <GameSettingsModal\n          onSubmit={handleSubmitCustomSettings}\n          onClose={() => setShowGameSettingsModal(false)}\n        />\n      )}\n      {showStoreModal && (\n        <StoreModal\n          onClose={() => {\n            setShowStoreModal(false);\n            if (refreshUserData) {\n              refreshUserData();\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PlayerPanel;","import React from 'react';\n\nconst LockIcon = ({ className = '', width = '1em', height = '1em', ...props }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"2\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className={`feather feather-lock ${className}`} \n    width={width} \n    height={height}\n    {...props}\n  >\n    <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect>\n    <path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>\n  </svg>\n);\n\nexport default LockIcon;\n","import React from 'react';\nimport styles from './styles/Lobby.module.css'; // Use the new CSS module\nimport LockIcon from './icons/LockIcon'; // Import the new icon\n\nfunction GameCard({ game, onJoin, userId }) { \n  // Determine display name: Use custom name if available, otherwise fallback to ID\n  const gameDisplayName = game.settings?.customName || `Game ${game.id}`;\n\n  // Determine user's status in this game\n  const isUserDisconnected = game.disconnectedPlayers?.some(player => player.userId === userId);\n  const isUserInGame = game.allPlayers?.some(player => player.userId === userId && !player.disconnected);\n\n  // Determine button text and class\n  let buttonText = 'Join';\n  let buttonClass = styles.joinGameButton; // Base class from original\n  if (isUserDisconnected) {\n    buttonText = 'Reconnect';\n    buttonClass += ` ${styles.reconnectButton}`;\n  } else if (isUserInGame) {\n    buttonText = 'Continue';\n    buttonClass += ` ${styles.continueButton}`;\n  }\n\n  // Determine card container class\n  let cardClass = styles.gameListItem; // Use original outer class\n  if (isUserDisconnected) {\n    cardClass += ` ${styles.userDisconnectedGame}`;\n  } else if (isUserInGame) {\n    cardClass += ` ${styles.userInGame}`;\n  }\n\n  return (\n    <div className={cardClass}> {/* Use gameListItem + conditional */}\n      {/* Replicate original info structure */}\n      <div className={styles.gameListInfo}>\n        <div className={styles.gameListId}> {/* Div for ID/Name + Badges */}\n          {gameDisplayName}\n          {game.settings?.isPrivate && (\n            <span className={styles.privatePill} title=\"Private Game\">\n              <LockIcon width=\"0.9em\" height=\"0.9em\" style={{ marginRight: '4px', verticalAlign: 'middle' }} />\n              Private\n            </span>\n          )}\n          {isUserDisconnected && (\n            <span className={styles.disconnectedBadge} title=\"You're disconnected from this game\">⚠️ Reconnect</span>\n          )}\n          {isUserInGame && (\n            <span className={styles.inGameBadge} title=\"You're in this game\">You're In</span>\n          )}\n        </div>\n        <div className={styles.gameListPlayers}> {/* Div for Player Count */}\n          {game.playerCount} {game.playerCount === 1 ? 'player' : 'players'}\n        </div>\n      </div>\n      {/* Button as sibling to gameListInfo */}\n      <button \n        className={buttonClass} // Use joinGameButton + conditional\n        onClick={() => onJoin(game.id)}\n        disabled={!userId}\n        data-gamepad-focusable=\"true\"\n      >\n        {buttonText} \n      </button>\n    </div>\n  );\n}\n\nexport default GameCard;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from './styles/Lobby.module.css';\nimport { useLobby } from '../contexts/LobbyContext.jsx';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useGamepadNavigation } from '../hooks/useGamepadNavigation';\nimport { useMediaQuery, InputAdornment } from '@mui/material';\nimport GamepadTextField from './GamepadTextField';\nimport AppHeader from './common/AppHeader';\nimport OnlinePlayerCount from './common/OnlinePlayerCount';\nimport PlayerPanel from './PlayerPanel.jsx';\nimport GameCard from './GameCard';\nimport { useUserData } from '../contexts/UserDataContext';\nimport soundService from '../services/SoundService';\n\nconst Lobby = () => {\n  const { gameList, loading: lobbyLoading } = useLobby();\n  const { user, logout } = useAuth();\n  const userData = useUserData(user?.id);\n  const { isConnected } = useSocket();\n  \n  // Initialize gamepad navigation\n  const { isGamepadConnected } = useGamepadNavigation(true);\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const isMobile = useMediaQuery('(max-width:600px)');\n  const isSmallMobile = useMediaQuery('(max-width:400px)');\n  \n  const userId = user?.username ? `user_${user.username}` : null;\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    if (!user.username || !user.id) {\n      console.error('[Lobby] Invalid user data received:', user);\n      logout(); // Clear invalid session\n      return;\n    }\n  }, [user, logout]);\n  \n  const handleJoinGame = (gameId) => {\n    if (!isConnected || !user) {\n      return;\n    }\n\n    soundService.play('ui.click'); // Play join sound\n    navigate(`/${gameId}`);\n  };\n  \n  const handleSearchChange = (e) => {\n    setSearchQuery(e.target.value);\n  };\n  \n  const filteredGameList = useMemo(() => {\n    if (!gameList) return [];\n    \n    let filtered = gameList;\n    if (searchQuery.trim()) {\n      const query = searchQuery.trim().toLowerCase();\n      filtered = gameList.filter(game => \n        game.id.toLowerCase().includes(query)\n      );\n    }\n    \n    return filtered.sort((a, b) => {\n      const userInGameA = a.allPlayers?.some(player => player.userId === userId);\n      const userInGameB = b.allPlayers?.some(player => player.userId === userId);\n      \n      const userDisconnectedInA = a.disconnectedPlayers?.some(player => player.userId === userId);\n      const userDisconnectedInB = b.disconnectedPlayers?.some(player => player.userId === userId);\n      \n      if (userDisconnectedInA && !userDisconnectedInB) return -1;\n      if (!userDisconnectedInA && userDisconnectedInB) return 1;\n      if (userInGameA && !userInGameB) return -1;\n      if (!userInGameA && userInGameB) return 1;\n      return a.id.localeCompare(b.id); // Alphabetical by ID if tie\n    });\n  }, [gameList, searchQuery, userId]); // Dependency on userId ensures resorting if user changes\n  \n   return (\n     <div className={styles.lobbyContainer}>\n       <AppHeader />\n       <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1.1em', marginBottom: '-0.6em' }}>\n         <OnlinePlayerCount />\n       </div>       \n       <PlayerPanel />\n       \n       {/* Game List Section - Always shown */}\n       <div className={styles.gameListContainer}>\n         <h2 className={styles.gameListTitle}>Available Games</h2>\n         \n         {/* Search bar for filtering games */}\n         <div className={styles.searchContainer}>\n           <GamepadTextField\n             title=\"Search Games\"\n             placeholder=\"Search games by ID\"\n             variant=\"outlined\"\n             fullWidth\n             value={searchQuery}\n             onChange={handleSearchChange}\n             size={isSmallMobile ? \"small\" : \"medium\"}\n             type=\"text\"\n             InputProps={{\n               startAdornment: (\n                 <InputAdornment position=\"start\">\n                   <span className={styles.searchIcon}>🔍</span>\n                 </InputAdornment>\n               ),\n             }}\n           />\n         </div>\n         \n         {filteredGameList && filteredGameList.length > 0 ? (\n           <div className={styles.gameListWrapper}>\n             {filteredGameList.map(game => (\n               <GameCard \n                 key={game.id} \n                 game={game} \n                 onJoin={handleJoinGame} \n                 userId={userId} // Pass userId\n               />\n             ))}\n           </div>\n         ) : (\n           <div className={styles.emptyGameList}>\n             <div className={styles.emptyStateIcon}>🃏</div>\n             <p className={styles.emptyStateMessage}>\n               {searchQuery.trim() ? 'No matching games found' : 'No games in progress'}\n             </p>\n             <p className={styles.emptyStateHint}>\n               {searchQuery.trim() \n                 ? 'Try a different search or create a new game' \n                 : 'Create a new game to get started!'}\n             </p>\n           </div>\n         )}\n       </div>\n     </div>\n   );\n };\n\n export default Lobby;\n"],"names":["useState","useEffect","jsxs","styles","jsx","playerPanelStyles","useMemo"],"mappings":"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"}