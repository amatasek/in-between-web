{"version":3,"file":"GameRoom-CurwYyeV.js","sources":["../../src/constants.js","../../src/contexts/GameContext.jsx","../../src/components/icons/ExitIcon.jsx","../../src/components/common/LeaveButton.jsx","../../src/components/GameHeader.jsx","../../src/components/icons/ArrowIcon.jsx","../../src/components/CardDisplay.jsx","../../src/components/PotButton.jsx","../../src/components/BettingPanel.jsx","../../src/components/PlayerList.jsx","../../src/components/PotDisplay.jsx","../../src/components/DeckDisplay.jsx","../../src/components/AutoAnteToggle.jsx","../../src/components/AnteControls.jsx","../../src/components/ResultsPanel.jsx","../../src/components/AceChoicePanel.jsx","../../src/components/SecondChancePanel.jsx","../../src/components/GameLog.jsx","../../src/components/EmojiReactions.jsx","../../src/components/GameScreen.jsx","../../src/components/common/PasswordPromptModal.jsx","../../src/components/GameRoom.jsx"],"sourcesContent":["/**\n * Frontend Constants - Game logic and UI constants for the web client\n * \n * ⚠️  SHARED CONSTANTS - Keep synchronized with backend! ⚠️\n * Some constants must match @am-games-api/src/constants.js\n * Any changes to shared constants should be reflected in the backend constants file.\n */\n\n// ========================================\n// SHARED CONSTANTS (Frontend + Backend)\n// ========================================\n\n/**\n * Game phase constants for consistent phase management across the application\n * 🔄 SHARED: Must match backend GamePhases\n */\nexport const GamePhases = {\n  // Initial phase when waiting for players and anteeing up\n  WAITING: 'waiting',\n  \n  // Phase when cards are being dealt\n  DEALING: 'dealing',\n  \n  // Phase when players are betting\n  BETTING: 'betting',\n  \n  // Phase when middle card is being revealed\n  REVEALING: 'revealing',\n  \n  // Phase when round results are shown\n  RESULTS: 'results'\n};\n\n/**\n * Core game configuration constants\n * 🔄 SHARED: Must match backend GAME_CONSTANTS\n */\nexport const GAME_CONSTANTS = {\n  // Game configuration\n  ANTE_AMOUNT: 1,  // Fixed ante amount - always $1\n  STARTING_BALANCE: 2000,  // Starting player balance\n  FULL_DECK_SIZE: 52,  // Number of cards in a full deck\n  RECONNECTION_TIMEOUT: 30000,  // Time window for player reconnection (30 seconds)\n  MAX_SEATS: 16, // Maximum number of seats/players allowed in a game\n  \n  // Timer durations (in milliseconds)\n  // 🔄 SHARED: Backend uses these for game logic, frontend for UI timers\n  TIMERS: {\n    DEAL_FIRST_CARD_DELAY: 1000,    // Delay before dealing the first card (1 second)\n    DEAL_SECOND_CARD_DELAY: 1000,   // Delay before dealing the second card (1 second)\n    DEAL_THIRD_CARD_DELAY: 2000,    // Delay before revealing the third card (2 seconds)\n    DEALING_DURATION: 3000,         // Total duration of dealing phase (3 seconds)\n    BETTING_DURATION: 30000,        // Duration for betting phase (30 seconds)\n    DECISION_DURATION: 15000,       // Duration for ace and second chance decisions (15 seconds)\n    REVEALING_DURATION: 3000,       // Duration for revealing phase\n    RESULTS_DURATION: 5000,         // Duration to show results before moving to next round (5 seconds)\n    PLAYER_INACTIVITY_TIMEOUT: 30000//Timeout for inactive players in WAITING phase\n  }\n};\n\n// ========================================\n// FRONTEND-ONLY CONSTANTS\n// ========================================\n\n/**\n * UI Icons used throughout the application\n * 🎨 FRONTEND-ONLY: These are only used for UI display\n */\nexport const ICONS = {\n  POT: '🍯',\n  DEALER: '🃏',\n  CHECK: '✓',\n  DECK: '🃏'\n};\n\n// Export specific commonly used constants for convenience\nexport const { TIMERS, ANTE_AMOUNT, STARTING_BALANCE, FULL_DECK_SIZE, RECONNECTION_TIMEOUT, MAX_SEATS } = GAME_CONSTANTS;","import React, { createContext, useState, useContext, useEffect, useCallback, useRef } from 'react';\nimport { useSocket } from './SocketContext.jsx';\nimport { useAuth } from './AuthContext.jsx';\nimport soundService from '../services/SoundService';\n\n// Create context\nconst GameContext = createContext();\n\n// Custom hook to use the game context\nexport const useGameContext = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n\nexport const GameProvider = ({ children, gameId, initialGameState = null }) => {\n  // Get socket from socket context\n  const { socket, error: socketError } = useSocket();\n  \n  // Get user from auth context\n  const { user } = useAuth();\n  \n  // Game-specific state - we only need to track the full gameState object and error\n  /** @type {[GameState|null, React.Dispatch<React.SetStateAction<GameState|null>>]} */\n  const [gameState, setGameState] = useState(initialGameState);\n  \n  // Keep track of previous players to detect joins/leaves\n  const prevPlayersRef = useRef({});\n  \n  // Keep track of previous active player to detect turn changes\n  const prevActivePlayerRef = useRef(null);\n  \n  /** @type {[string|null, React.Dispatch<React.SetStateAction<string|null>>]} */\n  const [error, setError] = useState(null);\n\n  // Function to explicitly clear the provider's error state\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  // Initialize with socket error if any\n  useEffect(() => {\n    if (socketError) {\n      setError(socketError);\n    }\n  }, [socketError]);\n  // Set up game-specific event handlers\n  useEffect(() => {\n    if (!socket) return;\n\n    // Handle game reconnection\n    socket.on('gameReconnected', (data) => {\n      console.log(`[Game] Reconnected to game: ${data.gameId}`, data.game);\n      \n      // Update game state with the full state from the server\n      setGameState(data.game);\n      \n      // Log reconnection with user ID from AuthContext\n      console.log(`[Game] Successfully reconnected as user ID: ${user?.id}`);\n      \n      // Clear any errors\n      setError(null);\n\n      // CRITICAL: Force a refresh of the player's game state to ensure betting works\n      if (data.game && data.game.id) {\n        // Small delay to ensure the state is fully updated\n        setTimeout(() => {\n          console.log(`[Game] Requesting fresh game state after reconnection`);\n          socket.emit('getGameState', { gameId: data.game.id });\n        }, 500);\n      }\n    });\n    \n    // Handle receiving updated game state\n    socket.on('gameState', (data) => {\n      if (data && data.id) { \n        // Restore check to prevent setting identical state\n        if (JSON.stringify(gameState) !== JSON.stringify(data)) {\n          // Check if it's now the player's turn and play alert sound if needed\n          if (data.currentPlayerId && user?.id) {\n            const isMyTurn = data.currentPlayerId === user.id;\n            const wasPreviouslyMyTurn = prevActivePlayerRef.current === user.id;\n            \n            // Only play sound if it wasn't my turn before but now it is\n            if (isMyTurn && !wasPreviouslyMyTurn) {\n              soundService.play('ui.alert');\n            }\n            \n            // Update the previous active player reference\n            prevActivePlayerRef.current = data.currentPlayerId;\n          }\n          \n          setGameState(data);\n          clearError(); // Clear any previous context errors on successful state update\n        } \n      } else {\n      }\n    });\n    \n    // Game-specific error handling\n    socket.on('gameError', (message) => {\n      console.error('Game error:', message);\n      setError(message);\n    });\n    \n    // Clean up game-specific event listeners\n    return () => {\n      socket.off('gameReconnected');\n      socket.off('gameState');\n      socket.off('gameError');\n    };\n  }, [socket]);\n\n  // Game-specific actions\n  const placeBet = useCallback((amount) => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('placeBet', { bet: amount, gameId });\n    } catch (err) {\n      console.error('Error placing bet:', err);\n      setError('Failed to place bet. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  const payAnte = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('payAnte', { gameId });\n    } catch (err) {\n      console.error('Error paying ante:', err);\n      setError('Failed to pay ante. Please try again.');\n    }\n  }, [socket, gameId]);\n\n  const dealCards = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('dealCards', { gameId });\n    } catch (err) {\n      console.error('Error dealing cards:', err);\n      setError('Failed to deal cards. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  const revealMiddleCard = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('revealMiddleCard', { gameId });\n    } catch (err) {\n      console.error('Error revealing middle card:', err);\n      setError('Failed to reveal middle card. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  const nextRound = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('nextRound', { gameId });\n    } catch (err) {\n      console.error('Error moving to next round:', err);\n      setError('Failed to move to next round. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  // Player ready function (for paying ante)\n  const playerReady = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      // Server is listening for 'ready' event, not 'playerReady'\n      socket.emit('ready');\n    } catch (err) {\n      console.error('Error setting player ready:', err);\n      setError('Failed to set player ready. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  // Player unready function (withdraw ante)\n  const playerUnready = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('unready');\n    } catch (err) {\n      console.error('Error setting player unready:', err);\n      setError('Failed to set player unready. Please try again.');\n    }\n  }, [socket, gameId]);\n\n  /**\n   * @typedef {Object} GameContextValue\n   * @property {GameState|null} gameState - The complete game state\n   * @property {string|null} error - Any error message \n   * @property {(amount: number) => void} placeBet - Function to place a bet\n   * @property {() => void} payAnte - Function to pay the ante\n   * @property {() => void} playerReady - Function to set player ready (pay ante)\n   * @property {() => void} playerUnready - Function to set player unready (withdraw ante)\n   * @property {() => void} dealCards - Function to deal cards\n   * @property {() => void} revealMiddleCard - Function to reveal the middle card\n   * @property {() => void} nextRound - Function to move to the next round\n   * @property {() => void} clearError - Function to clear any error\n   * @property {string|null} gameId - Current game ID\n   */\n\n  /** @type {GameContextValue} */\n  const value = {\n    // Game state - just provide the complete gameState object\n    gameState,\n    error,\n    gameId,\n    \n    // Game actions\n    placeBet,\n    payAnte,\n    playerReady,\n    playerUnready,\n    dealCards,\n    revealMiddleCard,\n    nextRound,\n    // Helper methods\n    clearError,\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n};\n\n// Named exports for specific pieces of state/actions\nexport const useGameState = () => {\n  const { gameState, players, currentPlayer, cards, gamePhase, dealerName, deckNumber, remainingCards, error } = useGameContext();\n  return { gameState, players, currentPlayer, cards, gamePhase, dealerName, deckNumber, remainingCards, error };\n};\n\nexport const useGameActions = () => {\n  const { placeBet, payAnte, dealCards, revealMiddleCard, nextRound, clearError } = useGameContext();\n  return { placeBet, payAnte, dealCards, revealMiddleCard, nextRound, clearError };\n};\n\nexport default GameContext;\n","import React from 'react';\n\n/**\n * Exit/door icon component for leave game button\n * @param {Object} props - Component props\n * @param {string} props.color - Color of the icon (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst ExitIcon = ({ color = 'currentColor', size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    >\n      {/* Material Design style exit/logout icon */}\n      <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n      <polyline points=\"16 17 21 12 16 7\" />\n      <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\n    </svg>\n  );\n};\n\nexport default ExitIcon;\n","import React from 'react';\nimport IconButton from './IconButton';\nimport ExitIcon from '../icons/ExitIcon';\n\n/**\n * A standardized leave/exit button component\n * \n * @param {Object} props Component props\n * @param {function} props.onClick Handler for when the button is clicked\n * @param {string} props.title Custom tooltip text (optional)\n */\nconst LeaveButton = ({ \n  onClick, \n  title = \"Leave Game\",\n  ...restProps \n}) => {\n  return (\n    <IconButton\n      icon={<ExitIcon color=\"white\" size={20} />}\n      title={title}\n      onClick={onClick}\n      variant=\"danger\"\n      {...restProps}\n    />\n  );\n};\n\nexport default LeaveButton;\n","import React, { useState, useEffect } from 'react';\nimport styles from './styles/GameHeader.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { TIMERS, ICONS } from '../constants';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport GameSummaryModal from './GameSummaryModal.jsx';\nimport StoreModal from './StoreModal.jsx';\nimport RulesButton from './common/RulesButton';\nimport PlayerStatsButton from './common/PlayerStatsButton';\nimport PreferencesButton from './common/PreferencesButton';\nimport StoreButton from './StoreButton';\nimport LeaveButton from './common/LeaveButton';\n\n// Phase display mapping with icons and friendly names\nconst phaseDisplayMap = {\n  waiting: { text: 'Waiting for Players', icon: '👥' },\n  dealing: { text: 'Dealing Cards', icon: ICONS.DEALER },\n  revealing: { text: 'Revealing Cards', icon: '🥁' },\n  results: { text: 'Round Results', icon: '🏆' }\n};\n\nconst GameHeader = ({ handleLeaveGame, onModalStateChange }) => {\n  const { gameState, gameId } = useGameContext();\n  const { socket } = useSocket();\n  const { user } = useAuth();\n  \n  // Get the current user's balance from game state (real-time) or fallback to auth context\n  const currentUserId = socket?.auth?.userId;\n  const currentPlayer = currentUserId && gameState?.players ? gameState.players[currentUserId] : null;\n  const playerBalance = currentPlayer?.balance ?? user?.balance ?? 0;\n  const currentPhase = gameState?.phase || 'waiting';\n  \n  // Check if user is ready (committed to current hand)\n  const isPlayerReady = currentPlayer?.isReady || false;\n  const [timeLeft, setTimeLeft] = useState(null);\n  const [showGameSummary, setShowGameSummary] = useState(false);\n  const [showStoreModal, setShowStoreModal] = useState(false);\n  const [isPreferencesOpen, setIsPreferencesOpen] = useState(false);\n  const [isRulesOpen, setIsRulesOpen] = useState(false);\n  const [isStatsOpen, setIsStatsOpen] = useState(false);\n\n  // Timer effect for phases\n  useEffect(() => {\n    let timer;\n    \n    if (currentPhase === 'dealing') {\n      setTimeLeft(TIMERS.DEALING_DURATION);\n      timer = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 100));\n      }, 100);\n    } else if (currentPhase === 'betting') {\n      setTimeLeft(TIMERS.BETTING_DURATION);\n      timer = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 100));\n      }, 100);\n    } else if (currentPhase === 'revealing') {\n      setTimeLeft(TIMERS.REVEALING_DURATION);\n      timer = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 100));\n      }, 100);\n    } else if (currentPhase === 'results') {\n      setTimeLeft(TIMERS.RESULTS_DURATION);\n      timer = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 100));\n      }, 100);\n    } else {\n      setTimeLeft(null);\n    }\n\n    return () => {\n      if (timer) clearInterval(timer);\n    };\n  }, [currentPhase, gameState?.waitingForAceDecision]);\n\n  // Notify parent when modal state changes\n  useEffect(() => {\n    const isModalOpen = showGameSummary || showStoreModal || isPreferencesOpen || isRulesOpen || isStatsOpen;\n    if (onModalStateChange) {\n      onModalStateChange(isModalOpen);\n    }\n  }, [showGameSummary, showStoreModal, isPreferencesOpen, isRulesOpen, isStatsOpen, onModalStateChange]);\n  \n  // Get the phase display information\n  let phaseInfo = phaseDisplayMap[currentPhase] || { text: 'Unknown Phase', icon: '❓' };\n  \n  // Override phase info if waiting for Ace decision\n  if (gameState?.waitingForAceDecision && currentPhase === 'dealing') {\n    phaseInfo = { text: 'Choosing Ace Value', icon: '🤔' };\n  }\n  \n  // Override phase info if waiting for second chance decision\n  if (gameState?.waitingForSecondChance) {\n    phaseInfo = { text: 'Second Chance Decision', icon: '🤔' };\n  }\n  \n  // Check if current user is the current player (using userId instead of socket.id)\n  const isCurrentPlayersTurn = socket && socket.auth?.userId && gameState?.currentPlayerId === socket.auth.userId;\n  \n  // Special handling for betting phase\n  if (currentPhase === 'betting' && gameState?.currentPlayerId && gameState?.players) {\n    const currentPlayer = gameState.players[gameState.currentPlayerId];\n    \n    if (currentPlayer) {\n      if (isCurrentPlayersTurn) {\n        // It's YOUR turn to bet\n        phaseInfo = {\n          text: `Pass or Bet`,\n          icon: '🤔'\n        };\n      } else {\n        // It's someone else's turn\n        phaseInfo = {\n          text: `${currentPlayer.name} is Betting`,\n          icon: '🤔'\n        };\n      }\n    } else {\n      phaseInfo = { text: 'Betting Round', icon: '🤔' };\n    }\n  }\n  \n  return (\n    <div className={styles.headerContainer}>\n      {/* Desktop layout - single row with 3 cells */}\n      <div className={styles.desktopLayout}>\n        {/* Left: Logo and game ID */}\n        <div className={styles.headerLeft}>\n          <h1 className={styles.gameTitle}>In Between <span className={styles.liveTag}>LIVE</span></h1>\n          <p className={styles.gameIdText}>\n            <span \n              className={styles.gameIdLink} \n              onClick={() => setShowGameSummary(true)}\n              title=\"Click to view game summary\"\n              data-gamepad-focusable=\"true\"\n              tabIndex=\"0\"\n            >\n              Game #{gameId}\n            </span>\n          </p>\n        </div>\n        \n        {/* Middle: Phase indicator */}\n        <div className={styles.headerCenter}>\n          <div \n            className={`${styles.gamePhase} ${currentPhase === 'betting' ? \n              (isCurrentPlayersTurn ? styles.phaseBettingYourTurn : styles.phaseBettingWaiting) : \n              styles[`phase${currentPhase.charAt(0).toUpperCase() + currentPhase.slice(1)}`]}`} \n            data-phase={currentPhase}\n          >\n            <span className={styles.phaseIcon}>{phaseInfo.icon}</span>\n            <span className={styles.phaseText}>{phaseInfo.text}</span>\n            {timeLeft !== null && (\n              <div className={styles.timerBar}>\n                <div \n                  className={styles.timerProgress} \n                  style={{ \n                    width: `${(timeLeft / (currentPhase === 'dealing' ? TIMERS.DEALING_DURATION :\n                                         currentPhase === 'betting' ? TIMERS.BETTING_DURATION :\n                                         currentPhase === 'revealing' ? TIMERS.REVEALING_DURATION :\n                                         TIMERS.RESULTS_DURATION)) * 100}%`\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Right: Balance and buttons */}\n        <div className={styles.headerRight}>\n          <div className={styles.controlsStack}>\n            <div className={styles.balanceDisplay}>\n              Balance: <CurrencyAmount amount={Number(playerBalance)} size=\"small\" />\n            </div>\n            <div className={styles.controlsGroup}>\n              <PreferencesButton \n                onModalStateChange={setIsPreferencesOpen}\n                data-gamepad-focusable=\"true\" \n              />\n              <RulesButton \n                onModalStateChange={setIsRulesOpen}\n                data-gamepad-focusable=\"true\" \n              />\n              <PlayerStatsButton \n                onModalStateChange={setIsStatsOpen}\n                data-gamepad-focusable=\"true\" \n              />\n              <StoreButton onClick={() => setShowStoreModal(true)} data-gamepad-focusable=\"true\" />\n              <LeaveButton \n                onClick={handleLeaveGame} \n                disabled={isPlayerReady}\n                data-gamepad-focusable=\"true\" \n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile layout - two rows */}\n      <div className={styles.mobileLayout}>\n        {/* Top row: Logo/ID, Balance/Buttons */}\n        <div className={styles.mobileTopRow}>\n          <div className={styles.headerLeft}>\n            <h1 className={styles.gameTitle}>In Between <span className={styles.liveTag}>LIVE</span></h1>\n            <p className={styles.gameIdText}>\n              <span \n                className={styles.gameIdLink} \n                onClick={() => setShowGameSummary(true)}\n                title=\"Click to view game summary\"\n                data-gamepad-focusable=\"true\"\n                tabIndex=\"0\"\n              >\n                Game #{gameId}\n              </span>\n            </p>\n          </div>\n          \n          <div className={styles.mobileRight}>\n            <div className={styles.mobileControlsStack}>\n              <div className={styles.balanceDisplay}>\n                Balance: <CurrencyAmount amount={Number(playerBalance)} size=\"small\" />\n              </div>\n              <div className={styles.mobileActions}>\n                <PreferencesButton \n                  onModalStateChange={setIsPreferencesOpen}\n                  data-gamepad-focusable=\"true\" \n                />\n                <RulesButton \n                  onModalStateChange={setIsRulesOpen}\n                  data-gamepad-focusable=\"true\" \n                />\n                <PlayerStatsButton \n                  onModalStateChange={setIsStatsOpen}\n                  data-gamepad-focusable=\"true\" \n                />\n                <StoreButton onClick={() => setShowStoreModal(true)} data-gamepad-focusable=\"true\" />\n                <LeaveButton \n                onClick={handleLeaveGame} \n                disabled={isPlayerReady}\n                data-gamepad-focusable=\"true\" \n              />\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Bottom row: Phase indicator (full width) */}\n        <div className={styles.mobileBottomRow}>\n          <div \n            className={`${styles.gamePhase} ${currentPhase === 'betting' ? \n              (isCurrentPlayersTurn ? styles.phaseBettingYourTurn : styles.phaseBettingWaiting) : \n              styles[`phase${currentPhase.charAt(0).toUpperCase() + currentPhase.slice(1)}`]}`} \n            data-phase={currentPhase}\n          >\n            <span className={styles.phaseIcon}>{phaseInfo.icon}</span>\n            <span className={styles.phaseText}>{phaseInfo.text}</span>\n            {timeLeft !== null && (\n              <div className={styles.timerBar}>\n                <div \n                  className={styles.timerProgress} \n                  style={{ \n                    width: `${(timeLeft / (currentPhase === 'dealing' ? TIMERS.DEALING_DURATION :\n                                         currentPhase === 'betting' ? TIMERS.BETTING_DURATION :\n                                         currentPhase === 'revealing' ? TIMERS.REVEALING_DURATION :\n                                         TIMERS.RESULTS_DURATION)) * 100}%`\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Game Summary Modal */}\n      {showGameSummary && (\n        <GameSummaryModal \n          onClose={() => setShowGameSummary(false)} \n          gameData={gameState}\n        />\n      )}\n      \n      {/* Store Modal */}\n      {showStoreModal && (\n        <StoreModal\n          onClose={() => setShowStoreModal(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GameHeader;\n","import React from 'react';\n\n/**\n * Arrow icon component that can be rotated to point up or down\n * @param {Object} props - Component props\n * @param {string} props.direction - Direction of the arrow ('up' or 'down')\n * @param {string} props.color - Color of the arrow (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst ArrowIcon = ({ direction = 'up', color = 'currentColor', size = 24 }) => {\n  // Determine rotation based on direction\n  const rotation = direction === 'down' ? 'rotate(180deg)' : 'rotate(0deg)';\n  \n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n      style={{ transform: rotation, display: 'inline-block', transformOrigin: 'center' }}\n    >\n      {/* This is the shift/arrow up icon from Material Design */}\n      <path d=\"M7 11l5-5 5 5M7 17l5-5 5 5\" />\n    </svg>\n  );\n};\n\nexport default ArrowIcon;\n","import React from 'react';\nimport styles from './styles/CardDisplay.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport ArrowIcon from './icons/ArrowIcon';\n\nconst CardDisplay = () => {\n  const { gameState } = useGameContext();\n  \n  if (!gameState) {\n    return <div className={styles.loading}>Loading game state...</div>;\n  }\n  \n  const { \n    firstCard,\n    secondCard,\n    thirdCard,\n    phase,\n    dealer\n  } = gameState;\n  \n  // Card state is managed by the game context\n  \n  const dealerName = dealer?.name;\n  const cardLabels = {\n    '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9', '10': '10',\n    'J': 'J', 'Q': 'Q', 'K': 'K', 'A': 'A'\n  };\n  \n  // Map for handling both string names and direct symbols\n  const suitSymbols = {\n    'hearts': '♥',\n    'diamonds': '♦',\n    'clubs': '♣',\n    'spades': '♠',\n    // Handle direct Unicode symbols as well\n    '♥': '♥',\n    '♦': '♦',\n    '♣': '♣',\n    '♠': '♠'\n  };\n  \n  // Helper to determine if a suit is red\n  const isRedSuit = (suit) => {\n    return suit === '♥' || suit === '♦' || suit === 'hearts' || suit === 'diamonds';\n  };\n  \n  const renderCard = (card, index) => {\n    if (!card) return (\n      <div key={`empty-${index}`} className={styles.card}>\n        <div className={styles.cardBack}></div>\n      </div>\n    );\n    \n    const isRed = isRedSuit(card.suit);\n    const isAce = card.value === 'A';\n    const isAceLow = card.isAceLow;\n    const isMiddleCard = index === 1; // Index 1 is the middle card position\n    \n    return (\n      <div key={`${card.value}-${card.suit}-${index}`} \n        className={`${styles.card} ${isRed ? styles.redCard : styles.blackCard} ${isAce ? styles.aceCard : ''}`}\n      >\n        {isAce && !isMiddleCard && (\n          <div className={`${styles.aceIndicator} ${isAceLow ? styles.aceLow : styles.aceHigh} ${isRed ? styles.redCard : styles.blackCard}`}>\n            {isAceLow ? (\n              <span className={styles.indicatorContent}>LOW <ArrowIcon direction=\"down\" color={isRed ? '#e74c3c' : '#2c3e50'} size={16} /></span>\n            ) : (\n              <span className={styles.indicatorContent}>HIGH <ArrowIcon direction=\"up\" color={isRed ? '#e74c3c' : '#2c3e50'} size={16} /></span>\n            )}\n          </div>\n        )}\n        <div className={styles.cardCorner}>\n          <div className={styles.cardValue}>{cardLabels[card.value]}</div>\n          <div className={styles.cardSuit}>{suitSymbols[card.suit]}</div>\n        </div>\n        <div className={styles.cardCenter}>\n          {suitSymbols[card.suit]}\n        </div>\n        <div className={`${styles.cardCorner} ${styles.bottomRight}`}>\n          <div className={styles.cardValue}>{cardLabels[card.value]}</div>\n          <div className={styles.cardSuit}>{suitSymbols[card.suit]}</div>\n        </div>\n      </div>\n    );\n  };\n  \n  // Function to handle card positioning \n  const renderCardLayout = () => {\n    // Create an array of 3 nulls to represent the card slots\n    let displayCards = [null, null, null];\n    \n    // Check if we have a valid game state with cards\n    if (!firstCard && !secondCard && !thirdCard) {\n      return displayCards.map((card, index) => renderCard(card, index));\n    }\n    \n    // Handle the individual card properties\n    if (firstCard) {\n      displayCards[0] = {...firstCard}; // Left position - use spread operator to create a copy\n    }\n    \n    if (secondCard) {\n      displayCards[2] = {...secondCard}; // Right position - use spread operator to create a copy\n    }\n    \n    if (thirdCard) {\n      displayCards[1] = {...thirdCard}; // Middle position - use spread operator to create a copy\n    }\n    \n    return displayCards.map((card, index) => renderCard(card, index));\n  };\n\n  return (\n    <div className={styles.cardDisplayContainer}>\n      <div className={`${styles.cardsRow} ${phase === 'dealing' ? styles.dealingPhase : ''} ${phase === 'revealing' ? styles.revealingPhase : ''}`}>\n        {renderCardLayout()}\n      </div>\n    </div>\n  );\n};\n\nexport default CardDisplay;\n","import React from 'react';\nimport styles from './styles/PotButton.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\n\n/**\n * PotButton - The most epic, baller button in the entire game\n * Features a shimmering gold border with a shiny silver background to make the gold currency pop\n * Includes multiple overlapping layers and effects for maximum visual impact\n * \n * @param {Object} props - Component props\n * @param {number} props.amount - The pot amount to display\n * @param {boolean} props.disabled - Whether the button is disabled\n * @param {function} props.onClick - Function to call when the button is clicked\n */\nconst PotButton = ({ amount, disabled, onClick, ...props }) => {\n  return (\n    <button\n      className={`${styles.potButton} ${disabled ? styles.disabled : ''}`}\n      onClick={onClick}\n      disabled={disabled}\n      aria-label={`Bet the pot: ${amount} chips`}\n      {...props}\n    >\n      {/* Layer 2: Gold border with texture */}\n      <div className={styles.shimmerBorder}></div>\n      \n      {/* Layer 4: Silver metallic background */}\n      <div className={styles.buttonBackground}></div>\n      \n      {/* Layer 5: Light reflection effects */}\n      <div className={styles.reflectionEffect}></div>\n      \n      {/* Layer 6-8: Button content with 3D transform */}\n      <div className={styles.buttonContent}>\n        <span className={styles.potText}>POT</span>\n        <span className={styles.potAmount}>\n          <CurrencyAmount amount={amount} background=\"pill\" />\n        </span>\n      </div>\n    </button>\n  );\n};\n\nexport default PotButton;\n","import React, { useState } from 'react';\nimport styles from './styles/BettingPanel.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport PotButton from './PotButton.jsx';\nimport GamepadInput from './GamepadInput';\n\nconst BettingPanel = () => {\n  // Get game state and actions from context\n  const { gameState, placeBet } = useGameContext();\n  const { socket } = useSocket();\n  // Initialize state first - before any conditional returns\n  const [customBet, setCustomBet] = useState('');\n  \n  if (!gameState) return null;\n  \n  const { \n    players, \n    currentPlayerId, \n    pot: potAmount, \n    phase,\n    firstCard,\n    secondCard\n  } = gameState;\n  \n  // Only show in betting phase\n  if (phase !== 'betting') return null;\n  \n  const isCurrentPlayer = socket && currentPlayerId === socket.auth?.userId;\n  const myPlayer = socket && players && socket.auth?.userId ? players[socket.auth.userId] : null;\n  const playerBalance = Number(myPlayer?.balance || 0);\n  \n  const handleCustomBetChange = (e) => {\n    // Only allow numbers\n    const value = e.target.value.replace(/[^0-9]/g, '');\n    \n    // Don't allow bets greater than pot or player balance\n    const maxBet = Math.min(potAmount, playerBalance);\n    if (value && parseInt(value) > maxBet) {\n      setCustomBet(maxBet.toString());\n    } else {\n      setCustomBet(value);\n    }\n  };\n  \n  const handleCustomBetSubmit = () => {\n    if (customBet && !isNaN(customBet)) {\n      const betAmount = parseInt(customBet, 10);\n      // Verify bet is at least $1 and at most the pot/balance\n      if (betAmount >= 1 && betAmount <= Math.min(potAmount, playerBalance)) {\n        placeBet(betAmount);\n        setCustomBet('');\n      }\n    }\n  };\n  \n  // Helper to handle Enter key in the custom bet input\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleCustomBetSubmit();\n    }\n  };\n  \n\n  \n  const renderBettingControls = () => {\n    if (!isCurrentPlayer) return null;\n    \n    return (\n      <div className={styles.betContainer}>\n        <p className={styles.betText}>Place your bet (Min: <CurrencyAmount amount={1} />, Max: <CurrencyAmount amount={Math.min(potAmount, playerBalance)} />)</p>\n        \n        {/* Extreme options row */}\n        <div className={styles.extremeOptionsRow}>\n          <button\n            className={`${styles.betButton} ${styles.extremeButton} ${styles.passButton}`}\n            onClick={() => placeBet(0)}\n            data-gamepad-focusable=\"true\"\n            autoFocus\n          >\n            PASS\n          </button>\n          \n          <PotButton \n            amount={potAmount}\n            onClick={() => placeBet(potAmount)}\n            disabled={potAmount > playerBalance}\n            data-gamepad-focusable=\"true\"\n          />\n        </div>\n        \n        {/* Standard bet options */}\n        <div className={styles.betButtons}>\n          {[1, 2, 5].map(amount => {\n            const maxBet = Math.min(potAmount, playerBalance);\n            const disabled = amount > maxBet;\n            return (\n              <button\n                key={amount}\n                className={`${styles.betButton} ${disabled ? styles.disabledButton : ''}`}\n                onClick={() => placeBet(amount)}\n                disabled={disabled}\n                data-gamepad-focusable=\"true\"\n              >\n                <CurrencyAmount amount={amount} />\n              </button>\n            );\n          })}\n          \n          {/* Custom bet input */}\n          <div className={styles.customBetContainer}>\n            <GamepadInput\n              title=\"Enter Bet Amount\"\n              type=\"number\"\n              className={styles.customBetInput}\n              placeholder=\"Custom\"\n              value={customBet}\n              onChange={handleCustomBetChange}\n              onKeyPress={handleKeyPress}\n            />\n            <button\n              className={styles.customBetButton}\n              onClick={handleCustomBetSubmit}\n              disabled={!customBet}\n              data-gamepad-focusable=\"true\"\n            >\n              Bet\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n\n  // Only render the panel for the current player\n  if (!isCurrentPlayer) return null;\n  \n  return (\n    <div className={styles.bettingPanel}>\n      {renderBettingControls()}\n    </div>\n  );\n};\n\nexport default BettingPanel;\n","import React, { useRef, useEffect, useState, useMemo, useContext } from 'react';\nimport styles from './styles/PlayerList.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport UserAvatar from './UserAvatar.jsx';\nimport { ICONS } from '../constants';\nimport UserDataContext from '../contexts/UserDataContext';\n\nconst PlayerList = () => {\n  const { gameState } = useGameContext();\n  const { socket } = useSocket();\n  const userDataContext = useContext(UserDataContext);\n  \n  // Prefetch user data for all players when game state changes\n  useEffect(() => {\n    if (gameState?.players && userDataContext) {\n      const userIds = Object.values(gameState.players).map(player => player.userId).filter(Boolean);\n      if (userIds.length > 0) {\n        userDataContext.prefetchUsers(userIds);\n      }\n    }\n  }, [gameState?.players, userDataContext]);\n  \n  if (!gameState || !gameState.players) {\n    return (\n      <div className={styles.emptyPlayerList}>\n        <p>Waiting for game data...</p>\n      </div>\n    );\n  }\n  \n  const { players, currentPlayerId, dealerId, gameTransactions = [] } = gameState;\n  const currentUserId = socket?.auth?.userId;\n  \n  // Use server-side calculated totals\n  const playerTotals = gameState.totals || {};\n  if (!players || Object.keys(players).length === 0) {\n    return (\n      <div className={styles.emptyPlayerList}>\n        <p>Waiting for players to join...</p>\n      </div>\n    );\n  }\n\n  \n  return (\n    <div className={styles.playersContainer}>\n      <h3 className={styles.playersTitle}>Scoreboard</h3>\n      \n      <div className={styles.playersList}>\n        {/* Use gameState.seats to render players in seat order */}\n        {gameState.seats\n          .filter(playerId => playerId !== null && players[playerId])\n          .map(playerId => {\n            const player = players[playerId];\n            const isCurrentPlayer = playerId === currentPlayerId;\n            // Compare player.userId with currentUserId instead of comparing playerId with currentUserId\n            const isCurrentUser = player.userId === currentUserId;\n            const isDealer = playerId === dealerId; // Use playerId instead of player.id\n            const isDisconnected = player.disconnected === true;\n            \n            return (\n              <div \n                key={playerId} \n                className={`\n                  ${styles.playerItem}\n                  ${isCurrentPlayer ? styles.currentPlayer : ''}\n                  ${isCurrentUser ? styles.currentUser : ''}\n                `}\n              >\n              <div className={styles.playerInfo}>\n                <UserAvatar \n                  userId={player.userId}\n                  size=\"small\" \n                  showName={false}\n                />\n                <span className={styles.playerName}>\n                  {player.name}\n                  <span className={styles.playerStatus}>\n                    {isDealer && ` ${ICONS.DEALER}`}\n                    {player.disconnected && <span className={styles.disconnectedIndicator} title=\"Player disconnected\">⚠️ Disconnected</span>}\n                  </span>\n                </span>\n              </div>\n              <div className={styles.playerBalanceContainer}>\n                <BalanceDisplay balance={playerTotals[playerId] || 0} />\n\n                <div \n                  className={`\n                    ${styles.readyIndicator} \n                    ${player.isSittingOut ? styles.sittingOut : (player.isReady ? styles.ready : styles.notReady)}\n                  `}\n                  title={player.isSittingOut ? 'Sitting Out' : (player.isReady ? 'Ready' : 'Not Ready')}\n                >\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst BalanceDisplay = ({ balance }) => {\n  const [prevBalance, setPrevBalance] = useState(balance);\n  const [animationClass, setAnimationClass] = useState('');\n  const timeoutRef = useRef(null);\n\n  useEffect(() => {\n    if (balance !== prevBalance) {\n      // Determine if balance increased or decreased\n      const isIncrease = balance > prevBalance;\n      setAnimationClass(isIncrease ? styles.balanceIncrease : styles.balanceDecrease);\n\n      // Clear previous timeout if it exists\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n\n      // Remove animation class after animation completes\n      timeoutRef.current = setTimeout(() => {\n        setAnimationClass('');\n      }, 1000); // Match animation duration\n\n      setPrevBalance(balance);\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [balance]);\n\n  return (\n    <span className={`${styles.playerBalance} ${animationClass}`}>\n      <CurrencyAmount amount={balance} />\n    </span>\n  );\n};\n\nexport default PlayerList;\n","import React from 'react';\nimport styles from './styles/PotDisplay.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport { ICONS } from '../constants';\n\nconst PotDisplay = () => {\n  const { gameState } = useGameContext();\n  \n  if (!gameState) return null;\n  \n  const { pot, round = 1 } = gameState;\n  \n  return (\n    <div className={styles.potDisplayContainer}>\n      <div className={styles.potIconWrapper}>\n        <span className={styles.potIcon}>{ICONS.POT}</span>\n      </div>\n      <div className={styles.potInfo}>\n        <h3 className={styles.potLabel}>\n          POT <span className={styles.potCounter}>({round})</span>\n        </h3>\n        <span className={styles.potAmount}><CurrencyAmount amount={pot} size=\"medium\" /></span>\n      </div>\n    </div>\n  );\n};\n\nexport default PotDisplay;\n","import React from 'react';\nimport styles from './styles/DeckDisplay.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { ICONS } from '../constants';\n\nconst DeckDisplay = () => {\n  const { gameState } = useGameContext();\n  \n  if (!gameState) return null;\n  \n  // Get the deck size and deck count from the game state\n  const { deckSize = 0, deckCount = 1 } = gameState;\n  \n  // Calculate the visual thickness of the deck based on remaining cards\n  const getThicknessClass = () => {\n    if (deckSize >= 40) return styles.deckThick;\n    if (deckSize >= 25) return styles.deckMedium;\n    if (deckSize >= 10) return styles.deckThin;\n    return styles.deckVeryThin;\n  };\n  \n  return (\n    <div className={styles.deckDisplayContainer}>\n      <div className={`${styles.deckVisual} ${getThicknessClass()}`}>\n        <div className={styles.deckIcon}>{ICONS.DECK}</div>\n      </div>\n      <div className={styles.deckInfo}>\n        <h3 className={styles.deckLabel}>\n          DECK <span className={styles.deckCounter}>({deckCount})</span>\n        </h3>\n        <span className={styles.deckCount}>{deckSize}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default DeckDisplay;\n","import React from 'react';\nimport { usePreferences } from '../contexts/PreferencesContext';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport styles from './styles/AutoAnteToggle.module.css';\n\nconst AutoAnteToggle = () => {\n  const { preferences, toggleAutoAnte, loading } = usePreferences();\n  const { gameState, playerReady } = useGameContext();\n  const { socket } = useSocket();\n  \n  const handleToggle = async () => {\n    const newValue = !preferences.autoAnte;\n    const success = await toggleAutoAnte();\n    \n    // Only auto-ante if the player is not already anted\n    if (newValue && success && playerReady) {\n      // Check if player is already anted (using userId instead of socket.id)\n      let myPlayer = null;\n      if (socket && socket.auth?.userId && gameState?.players) {\n        // Find player by userId\n        const playerIds = Object.keys(gameState.players);\n        for (const id of playerIds) {\n          if (gameState.players[id].userId === socket.auth.userId) {\n            myPlayer = gameState.players[id];\n            break;\n          }\n        }\n      }\n      const isPlayerReady = myPlayer?.isReady;\n      \n      // Only call playerReady if the player is not already ready\n      if (!isPlayerReady) {\n        playerReady();\n      }\n    }\n  };\n  \n  if (loading) {\n    return <div className={styles.loading}>Loading preferences...</div>;\n  }\n  \n  return (\n    <div className={styles.toggleContainer}>\n      <label className={styles.toggleLabel}>\n        <input\n          type=\"checkbox\"\n          checked={preferences.autoAnte}\n          onChange={handleToggle}\n          className={styles.toggleInput}\n          data-gamepad-focusable=\"true\"\n        />\n        <span className={styles.toggleSlider}></span>\n        <span className={styles.toggleText}>\n          Auto-Ante\n        </span>\n      </label>\n    </div>\n  );\n};\n\nexport default AutoAnteToggle;\n","import React from 'react';\nimport styles from './styles/AnteControls.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport { ICONS } from '../constants';\nimport AutoAnteToggle from './AutoAnteToggle.jsx';\n\n\nconst AnteControls = () => {\n  // Get game state and actions from context\n  const { gameState, playerReady, playerUnready } = useGameContext();\n  const { socket } = useSocket();\n  const { user } = useAuth();\n  \n  if (!gameState) return null;\n  \n  const { \n    players, \n    anteAmount, \n    phase \n  } = gameState;\n  \n  // Only show in waiting phase\n  if (phase !== 'waiting') return null;\n  \n  // Find the player by user ID\n  let myPlayer = null;\n  if (socket && socket.auth?.userId && players) {\n    // Find player by userId\n    const playerIds = Object.keys(players);\n    for (const id of playerIds) {\n      if (players[id].userId === socket.auth.userId) {\n        myPlayer = players[id];\n        break;\n      }\n    }\n  } else if (user && players) {\n    // If we can't find by socket ID, try to find by user ID\n    const playerIds = Object.keys(players);\n    for (const id of playerIds) {\n      if (players[id].userId === user.id) {\n        myPlayer = players[id];\n        console.log(`[AnteControls] Found player by user ID instead of socket ID`);\n        break;\n      }\n    }\n  }\n  \n  // Get player balance and ready status\n  const playerBalance = Number(myPlayer?.balance || 0);\n  const isPlayerReady = myPlayer?.isReady;\n  \n  // Check if player has enough chips\n  const hasEnoughChips = playerBalance >= anteAmount;\n  \n  // Player state and readiness is managed by the game context\n  \n  return (\n    <div className={styles.anteControlsWrapper}>\n      <div className={styles.controlsContainer}>\n        {/* Main action button (Ante or Back Out) */}\n        <div className={styles.buttonContainerRow}>\n          {!isPlayerReady ? (\n            // Player is not ready - show Ante button and Sit Out button side by side\n            <div className={styles.buttonContainerRow}>\n              <button \n                className={styles.anteButton}\n                onClick={playerReady}\n                disabled={!hasEnoughChips}\n                aria-label=\"Ante up\"\n                data-gamepad-focusable=\"true\"\n                autoFocus\n              >\n                {/* Add shimmer border for glimmering effect */}\n                <div className={styles.shimmerBorder}></div>\n                <span className={styles.anteIcon}>{ICONS.CHECK}</span>\n                <div className={styles.buttonInfo}>\n                  <h3 className={styles.buttonLabel}>ANTE</h3>\n                  <span className={styles.buttonAmount}><CurrencyAmount amount={anteAmount} /></span>\n                </div>\n              </button>\n\n              <button\n                className={`${styles.backOutButton} ${styles.sitOutHalfWidth}`}\n                onClick={() => {\n                  if (socket && gameState && user) {\n                    socket.emit('sitOut', {\n                      gameId: gameState.id,\n                      userId: socket.auth?.userId || user.id\n                    });\n                  }\n                }}\n                disabled={myPlayer?.isSittingOut} // Disable if sitting out\n                title={myPlayer?.isSittingOut ? \"You are currently sitting out\" : \"Sit out next round\"}\n                aria-label=\"Sit Out\"\n                data-gamepad-focusable=\"true\"\n              >\n                <div className={styles.shimmerBorder}></div>\n                <div className={styles.buttonInfo}>\n                  <h3 className={styles.buttonLabel}>SIT OUT</h3>\n                </div>\n              </button>\n\n              {!hasEnoughChips && (\n                <p className={styles.notEnoughChipsText}>Not enough coins (<CurrencyAmount amount={anteAmount} /> required)</p>\n              )}\n            </div>\n          ) : (\n            // Player is ready - show Back Out button\n            <div className={styles.buttonContainerRow}>\n              <button \n                className={styles.backOutButton}\n                onClick={() => {\n                  if (typeof playerUnready === 'function') {\n                    playerUnready();\n                  } else {\n                    console.error('playerUnready is not a function');\n                  }\n                }}\n                aria-label=\"Back out\"\n                data-gamepad-focusable=\"true\"\n              >\n                {/* Add shimmer border for glimmering effect */}\n                <div className={styles.shimmerBorder}></div>\n                <span className={styles.backOutIcon}>✕</span>\n                <div className={styles.buttonInfo}>\n                  <h3 className={styles.buttonLabel}>BACK OUT</h3>\n                </div>\n              </button>\n            </div>\n          )}\n        </div>\n        \n        {/* Auto-Ante toggle - always shown */}\n        <div className={styles.autoAnteContainer}>\n          <AutoAnteToggle />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnteControls;\n","import { useGameContext } from '../contexts/GameContext';\nimport styles from './styles/ResultsPanel.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\n\n/**\n * Results panel component that displays the outcome of a hand during the results phase\n */\nconst ResultsPanel = () => {\n  const { gameState } = useGameContext();\n\n  // If there's no result, don't render anything\n  if (!gameState.result) return null;\n\n  const { result, players, resultCountdown } = gameState;\n  const playerName = players[result.playerId]?.name;\n\n  const renderWinResult = () => (\n    <>\n      <h2 className={`${styles.resultText} ${styles.winText}`}>\n        {playerName} WON!\n      </h2>\n      {result.winnings > 0 && (\n        <p className={styles.winningsText}>\n          Winnings: <CurrencyAmount amount={result.winnings / 2} size=\"medium\" />\n        </p>\n      )}\n    </>\n  );\n\n  const renderLossResult = () => (\n    <>\n      <h2 className={`${styles.resultText} ${styles.loseText}`}>\n        {playerName} LOST!\n      </h2>\n      {result.betAmount > 0 && (\n        <p className={styles.winningsText}>\n          Loss: <CurrencyAmount amount={result.betAmount} size=\"medium\" />\n        </p>\n      )}\n    </>\n  );\n\n  const renderTieResult = () => {\n    const penaltyAmount = result.betAmount * (result.isTripleAceTie ? 3 : 2);\n    \n    return (\n      <>\n        <div className={styles.penaltyWarning}>\n          <div className={styles.cautionTape}></div>\n        </div>\n        <h2 className={`${styles.resultText} ${styles.tieText}`}>\n          {playerName} {result.isTripleAceTie ? '3X' : '2X'} PENALTY!\n        </h2>\n        {result.betAmount > 0 && (\n          <p className={styles.winningsText}>\n            Penalty: <CurrencyAmount amount={penaltyAmount} size=\"medium\" />\n          </p>\n        )}\n      </>\n    );\n  };\n\n  const renderOutcome = () => {\n    switch (result.outcome) {\n      case 'win':\n        return renderWinResult();\n      case 'lose':\n        return renderLossResult();\n      case 'tie':\n        return renderTieResult();\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={styles.resultsPanel}>\n      {/* Card display section removed - cards are now visible in the game board */}\n\n      <div className={styles.resultContent}>\n        {renderOutcome()}\n        \n        {resultCountdown && (\n          <div className={styles.countdownContainer}>\n            <p className={styles.countdownText}>\n              Next hand in: {resultCountdown.countdownSeconds}s\n            </p>\n            <div className={styles.countdownProgress}>\n              <div \n                className={styles.countdownBar} \n                style={{ width: `${(resultCountdown.countdownSeconds / 5) * 100}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsPanel;","import React, { useState, useEffect } from 'react';\nimport styles from './styles/AceChoicePanel.module.css';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport ArrowIcon from './icons/ArrowIcon';\n\nconst AceChoicePanel = () => {\n  const { socket } = useSocket();\n  const { gameState } = useGameContext();\n  const { user } = useAuth();\n  const [countdown, setCountdown] = useState(15);\n  \n  // Set up countdown timer when the component mounts\n  useEffect(() => {\n    if (gameState?.waitingForAceDecision && socket?.auth?.userId === gameState.currentPlayerId) {\n      setCountdown(15); // Reset to 15 seconds\n      \n      const timer = setInterval(() => {\n        setCountdown(prevCount => {\n          if (prevCount <= 1) {\n            clearInterval(timer);\n            return 0;\n          }\n          return prevCount - 1;\n        });\n      }, 1000);\n      \n      return () => clearInterval(timer);\n    }\n  }, [gameState?.waitingForAceDecision, gameState?.currentPlayerId, socket?.auth?.userId]);\n  \n  const handleAceChoice = (isAceLow) => {\n    socket.emit('chooseAceValue', { isAceLow });\n  };\n  \n  // Check if it's the current player's turn\n  const isCurrentPlayersTurn = socket?.auth?.userId === gameState.currentPlayerId;\n  const currentPlayerName = gameState.players[gameState.currentPlayerId]?.name || 'Current player';\n  \n  const renderAceChoiceControls = () => {\n    if (!isCurrentPlayersTurn) return null;\n    \n    return (\n      <div className={styles.aceChoiceControls}>\n        <p className={styles.aceChoiceText}>\n          You've been dealt an Ace! Choose whether it should be high or low.\n          <span className={styles.countdown}> ({countdown}s)</span>\n        </p>\n        \n        <div className={styles.aceChoiceButtons}>\n          <button \n            className={`${styles.aceChoiceButton} ${styles.aceHighButton}`}\n            onClick={() => handleAceChoice(false)}\n            data-gamepad-focusable=\"true\"\n            autoFocus\n          >\n            <span className={styles.buttonContent}>ACE HIGH <ArrowIcon direction=\"up\" color=\"white\" size={20} /></span>\n          </button>\n          <button \n            className={`${styles.aceChoiceButton} ${styles.aceLowButton}`}\n            onClick={() => handleAceChoice(true)}\n            data-gamepad-focusable=\"true\"\n          >\n            <span className={styles.buttonContent}>ACE LOW <ArrowIcon direction=\"down\" color=\"white\" size={20} /></span>\n          </button>\n        </div>\n      </div>\n    );\n  };\n  \n  const renderWaitingMessage = () => {\n    if (isCurrentPlayersTurn) return null;\n    \n    return (\n      <div className={styles.waitingMessage}>\n        <p className={styles.waitingText}>\n          {currentPlayerName} is choosing whether their Ace is high or low...\n        </p>\n      </div>\n    );\n  };\n  \n  return (\n    <div className={styles.aceChoicePanel}>\n      {renderAceChoiceControls()}\n      {renderWaitingMessage()}\n    </div>\n  );\n};\n\nexport default AceChoicePanel;\n","import React, { useState, useEffect } from 'react';\nimport styles from './styles/SecondChancePanel.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport CurrencyAmount from './common/CurrencyAmount';\n\nconst SecondChancePanel = () => {\n  const { gameState } = useGameContext();\n  const { socket } = useSocket();\n  const [loading, setLoading] = useState(false);\n  const [actionType, setActionType] = useState(null); // 'ante' or 'pass'\n  const [countdown, setCountdown] = useState(15);\n  \n  // Set up countdown timer when the component mounts\n  useEffect(() => {\n    if (gameState?.waitingForSecondChance && socket?.auth?.userId === gameState.currentPlayerId) {\n      setCountdown(15); // Reset to 15 seconds\n      \n      const timer = setInterval(() => {\n        setCountdown(prevCount => {\n          if (prevCount <= 1) {\n            clearInterval(timer);\n            return 0;\n          }\n          return prevCount - 1;\n        });\n      }, 1000);\n      \n      return () => clearInterval(timer);\n    }\n  }, [gameState?.waitingForSecondChance, gameState?.currentPlayerId, socket?.auth?.userId]);\n  \n  const { \n    players, \n    currentPlayerId, \n    anteAmount = 1\n  } = gameState;\n  \n  const isCurrentPlayer = socket && currentPlayerId === socket.auth?.userId;\n  const currentPlayer = players[currentPlayerId];\n  \n  const handleSecondChance = (anteAgain) => {\n    if (socket) {\n      setLoading(true);\n      setActionType(anteAgain ? 'ante' : 'pass');\n      socket.emit('secondChance', { anteAgain });\n    }\n  };\n  \n  const renderSecondChanceControls = () => {\n    if (!isCurrentPlayer) return null;\n    \n    return (\n      <div className={styles.secondChanceControls}>\n        <p className={styles.secondChanceText}>\n          Would you like to ante up again for a second chance?\n          <span className={styles.countdown}> ({countdown}s)</span>\n        </p>\n        \n        <div className={styles.secondChanceButtons}>\n          <button\n            className={`${styles.secondChanceButton} ${styles.anteAgainButton}`}\n            onClick={() => handleSecondChance(true)}\n            data-gamepad-focusable=\"true\"\n            autoFocus\n          >\n            {loading && actionType === 'ante' ? 'Processing...' : (\n              <>\n                Ante Up <span className={styles.currencyWrapper}>\n                  <CurrencyAmount amount={anteAmount} size=\"small\" />\n                </span>\n              </>\n            )}\n          </button>\n          <button\n            className={`${styles.secondChanceButton} ${styles.passButton}`}\n            onClick={() => handleSecondChance(false)}\n            data-gamepad-focusable=\"true\"\n          >\n            {loading && actionType === 'pass' ? 'Processing...' : 'Pass'}\n          </button>\n        </div>\n      </div>\n    );\n  };\n  \n  const renderWaitingMessage = () => {\n    if (isCurrentPlayer) return null;\n    \n    return (\n      <div className={styles.waitingMessage}>\n          <p className={styles.waitingText}>\n            {currentPlayer?.name} is deciding whether to take a second chance.\n          </p>\n      </div>\n    );\n  };\n  \n  return (\n    <div className={styles.secondChancePanel}>\n      {renderSecondChanceControls()}\n      {renderWaitingMessage()}\n    </div>\n  );\n};\n\nexport default SecondChancePanel;\n","import React, { useState } from 'react';\nimport styles from './styles/GameLog.module.css';\nimport { useGameContext } from '../contexts/GameContext';\n\nconst GameLog = () => {\n  const { gameState } = useGameContext();\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  if (!gameState || !gameState.gameLog) return null;\n  \n  // Get the game log entries\n  const logEntries = gameState.gameLog || [];\n  \n  // Format timestamp to readable time\n  const formatTime = (timestamp) => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n  };\n  \n  // Toggle expanded state\n  const toggleExpanded = () => {\n    setIsExpanded(!isExpanded);\n  };\n  \n  // Determine how many entries to show\n  const displayEntries = isExpanded ? logEntries : logEntries.slice(0, 5);\n  \n  return (\n    <div className={styles.gameLogContainer}>\n      <div className={styles.gameLogHeader} onClick={toggleExpanded}>\n        <h3>Game Log</h3>\n        <span className={styles.expandIcon}>{isExpanded ? '▲' : '▼'}</span>\n      </div>\n      \n      <div className={`${styles.gameLogEntries} ${isExpanded ? styles.expanded : ''}`}>\n        {displayEntries.length === 0 ? (\n          <div className={styles.emptyLog}>No game events yet</div>\n        ) : (\n          displayEntries.map((entry, index) => (\n            <div key={index} className={styles.logEntry}>\n              <span className={styles.logTime}>{formatTime(entry.timestamp)}</span>\n              <span className={styles.logMessage}>{entry.message}</span>\n            </div>\n          ))\n        )}\n      </div>\n      \n      {!isExpanded && logEntries.length > 5 && (\n        <div className={styles.showMoreButton} onClick={toggleExpanded}>\n          Show {logEntries.length - 5} more entries\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameLog;\n","import React, { useState } from 'react';\nimport styles from './styles/EmojiReactions.module.css';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst EmojiReactions = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { socket } = useSocket();\n  const { gameState } = useGameContext();\n  const { user } = useAuth();\n\n  // Available emojis for reactions - colors matched to emoji appearance\n  const emojis = [\n    { emoji: '🔥', name: 'Fire', color: '#FF6B35' },       // Orange-red flame\n    { emoji: '😄', name: 'Happy', color: '#FFD93D' },      // Yellow happy face\n    { emoji: '💩', name: 'Poop', color: '#8B4513' },       // Brown\n    { emoji: '😎', name: 'Cool', color: '#4A5568' },       // Dark gray (sunglasses)\n    { emoji: '🤯', name: 'Mind Blown', color: '#FFA500' }, // Orange explosion\n    { emoji: '😈', name: 'Devilish', color: '#9333EA' },   // Purple devil\n    { emoji: '😬', name: 'Worried', color: '#FCD34D' },    // Yellow grimace\n    { emoji: '👏', name: 'Applause', color: '#FBBF24' },   // Skin tone yellow\n    { emoji: '😭', name: 'Crying', color: '#3B82F6' },     // Blue tears\n    { emoji: '🤡', name: 'Clown', color: '#EF4444' },      // Red nose\n    { emoji: '💪', name: 'Strong', color: '#F59E0B' },     // Skin/muscle tone\n    { emoji: '😅', name: 'Nervous', color: '#60A5FA' },    // Blue sweat drop\n    { emoji: '🎉', name: 'Celebration', color: '#A855F7' }, // Multi-color party\n    { emoji: '🤔', name: 'Thinking', color: '#6B7280' },   // Neutral gray\n    { emoji: '🙈', name: 'See No Evil', color: '#A0522D' }, // Monkey brown\n    { emoji: '😤', name: 'Confident', color: '#DC2626' }   // Red anger/steam\n  ];\n\n  const handleEmojiClick = (emojiData) => {\n    if (!socket || !gameState || !user) {\n      return;\n    }\n\n    // Send emoji reaction to server\n    socket.emit('emojiReaction', {\n      gameId: gameState.id,\n      emoji: emojiData.emoji,\n      color: emojiData.color,\n      playerName: user.username\n    });\n\n    // Close panel after selection\n    setIsOpen(false);\n  };\n\n  const togglePanel = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className={styles.emojiReactions}>\n      {/* Toggle button */}\n      <button\n        className={styles.toggleButton}\n        onClick={togglePanel}\n        data-gamepad-focusable=\"true\"\n        aria-label=\"Toggle emoji reactions\"\n      >\n        😊\n      </button>\n\n      {/* Emoji panel */}\n      {isOpen && (\n        <div className={styles.emojiPanel}>\n          <div className={styles.emojiGrid}>\n            {emojis.map((emojiData, index) => (\n              <button\n                key={index}\n                className={styles.emojiButton}\n                onClick={() => handleEmojiClick(emojiData)}\n                data-gamepad-focusable=\"true\"\n                title={emojiData.name}\n                style={{ '--emoji-color': emojiData.color }}\n              >\n                {emojiData.emoji}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmojiReactions;","import React, { useEffect, useState } from 'react';\nimport styles from './styles/GameScreen.module.css';\nimport GameHeader from './GameHeader.jsx';\nimport CardDisplay from './CardDisplay.jsx';\nimport BettingPanel from './BettingPanel.jsx';\nimport PlayerList from './PlayerList.jsx';\nimport PotDisplay from './PotDisplay.jsx';\nimport DeckDisplay from './DeckDisplay.jsx';\nimport AnteControls from './AnteControls.jsx';\nimport ResultsPanel from './ResultsPanel.jsx';\nimport AceChoicePanel from './AceChoicePanel.jsx';\nimport SecondChancePanel from './SecondChancePanel.jsx';\nimport GameLog from './GameLog.jsx';\nimport EmojiReactions from './EmojiReactions.jsx';\n\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useGamepadNavigation } from '../hooks/useGamepadNavigation';\n\nconst GameScreen = ({ onReturnToLobby }) => {\n  // Track modal state to hide emoji reactions\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  // Get state and actions from context\n  const { \n    gameState,\n    error,\n    clearError\n  } = useGameContext();\n  \n  // Initialize gamepad navigation\n  const { isGamepadConnected } = useGamepadNavigation(true);\n  \n  // Auto-clear errors after 10 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        clearError();\n      }, 10000); // 10 seconds\n      \n      return () => clearTimeout(timer);\n    }\n  }, [error, clearError]);\n  \n  // Handle returning to lobby\n  const handleLeaveGame = () => {\n    // Call the parent callback\n    if (onReturnToLobby) {\n      onReturnToLobby();\n    }\n  };\n  \n  // Get the socket instance for event emission\n  const { socket } = useSocket(); \n  // Get the authenticated user data from AuthContext\n  const { user } = useAuth(); \n  \n  // Safety check for null gameState or missing phase\n  if (!gameState) {\n    return (\n      <div className={styles.loadingContainer}>\n        <p>Loading game state...</p>\n      </div>\n    );\n  }\n  \n  // Make sure we have a valid phase\n  const phase = gameState.phase || 'waiting';\n\n  // Find the current player based on the authenticated user ID from AuthContext\n  // Assuming the user object from AuthContext has an 'id' property\n  const currentUserId = user?.id; // Use user.id (adjust if property name is different e.g., user.userId)\n  const currentPlayer = gameState.players && currentUserId ? gameState.players[currentUserId] : null;\n\n  // Handler for the 'I'm Back' button\n  const handleImBackClick = () => {\n    if (socket && gameState.id) {\n      socket.emit('imBack', { gameId: gameState.id });\n    } else {\n      console.error(\"Cannot emit 'imBack': socket or gameId missing.\");\n    }\n  };\n\n\n  return (\n    <div className={styles.gameContainer}>\n      <div className={`${styles.gameScreen} mobile-scale-content`}>\n        <GameHeader \n          handleLeaveGame={handleLeaveGame} \n          onModalStateChange={setIsModalOpen}\n        />\n        \n        {error && (\n          <div className={styles.errorContainer}>\n            <p className={styles.errorText}>{error}</p>\n          </div>\n        )}\n        \n        <div className={styles.gameInfoWrapper}>\n          <DeckDisplay />\n          <PotDisplay />\n        </div>\n        \n        {/* Always show the CardDisplay component */}\n        <CardDisplay />\n        \n        {/* Primary check: Is the current player sitting out? */}\n        {currentPlayer?.isSittingOut ? (\n          // If sitting out, always show the 'I'm Back!' button regardless of phase\n          <button onClick={handleImBackClick} className={styles.imBackButton} data-gamepad-focusable=\"true\" autoFocus> \n            I'm Back!\n          </button>\n        ) : (\n          // If not sitting out, render controls based on the game phase\n          phase === 'waiting' ? (\n            /* Show ante controls during waiting phase */\n            <AnteControls />\n          ) : phase === 'results' ? (\n            /* Show the results panel during results phase */\n            <ResultsPanel />\n          ) : gameState.waitingForAceDecision ? (\n            /* Show the Ace choice panel when first card is an Ace */\n            <AceChoicePanel />\n          ) : gameState.waitingForSecondChance ? (\n            /* Show the Second Chance panel when matching cards are dealt */\n            <SecondChancePanel />\n          ) : phase === 'betting' ? (\n            /* Show the betting panel only during betting phase */\n            <BettingPanel />\n          ) : null\n        )}\n        \n        <div className={styles.gameBottomSection}>\n          <div className={styles.playerListContainer}>\n            <PlayerList />\n          </div>\n          <div className={styles.gameLogContainer}>\n            <GameLog />\n          </div>\n        </div>\n      </div>\n      \n      {/* Emoji reactions - positioned outside scaled content, hidden when modal is open */}\n      {!isModalOpen && <EmojiReactions />}\n    </div>\n  );\n};\n\nexport default GameScreen;\n","import React, { useState } from 'react';\nimport styles from './PasswordPromptModal.module.css';\nimport GamepadInput from '../GamepadInput';\n\nfunction PasswordPromptModal({ isOpen, onClose, onSubmit, gameId }) {\n  const [password, setPassword] = useState('');\n\n  if (!isOpen) return null;\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); // Prevent default form submission\n    onSubmit(password);\n    setPassword(''); // Clear password after submit\n  };\n\n  const handleCancel = () => {\n    setPassword(''); // Clear password on cancel\n    onClose();\n  };\n\n  return (\n    <div className={styles.modalOverlay}>\n      <div className={styles.modalContent}>\n        <h2>Password Required</h2>\n        <p>Please enter the password for game <strong>{gameId || ''}</strong>:</p>\n        <form onSubmit={handleSubmit}>\n          <GamepadInput\n            title=\"Enter Game Password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className={styles.passwordInput}\n            autoFocus\n            required\n          />\n          <div className={styles.modalActions}>\n            <button type=\"button\" onClick={handleCancel} className={`${styles.modalButton} ${styles.cancelButton}`} data-gamepad-focusable=\"true\">\n              Cancel\n            </button>\n            <button type=\"submit\" className={`${styles.modalButton} ${styles.submitButton}`} data-gamepad-focusable=\"true\">\n              Join Game\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default PasswordPromptModal;\n","import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { GameProvider, useGameContext } from '../contexts/GameContext';\nimport GameScreen from './GameScreen';\nimport { useSocket } from '../contexts/SocketContext';\nimport { LoadingScreen } from './common/LoadingScreen';\nimport PasswordPromptModal from './common/PasswordPromptModal';\nimport soundService from '../services/SoundService';\n\nconst GameRoom = () => {\n  const { gameId } = useParams();\n  const navigate = useNavigate();\n  const { socket, isConnected } = useSocket();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n  const hasInitiatedJoin = useRef(false); // Ref to track true initiation\n\n  const handleReturnToLobby = useCallback(() => {\n    if (socket && isConnected && gameId) {\n      soundService.play('ui.leave'); \n      socket.emit('leaveGame', { gameId }); \n      navigate('/');\n    }\n  }, [socket, isConnected, gameId, navigate]);\n\n  const handlePasswordSubmit = useCallback((password) => {\n    setIsPasswordModalOpen(false);\n    if (socket && gameId && password) {\n      setError(null); \n      socket.emit('joinGame', { gameId, password });\n      setLoading(true);\n    }\n  }, [socket, gameId]);\n\n  const handlePasswordCancel = useCallback(() => {\n    setIsPasswordModalOpen(false);\n    navigate('/');\n  }, [navigate]);\n\n  useEffect(() => {\n    setError(null);          \n    setIsPasswordModalOpen(false); \n    setLoading(true);        \n  }, [gameId]);\n\n  useEffect(() => {\n    if (!socket) {\n      return; \n    }\n\n    const onGameJoined = (data) => {\n      if (data && data.game && data.game.id === gameId) {\n        soundService.play('ui.join');\n        setLoading(false);\n        setError(null);\n        setIsPasswordModalOpen(false);\n      }\n    };\n\n    const onError = (errorData) => {\n      const message = errorData.message || 'An unknown error occurred';\n\n      if (message === 'Password required') {\n        console.error(errorData);\n        setIsPasswordModalOpen(true);\n        setLoading(false);\n        setError(null);\n      } else if (message === 'Invalid password') {\n        console.error(errorData);\n        setError('Invalid password.');\n        setIsPasswordModalOpen(true);\n        setLoading(false);\n      } else if (message === 'Game not found') {\n        navigate('/');\n      } else if (message === 'Game is full') {\n        setError(message);\n        setLoading(false);\n        setIsPasswordModalOpen(false);\n        setTimeout(() => navigate('/'), 3000);\n      } else {\n        setError(message);\n        setLoading(false);\n        setIsPasswordModalOpen(false);\n      }\n    };\n\n    socket.on('gameJoined', onGameJoined);\n    socket.on('error', onError);\n\n    return () => {\n      socket.off('gameJoined', onGameJoined);\n      socket.off('error', onError);\n    };\n  }, [socket, gameId, navigate]); \n\n  useEffect(() => {\n    // Use ref to prevent double emission due to StrictMode or rapid state changes\n    if (socket && gameId && !hasInitiatedJoin.current) {\n      hasInitiatedJoin.current = true; // Mark as initiated *immediately*\n      setLoading(true); \n      setError(null); \n      setIsPasswordModalOpen(false); \n      socket.emit('joinGame', { gameId });\n    } else {\n    }\n    // Dependencies remain minimal: only run when socket or gameId fundamentally change\n  }, [socket, gameId]); \n\n  const GameRoomContent = () => {\n    const { gameState } = useGameContext(); \n    const { socket } = useSocket();\n    \n    // Add beforeunload listener to warn users who are ready (in an active hand)\n    useEffect(() => {\n      const handleBeforeUnload = (e) => {\n        const currentUserId = socket?.auth?.userId;\n        const currentPlayer = currentUserId && gameState?.players ? gameState.players[currentUserId] : null;\n        const isPlayerReady = currentPlayer?.isReady || false;\n        \n        // Only show warning if player is ready (has ante'd and is in the hand)\n        if (isPlayerReady) {\n          e.preventDefault();\n          e.returnValue = 'You have money in the pot! Are you sure you want to leave?';\n          return e.returnValue;\n        }\n      };\n      \n      window.addEventListener('beforeunload', handleBeforeUnload);\n      \n      return () => {\n        window.removeEventListener('beforeunload', handleBeforeUnload);\n      };\n    }, [gameState, socket]);\n\n    return (\n      <>\n        <PasswordPromptModal \n          isOpen={isPasswordModalOpen}\n          onClose={handlePasswordCancel}\n          onSubmit={handlePasswordSubmit}\n          gameId={gameId} \n        />\n\n        {loading && <LoadingScreen message={`Joining game ${gameId}...`} />} \n        \n        {error && !loading && !isPasswordModalOpen && (\n          <div className=\"error-container\" style={{ padding: '20px', color: 'red', textAlign: 'center' }}>\n            <h2>An error occurred</h2>\n            <p>{error}</p>\n        {/* Suggest refreshing the page instead of navigating back */}\n        <button onClick={() => window.location.reload()}>Refresh Page</button>\n          </div>\n        )}\n        \n        {!loading && !error && gameState && \n          <GameScreen onReturnToLobby={handleReturnToLobby} />\n        }\n      </>\n    );\n  };\n\n  return (\n    <GameProvider gameId={gameId}>\n      <GameRoomContent /> \n    </GameProvider>\n  );\n};\n\nexport default GameRoom;\n"],"names":["createContext","useContext","useState","useRef","useCallback","useEffect","jsx","jsxs","currentPlayer","styles","Fragment","socket"],"mappings":"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"}