{"version":3,"file":"StoreModal-8NZwfmS5.js","sources":["../../src/components/common/CoinIcon.jsx","../../src/components/UserAvatar.jsx","../../src/components/common/CurrencyAmount.jsx","../../src/components/icons/GearIcon.jsx","../../src/components/ToggleSwitch.jsx","../../src/components/FileUpload.jsx","../../src/components/TitlesSelector.jsx","../../src/components/PreferencesModal.jsx","../../src/components/common/IconButton.jsx","../../src/components/common/PreferencesButton.jsx","../../src/components/icons/BarChartIcon.jsx","../../src/components/icons/DownloadIcon.jsx","../../src/components/common/TransactionDownloadButton.jsx","../../src/components/GameStats.jsx","../../src/components/GameSummaryModal.jsx","../../src/components/Leaderboard.jsx","../../src/components/PlayerStatsModal.jsx","../../src/components/common/PlayerStatsButton.jsx","../../src/components/icons/StoreIcon.jsx","../../src/components/StoreButton.jsx","../../src/components/icons/QuestionIcon.jsx","../../src/components/GameRulesModal.jsx","../../src/components/common/RulesButton.jsx","../../src/components/GamepadInput.jsx","../../src/services/StoreService.js","../../src/components/StoreModal.jsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport styles from './CoinIcon.module.css';\n\n/**\n * A reusable coin icon component to replace dollar signs\n * @param {Object} props - Component props\n * @param {string} [props.size='small'] - Size of the coin icon ('small', 'medium', 'large')\n * @param {string} [props.className] - Additional CSS class to apply\n */\nconst CoinIcon = ({ size = 'small', className = '' }) => {\n  const sizeMap = {\n    small: 15,\n    medium: 19,\n    large: 24\n  };\n  \n  const pixelSize = sizeMap[size] || sizeMap.small;\n  \n  // Generate unique IDs for gradients to prevent conflicts\n  const gradientId = useMemo(() => `goldGradient-${Math.random().toString(36).substr(2, 9)}`, []);\n  const shineId = useMemo(() => `goldShine-${Math.random().toString(36).substr(2, 9)}`, []);\n  \n  return (\n    <span className={`${styles.coinIcon} ${styles[size]} ${className}`}>\n      <svg \n        width={pixelSize} \n        height={pixelSize} \n        viewBox=\"0 0 24 24\" \n        fill=\"none\" \n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {/* Diamond shape with golden gradient */}\n        <defs>\n          <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#FFD700\" />\n            <stop offset=\"50%\" stopColor=\"#FFA500\" />\n            <stop offset=\"100%\" stopColor=\"#FF8C00\" />\n          </linearGradient>\n          <linearGradient id={shineId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#FFED4E\" />\n            <stop offset=\"100%\" stopColor=\"#FFD700\" />\n          </linearGradient>\n        </defs>\n        \n        {/* Main diamond shape */}\n        <path \n          d=\"M12 2L22 12L12 22L2 12L12 2Z\" \n          fill={`url(#${gradientId})`}\n          stroke=\"#D4AF37\"\n          strokeWidth=\"0.5\"\n        />\n        \n        {/* Inner shine effect */}\n        <path \n          d=\"M12 5L18 12L12 18L6 12L12 5Z\" \n          fill={`url(#${shineId})`}\n          opacity=\"0.6\"\n        />\n        \n        {/* Top highlight */}\n        <path \n          d=\"M12 2L16 6L12 8L8 6L12 2Z\" \n          fill=\"#FFFACD\"\n          opacity=\"0.7\"\n        />\n      </svg>\n    </span>\n  );\n};\n\nexport default CoinIcon;\n","import React, { useState, useEffect } from 'react';\nimport styles from './styles/UserAvatar.module.css';\nimport { useUserData } from '../contexts/UserDataContext';\n\n/**\n * UserAvatar component displays a user's profile image or their initials if no image is available.\n * Uses centralized UserData system for consistent user information across the app.\n * \n * @param {Object} props - Component props\n * @param {string} props.userId - User ID to fetch data for\n * @param {string} props.size - Size of the avatar ('small', 'medium', 'large')\n * @param {boolean} props.showName - Whether to display the username next to the avatar\n * @param {string} props.namePosition - Position of the username ('right', 'below')\n * @param {string} props.className - Additional CSS class for styling\n * @param {boolean} props.showTitle - Whether to show the title\n */\nconst UserAvatar = ({ \n  userId,\n  size = 'medium', \n  showName = true, \n  namePosition = 'right',\n  className = '',\n  showTitle = true\n}) => {\n  const [showPlayerCard, setShowPlayerCard] = useState(false);\n  const user = useUserData(userId);\n  \n  if (!userId) return null;\n  \n  // Show loading state while user data loads\n  if (!user) {\n    const sizeClass = styles[size] || styles.medium;\n    const containerClass = showName ? styles[`container${namePosition.charAt(0).toUpperCase() + namePosition.slice(1)}`] : '';\n    \n    return (\n      <div className={`${styles.userAvatarContainer} ${containerClass} ${className}`}>\n        <div className={`${styles.avatar} ${sizeClass} ${styles.loading}`}>\n          <div className={styles.avatarLoader}></div>\n        </div>\n        {showName && (\n          <div className={styles.userInfo}>\n            <div className={styles.skeletonUsername}></div>\n            {showTitle && (\n              <div className={styles.skeletonTitle}></div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n  \n  const { username, profileImg, title, xp, level } = user;\n  const initials = getInitials(username || 'Unknown');\n  const sizeClass = styles[size] || styles.medium;\n  const containerClass = showName ? styles[`container${namePosition.charAt(0).toUpperCase() + namePosition.slice(1)}`] : '';\n  \n  // Format the image URL to point to the server\n  const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';\n  \n  // Handle different URL formats\n  let formattedImageUrl = null;\n  if (profileImg) {\n    // If the URL already starts with http, use it as is\n    if (profileImg.startsWith('http')) {\n      formattedImageUrl = profileImg;\n    } \n    // If the URL contains /uploads/, replace it with /files/\n    else if (profileImg.includes('/uploads/')) {\n      // Extract just the filename from the path\n      const filename = profileImg.split('/').pop();\n      formattedImageUrl = `${API_URL}/files/images/${filename}`;\n    }\n    // Otherwise, just append the URL to the API_URL\n    else {\n      formattedImageUrl = `${API_URL}${profileImg}`;\n    }\n  }\n\n  \n  return (\n    <div className={`${styles.userAvatarContainer} ${containerClass} ${className}`}>\n      <div \n        className={`${styles.avatar} ${sizeClass}`}\n        onMouseEnter={() => setShowPlayerCard(true)}\n        onMouseLeave={() => setShowPlayerCard(false)}\n      >\n        <div className={styles.avatarImageContainer}>\n          {formattedImageUrl ? (\n            <img \n              src={formattedImageUrl} \n              alt={`${username}'s avatar`} \n              className={styles.avatarImage}\n              onError={(e) => {\n                console.error(`Failed to load profile image for ${username}:`, e);\n                e.target.style.display = 'none';\n                e.target.nextSibling.style.display = 'flex';\n              }}\n            />\n          ) : null}\n          <div \n            className={styles.initialsPlaceholder}\n            style={{ display: formattedImageUrl ? 'none' : 'flex' }}\n          >\n            {initials}\n          </div>\n        </div>\n\n        {/* Player Card */}\n        {showPlayerCard && (\n          <div className={styles.playerCard}>\n            <div className={styles.playerCardAvatar}>\n              {formattedImageUrl ? (\n                <img \n                  src={formattedImageUrl} \n                  alt={`${username}'s avatar`} \n                  className={styles.playerCardImage}\n                />\n              ) : (\n                <div className={styles.playerCardInitials}>\n                  {initials}\n                </div>\n              )}\n            </div>\n            <div className={styles.playerCardInfo}>\n              <div className={styles.playerCardUsername}>\n                {username || 'Unknown'}\n              </div>\n              {title && (\n                <div className={styles.playerCardTitle}>\n                  {title}\n                </div>\n              )}\n              {level !== undefined && xp !== undefined && (\n                <div className={styles.playerCardLevelXP}>\n                  Level {level} <span className={styles.separator}>â€¢</span> <span className={styles.xpValue}>{formatXP(xp)} XP</span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {showName && (\n        <div className={styles.userInfo}>\n          <div className={styles.username}>\n            {username || 'Unknown'}\n          </div>\n          {showTitle && title && (\n            <div className={styles.userTitle}>\n              {title}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Helper function to get initials from a name\nconst getInitials = (name) => {\n  if (!name) return '?';\n  \n  return name\n    .split(' ')\n    .map(part => part.charAt(0))\n    .join('')\n    .toUpperCase()\n    .substring(0, 2);\n};\n\n// Helper function to format XP with abbreviations\nconst formatXP = (xp) => {\n  if (xp >= 1000000) {\n    return (xp / 1000000).toFixed(1).replace(/\\.0$/, '') + 'M';\n  }\n  if (xp >= 1000) {\n    return (xp / 1000).toFixed(1).replace(/\\.0$/, '') + 'K';\n  }\n  return xp.toString();\n};\n\nexport default UserAvatar;\n","import React from 'react';\nimport styles from './CurrencyAmount.module.css';\nimport CoinIcon from './CoinIcon.jsx';\n\n/**\n * A reusable component that displays currency amounts with consistent styling\n * @param {Object} props - Component props\n * @param {number} props.amount - The amount to display\n * @param {string} props.size - The size of the coin icon (small, medium, large)\n * @param {string} props.background - Optional custom background style (e.g. 'dark', 'pill')\n * @param {string} props.customClass - Optional custom CSS class to apply\n */\nconst CurrencyAmount = ({ amount, size, background, customClass }) => {\n  // Determine which CSS classes to apply\n  const containerClasses = [\n    styles.currencyAmount,\n    background === 'dark' ? styles.darkBackground : '',\n    background === 'pill' ? styles.pillBackground : '',\n    customClass || ''\n  ].filter(Boolean).join(' ');\n  \n  return (\n    <span className={containerClasses}>\n      <CoinIcon size={size} />\n      <span>{amount.toLocaleString()}</span>\n    </span>\n  );\n};\n\nexport default CurrencyAmount;\n","import React from 'react';\n\nconst GearIcon = ({ className = 'h-6 w-6', ...props }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth={1.5}\n      stroke=\"currentColor\"\n      className={className}\n      {...props}\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.004.827c-.29.24-.438.613-.431.992a6.759 6.759 0 010 1.905c-.007.378.141.75.431.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.29-.24.438-.613.43-.992a6.932 6.932 0 010-1.905c.007-.378-.14-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281zM15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n      />\n    </svg>\n  );\n};\n\nexport default GearIcon;\n","import React from 'react';\nimport styles from './styles/ToggleSwitch.module.css';\n\nconst ToggleSwitch = ({ isChecked, onChange, label }) => {\n  return (\n    <div className={styles.toggleContainer}>\n      <label className={styles.toggleLabel}>\n        <input\n          type=\"checkbox\"\n          checked={isChecked}\n          onChange={onChange}\n          className={styles.toggleInput}\n          data-gamepad-focusable=\"true\"\n        />\n        <span className={styles.toggleSlider}></span>\n        {label && <span className={styles.toggleText}>{label}</span>}\n      </label>\n    </div>\n  );\n};\n\nexport default ToggleSwitch;\n","import React, { useState, useRef } from 'react';\nimport styles from './styles/FileUpload.module.css';\n\nconst FileUpload = ({ \n  onUpload, \n  currentFileUrl, \n  acceptedFileTypes, \n  label,\n  previewType = 'image' // 'image', 'audio', or 'none'\n}) => {\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const fileInputRef = useRef(null);\n  \n  const handleFileChange = async (e) => {\n    const file = e.target.files[0];\n    if (!file) {\n      console.error('[FileUpload] No file selected');\n      return;\n    }\n    \n    console.log('[FileUpload] File selected:', {\n      name: file.name,\n      type: file.type,\n      size: file.size\n    });\n    \n    setError(null);\n    setIsUploading(true);\n    \n    try {\n      console.log('[FileUpload] Calling onUpload function');\n      const success = await onUpload(file);\n      console.log('[FileUpload] Upload result:', success);\n      \n      if (!success) {\n        console.error('[FileUpload] Upload failed');\n        setError('Failed to upload file. Please try again.');\n      } else {\n        console.log('[FileUpload] Upload successful');\n      }\n    } catch (err) {\n      console.error('[FileUpload] Error uploading file:', err);\n      setError('An error occurred during upload.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  \n  const handleButtonClick = () => {\n    fileInputRef.current.click();\n  };\n  \n  const renderPreview = () => {\n    if (!currentFileUrl) return null;\n    \n    if (previewType === 'image') {\n      return (\n        <div className={styles.previewContainer}>\n          <img \n            src={currentFileUrl} \n            alt=\"Preview\" \n            className={styles.imagePreview} \n          />\n        </div>\n      );\n    } else if (previewType === 'audio') {\n      return (\n        <div className={styles.previewContainer}>\n          <audio \n            controls \n            src={currentFileUrl} \n            className={styles.audioPreview}\n          >\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n      );\n    }\n    \n    return null;\n  };\n  \n  return (\n    <div className={styles.fileUploadContainer}>\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileChange}\n        accept={acceptedFileTypes}\n        className={styles.fileInput}\n      />\n      \n      {currentFileUrl && renderPreview()}\n      \n      <button \n        type=\"button\" \n        onClick={handleButtonClick}\n        className={`${styles.uploadButton} ${currentFileUrl ? styles.changeButton : ''}`}\n        disabled={isUploading}\n        data-gamepad-focusable=\"true\"\n      >\n        {isUploading ? 'Uploading...' : currentFileUrl ? `Change ${label}` : `Upload ${label}`}\n      </button>\n      \n      {error && (\n        <div className={styles.errorMessage}>\n          {error}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;\n","import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { usePreferences } from '../contexts/PreferencesContext';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport { API_URL } from '../config';\n\nconst TitlesSelector = () => {\n  const { token } = useAuth();\n  const { preferences, updateSelectedTitle } = usePreferences();\n  const [titles, setTitles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadTitles();\n  }, []);\n\n  const loadTitles = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_URL}/me/titles`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load titles');\n      }\n\n      const userTitles = await response.json();\n      setTitles(userTitles);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTitleSelect = async (titleString) => {\n    try {\n      await updateSelectedTitle(titleString);\n    } catch (err) {\n      setError('Failed to update title');\n    }\n  };\n\n  if (loading) {\n    return <div className={baseModalStyles.loadingMessage}>Loading titles...</div>;\n  }\n\n  if (error) {\n    return <div className={baseModalStyles.errorMessage}>{error}</div>;\n  }\n\n  if (titles.length === 0) {\n    return (\n      <div style={{ textAlign: 'center', padding: '20px', color: '#a0b9d6' }}>\n        No titles unlocked yet. Play games to earn achievements!\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ \n      display: 'block',\n      width: '100%',\n      overflowX: 'auto',\n      overflowY: 'hidden',\n      whiteSpace: 'nowrap',\n      paddingBottom: '8px'\n    }}>\n        {/* No Title option */}\n        <div\n          onClick={() => handleTitleSelect('')}\n          style={{\n            display: 'inline-block',\n            width: '120px',\n            height: '36px',\n            padding: '8px',\n            margin: '0 8px 0 0',\n            borderRadius: '6px',\n            cursor: 'pointer',\n            textAlign: 'center',\n            backgroundColor: !preferences.selectedTitle ? 'rgba(100, 169, 255, 0.3)' : 'rgba(255, 255, 255, 0.08)',\n            border: !preferences.selectedTitle ? '2px solid #64a9ff' : '2px solid rgba(255, 255, 255, 0.15)',\n            verticalAlign: 'top',\n            whiteSpace: 'normal',\n            flexDirection: 'column',\n            justifyContent: 'center',\n          }}\n        >\n          <div style={{ fontWeight: 'bold', color: '#bcdcff', fontSize: '13px' }}>\n            No Title\n          </div>\n          <div style={{ color: '#a0b9d6', fontSize: '10px', marginTop: '2px' }}>\n            Display no title\n          </div>\n        </div>\n\n        {/* Unlocked titles */}\n        {titles.map(title => (\n          <div \n            key={title.title}\n            onClick={() => handleTitleSelect(title.title)}\n            style={{\n              display: 'inline-flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              width: '130px',\n              height: '36px',\n              padding: '8px',\n              margin: '0 8px 0 0',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              textAlign: 'center',\n              backgroundColor: preferences.selectedTitle === title.title ? 'rgba(100, 169, 255, 0.3)' : 'rgba(255, 255, 255, 0.08)',\n              border: preferences.selectedTitle === title.title ? '2px solid #64a9ff' : '2px solid rgba(255, 255, 255, 0.15)',\n              verticalAlign: 'top',\n              whiteSpace: 'normal'\n            }}\n          >\n            <div style={{ fontWeight: 'bold', color: '#bcdcff', fontSize: '13px' }}>\n              {title.title}\n            </div>\n            <div style={{ color: '#a0b9d6', fontSize: '10px', marginTop: '2px' }}>\n              {title.description}\n            </div>\n          </div>\n        ))}\n\n      {titles.length === 0 && (\n        <div style={{ \n          textAlign: 'center', \n          padding: '16px', \n          color: '#a0b9d6',\n          backgroundColor: 'rgba(255, 255, 255, 0.05)',\n          borderRadius: '6px',\n          border: '1px solid rgba(255, 255, 255, 0.1)',\n          marginTop: '8px',\n          whiteSpace: 'normal'\n        }}>\n          No titles unlocked yet. Play games to earn achievements!\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitlesSelector;","import React from 'react';\nimport { usePreferences } from '../contexts/PreferencesContext';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport BaseModal from './common/BaseModal';\nimport ToggleSwitch from './ToggleSwitch.jsx';\nimport FileUpload from './FileUpload.jsx';\nimport TitlesSelector from './TitlesSelector.jsx';\n\nconst PreferencesModal = ({ onClose }) => {\n  const { \n    preferences, \n    toggleAutoAnte,\n    toggleMute,\n    uploadTwoSecondPotGif, \n    uploadTwoSecondPotMp3, \n    uploadProfileImg,\n    loading \n  } = usePreferences();\n\n  if (loading) {\n    return (\n      <BaseModal title=\"Preferences\" onClose={onClose} style={{ maxWidth: 600, maxHeight: '25vh' }}>\n        <div className={baseModalStyles.loadingMessage}>Loading preferences...</div>\n      </BaseModal>\n    );\n  }\n\n  return (\n    <BaseModal title=\"Preferences\" onClose={onClose} style={{ maxWidth: 600, maxHeight: '80vh' }}>\n      <div className={baseModalStyles.settingsContainer}>\n        {/* Game Options Section */}\n        <div className={baseModalStyles.sectionHeader}>Game Options</div>\n\n        {/* Mute Setting */}\n        <div className={baseModalStyles.settingItem}>\n          <div className={baseModalStyles.settingDescription}>\n            <h4>Mute Sound</h4>\n            <p>Mute all game sound effects</p>\n          </div>\n          <ToggleSwitch \n            isChecked={preferences.muted}\n            onChange={toggleMute}\n          />\n        </div>\n\n        {/* Auto-Ante Setting */}\n        <div className={baseModalStyles.settingItem}>\n          <div className={baseModalStyles.settingDescription}>\n            <h4>Auto-Ante</h4>\n            <p>Automatically ante up when a new round begins</p>\n          </div>\n          <ToggleSwitch \n            isChecked={preferences.autoAnte}\n            onChange={toggleAutoAnte}\n          />\n        </div>\n\n        {/* Customization Options Section */}\n        <div className={baseModalStyles.sectionHeader}>Customization Options</div>\n\n        {/* Profile Image Setting */}\n        <div className={baseModalStyles.settingItem}>\n          <div className={baseModalStyles.settingDescription}>\n            <h4>Profile Image</h4>\n            <p>Upload a profile image to personalize your account</p>\n          </div>\n          <FileUpload\n            onUpload={uploadProfileImg}\n            currentFileUrl={preferences.profileImg}\n            acceptedFileTypes=\"image/jpeg,image/png,image/gif\"\n            label=\"Image\"\n            previewType=\"image\"\n          />\n        </div>\n\n        {/* Titles Selection */}\n        <div className={baseModalStyles.settingItem} style={{ flexDirection: 'column', alignItems: 'stretch' }}>\n          <div className={baseModalStyles.settingDescription} style={{ marginRight: 0, marginBottom: '12px' }}>\n            <h4>Title</h4>\n            <p>Choose a title to display with your name. Unlock more by playing games!</p>\n          </div>\n          <TitlesSelector />\n        </div>\n\n        {/* Two Second Pot GIF Setting */}\n        {/* <div style={{ position: 'relative' }}>\n          <div style={{\n            position: 'absolute',\n            top: '-12px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            background: '#FFD700',\n            color: '#333',\n            padding: '2px 10px',\n            borderRadius: '4px',\n            fontWeight: 'bold',\n            fontSize: '14px',\n            zIndex: 2\n          }}>\n            COMING SOON\n          </div>\n          <div className={baseModalStyles.settingItem} style={{ border: '2px dashed #FFD700', padding: '15px', borderRadius: '8px', marginTop: '12px' }}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Two Second POT GIF</h4>\n              <p>Upload a GIF to play when you slam the POT button</p>\n            </div>\n            <FileUpload\n              onUpload={uploadTwoSecondPotGif}\n              currentFileUrl={preferences.twoSecondPotGif}\n              acceptedFileTypes=\"image/gif\"\n              label=\"GIF\"\n              previewType=\"image\"\n            />\n          </div>\n        </div>\n\n        Two Second Pot Sound Setting\n        <div style={{ position: 'relative' }}>\n          <div style={{\n            position: 'absolute',\n            top: '-12px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            background: '#FFD700',\n            color: '#333',\n            padding: '2px 10px',\n            borderRadius: '4px',\n            fontWeight: 'bold',\n            fontSize: '14px',\n            zIndex: 2\n          }}>\n            COMING SOON\n          </div>\n          <div className={baseModalStyles.settingItem} style={{ border: '2px dashed #FFD700', padding: '15px', borderRadius: '8px', marginTop: '12px' }}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Two Second POT Sound</h4>\n              <p>Upload a sound to play when you slam the POT button</p>\n            </div>\n            <FileUpload\n              onUpload={uploadTwoSecondPotMp3}\n              currentFileUrl={preferences.twoSecondPotMp3}\n              acceptedFileTypes=\"audio/mpeg,audio/wav\"\n              label=\"Sound\"\n              previewType=\"audio\"\n            />\n          </div>\n        </div> */}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default PreferencesModal;\n","import React from 'react';\nimport styles from './styles/IconButton.module.css';\n\n/**\n * A reusable icon button component with standardized styling\n * \n * @param {Object} props Component props\n * @param {React.ReactNode} props.icon The icon to display\n * @param {string} props.title Tooltip text for the button\n * @param {function} props.onClick Click handler function\n * @param {string} props.variant Button variant ('default', 'danger', 'success')\n * @param {boolean} props.compact Whether to use compact styling\n * @param {string} props.className Additional class names\n */\nconst IconButton = ({ \n  icon, \n  title, \n  onClick, \n  variant = 'default',\n  compact = true,\n  className = '',\n  ...restProps\n}) => {\n  return (\n    <button\n      className={`${styles.iconButton} ${styles[variant]} ${className}`}\n      onClick={onClick}\n      title={title}\n      type=\"button\"\n      {...restProps}\n    >\n      {icon}\n    </button>\n  );\n};\n\nexport default IconButton;\n","import React, { useState, useEffect } from 'react';\nimport GearIcon from '../icons/GearIcon';\nimport PreferencesModal from '../PreferencesModal';\nimport IconButton from './IconButton';\n\nconst PreferencesButton = ({ onModalStateChange }) => {\n  const [isPreferencesOpen, setIsPreferencesOpen] = useState(false);\n\n  const openPreferences = () => {\n    setIsPreferencesOpen(true);\n  };\n\n  const closePreferences = () => {\n    setIsPreferencesOpen(false);\n  };\n\n  // Notify parent when modal state changes\n  useEffect(() => {\n    if (onModalStateChange) {\n      onModalStateChange(isPreferencesOpen);\n    }\n  }, [isPreferencesOpen, onModalStateChange]);\n\n  return (\n    <>\n      <IconButton\n        onClick={openPreferences}\n        icon={<GearIcon style={{ color: 'white', width: 20, height: 20 }} />}\n        aria-label=\"Open Preferences\"\n        variant=\"preferences\"\n        title=\"Preferences\"\n        data-gamepad-focusable=\"true\"\n      />\n      {/* Render the modal conditionally */}\n      {isPreferencesOpen && <PreferencesModal isOpen={isPreferencesOpen} onClose={closePreferences} />}\n    </>\n  );\n};\n\nexport default PreferencesButton;\n","import React from 'react';\n\n/**\n * Bar chart icon component for stats button\n * @param {Object} props - Component props\n * @param {string} props.color - Color of the icon (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst BarChartIcon = ({ color = 'currentColor', size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    >\n      <line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"10\"></line>\n      <line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"4\"></line>\n      <line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"14\"></line>\n      <line x1=\"3\" y1=\"20\" x2=\"21\" y2=\"20\"></line>\n    </svg>\n  );\n};\n\nexport default BarChartIcon;\n","import React from 'react';\n\n/**\n * Download CSV icon component for transaction log download button\n * @param {Object} props - Component props\n * @param {string} props.color - Color of the icon (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst DownloadIcon = ({ color = 'currentColor', size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    >\n      {/* Stylized CSV download icon with document and arrow */}\n      <path d=\"M14 3v4a1 1 0 0 0 1 1h4\" />\n      <path d=\"M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z\" />\n      <path d=\"M12 15 L12 18\" />\n      <path d=\"M9.5 16.5 L12 19 L14.5 16.5\" />\n      <path d=\"M8 10 L10 10\" />\n      <path d=\"M12 10 L14 10\" />\n      <path d=\"M16 10 L16 10\" />\n    </svg>\n  );\n};\n\nexport default DownloadIcon;\n","import React from 'react';\nimport IconButton from './IconButton';\nimport DownloadIcon from '../icons/DownloadIcon';\n// Optional import - only used if gameState not provided via props\nlet useGameContext;\ntry {\n  useGameContext = require('../../contexts/GameContext').useGameContext;\n} catch (error) {\n  // Context not available - will rely on props\n  useGameContext = () => ({ gameState: null });\n}\n\n/**\n * A specialized button component for downloading game transactions as CSV\n * \n * @param {Object} props Component props\n * @param {string} props.title Custom tooltip text (optional)\n * @param {Object} props.gameState Game state object (optional, will use context if not provided)\n */\nconst TransactionDownloadButton = ({ \n  title = \"Download Transaction Log as CSV\",\n  gameState: propGameState,\n  ...restProps \n}) => {\n  // Use provided gameState or try to get from context if available\n  let contextValue;\n  try {\n    contextValue = useGameContext ? useGameContext() : { gameState: null };\n  } catch (error) {\n    // Context not available\n    contextValue = { gameState: null };\n  }\n  \n  // Handle both the original gameState format and our new gameData format\n  const gameData = propGameState || contextValue?.gameState;\n  \n  // Extract data based on structure\n  // For historical games from the API, the structure might be slightly different\n  const gameTransactions = gameData?.gameTransactions || gameData?.gameData?.gameTransactions || [];\n  const gameId = gameData?._id || gameData?.id || 'unknown';\n\n  const downloadTransactionsCSV = () => {\n    // Ensure we have transactions as an array\n    const transactions = Array.isArray(gameTransactions) ? gameTransactions : [];\n    \n    if (transactions.length === 0) return;\n    \n    // Create CSV header\n    let csvContent = \"Player,Transaction Type,Amount,Round,Timestamp\\n\";\n    \n    // Make a copy of transactions for sorting\n    const sortedTransactions = [...transactions].map(tx => ({\n      ...tx,\n      // Ensure timestamp is a Date object for sorting\n      timestamp: tx.timestamp ? new Date(tx.timestamp) : new Date()\n    }));\n    \n    // Sort all transactions by timestamp in ascending order\n    sortedTransactions.sort((a, b) => a.timestamp - b.timestamp);\n    \n    // Add sorted transaction data to CSV\n    sortedTransactions.forEach(tx => {\n      // Format date for display\n      const timestamp = tx.timestamp ? new Date(tx.timestamp).toLocaleString() : 'N/A';\n      \n      // Escape any commas in the player name\n      const playerName = tx.playerName || tx.player || 'Unknown Player';\n      const escapedName = playerName.includes(',') ? `\"${playerName}\"` : playerName;\n      \n      // Use the transactionType field if available, otherwise derive it from reason\n      let transactionType = tx.transactionType || 'Transaction';\n      \n      // If we need to derive the transaction type from the reason\n      if (!tx.transactionType && tx.reason) {\n        // Extract the action part from the reason (e.g., \"Ante in round 1\" -> \"Ante\")\n        const reasonParts = tx.reason.split(' ');\n        transactionType = reasonParts[0]; // Take the first word as the type\n        \n        // Special case for \"Won bet\" which is two words\n        if (reasonParts[0] === 'Won') {\n          transactionType = 'Win';\n        }\n        // Special case for penalty reasons\n        else if (tx.reason.includes('penalty')) {\n          transactionType = 'Penalty';\n        }\n      }\n      \n      // Add the transaction row\n      csvContent += `${escapedName},${transactionType},${tx.amount},${tx.round || 'N/A'},${timestamp}\\n`;\n    });\n    \n    // Create and trigger download\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', `game-${gameId}-transactions.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <IconButton\n      icon={<DownloadIcon color=\"white\" size={20} />}\n      title={title}\n      onClick={downloadTransactionsCSV}\n      variant=\"default\"\n      {...restProps}\n    />\n  );\n};\n\nexport default TransactionDownloadButton;\n","import { useMemo } from 'react';\nimport styles from './styles/GameStats.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\n\nconst GameStats = ({ gameData }) => {\n  const transactions = gameData.gameTransactions;\n  const players = gameData.players;\n  \n  // Construct player names from both players and transactions\n  const playerNames = {};\n  \n  // First add current players\n  Object.entries(players).forEach(([playerId, player]) => {\n    playerNames[playerId] = player.name;\n  });\n  \n  // Then add players who left but have transactions\n  transactions.forEach(tx => {\n    if (tx.playerId && !playerNames[tx.playerId]) {\n      playerNames[tx.playerId] = tx.playerName || 'Unknown Player';\n    }\n  });\n\n  // Calculate game statistics from transaction data\n  const gameStats = useMemo(() => {\n    if (transactions.length === 0) {\n      return [];\n    }\n\n    // Helper function to format numbers with commas\n    const formatNumber = (num) => num.toLocaleString();\n\n    // Group transactions by player\n    const playerTransactions = {};\n    transactions.forEach(tx => {\n      if (!playerTransactions[tx.playerId]) {\n        playerTransactions[tx.playerId] = [];\n      }\n      playerTransactions[tx.playerId].push(tx);\n    });\n\n    // Get rounds from game data\n    const rounds = gameData.round || 1;\n    \n    // Calculate total decks - get from game data, not transactions\n    const decks = gameData.deckCount || 1;\n\n    // Calculate total ante amount\n    const totalAnteAmount = transactions\n      .filter(tx => tx.transactionType === 'Ante')\n      .reduce((sum, tx) => sum + Math.abs(tx.amount), 0);\n\n    // Calculate total bet amount\n    const totalBetAmount = transactions\n      .filter(tx => tx.transactionType === 'Bet')\n      .reduce((sum, tx) => sum + Math.abs(tx.amount), 0);\n\n    // Calculate biggest single bet\n    const bets = transactions.filter(tx => tx.transactionType === 'Bet');\n    const biggestBet = bets.length > 0 ?\n      bets.reduce((max, tx) => Math.abs(tx.amount) > Math.abs(max.amount) ? tx : max, bets[0]) :\n      null;\n\n    // Calculate biggest pot\n    const biggestPot = transactions.reduce((max, tx) => tx.potAmount > max ? tx.potAmount : max, 0);\n\n    // Calculate total penalties\n    const penalties = transactions.filter(tx => tx.transactionType === '2x' || tx.transactionType === '3x');\n    const totalPenaltyAmount = penalties.reduce((sum, tx) => sum + Math.abs(tx.amount), 0);\n\n    // Calculate player with most bets (aggressive player)\n    const playerBetCounts = {};\n    bets.forEach(tx => {\n      playerBetCounts[tx.playerId] = (playerBetCounts[tx.playerId] || 0) + 1;\n    });\n\n    let mostAggressivePlayerId = null;\n    let mostBets = 0;\n    \n    Object.entries(playerBetCounts).forEach(([playerId, count]) => {\n      if (count > mostBets) {\n        mostBets = count;\n        mostAggressivePlayerId = playerId;\n      }\n    });\n\n    // Calculate average bet size by player\n    const playerBetTotals = {};\n    bets.forEach(tx => {\n      if (!playerBetTotals[tx.playerId]) {\n        playerBetTotals[tx.playerId] = { total: 0, count: 0 };\n      }\n      playerBetTotals[tx.playerId].total += Math.abs(tx.amount);\n      playerBetTotals[tx.playerId].count += 1;\n    });\n\n    // Find player with highest average bet\n    let highestAvgBetPlayerId = null;\n    let highestAvgBet = 0;\n    \n    Object.entries(playerBetTotals).forEach(([playerId, data]) => {\n      const avg = data.total / data.count;\n      if (avg > highestAvgBet) {\n        highestAvgBet = avg;\n        highestAvgBetPlayerId = playerId;\n      }\n    });\n\n    // Calculate player wins count\n    const playerWins = {};\n    transactions\n      .filter(tx => tx.transactionType === 'Win')\n      .forEach(tx => {\n        playerWins[tx.playerId] = (playerWins[tx.playerId] || 0) + 1;\n      });\n\n    // Find most winning player\n    let mostWinningPlayerId = null;\n    let mostWins = 0;\n    \n    Object.entries(playerWins).forEach(([playerId, wins]) => {\n      if (wins > mostWins) {\n        mostWins = wins;\n        mostWinningPlayerId = playerId;\n      }\n    });\n\n    // Calculate penalty counts by player\n    const playerPenalties = {};\n    penalties.forEach(tx => {\n      playerPenalties[tx.playerId] = (playerPenalties[tx.playerId] || 0) + 1;\n    });\n\n    // Find player with most penalties\n    let mostPenaltiesPlayerId = null;\n    let mostPenalties = 0;\n    \n    Object.entries(playerPenalties).forEach(([playerId, count]) => {\n      if (count > mostPenalties) {\n        mostPenalties = count;\n        mostPenaltiesPlayerId = playerId;\n      }\n    });\n\n    // Use server-side calculated totals\n    const playerProfits = gameData.totals || {};\n\n    // Find biggest winner and loser\n    let biggestWinnerId = null;\n    let biggestWin = 0;\n    let biggestLoserId = null;\n    let biggestLoss = 0;\n    \n    Object.entries(playerProfits).forEach(([playerId, profit]) => {\n      if (profit > biggestWin) {\n        biggestWin = profit;\n        biggestWinnerId = playerId;\n      }\n      if (profit < biggestLoss) {\n        biggestLoss = profit;\n        biggestLoserId = playerId;\n      }\n    });\n\n    // Build stats array with all the interesting stats we've calculated\n    return [\n      {\n        key: 'totalDecks',\n        label: 'Total Decks',\n        value: decks,\n        type: 'number'\n      },\n      {\n        key: 'totalRounds',\n        label: 'Total Rounds',\n        value: rounds,\n        type: 'number'\n      },\n      {\n        key: 'totalBets',\n        label: 'Total Bets Placed',\n        value: bets.length,\n        type: 'number'\n      },\n      {\n        key: 'totalAnte',\n        label: 'Total Ante Amount',\n        value: totalAnteAmount,\n        type: 'currency'\n      },\n      {\n        key: 'totalBetAmount',\n        label: 'Total Bet Amount',\n        value: totalBetAmount,\n        type: 'currency'\n      },\n      {\n        key: 'biggestPot',\n        label: 'Biggest Pot',\n        value: biggestPot,\n        type: 'currency'\n      },\n      {\n        key: 'biggestBet',\n        label: 'Biggest Single Bet',\n        value: biggestBet ? Math.abs(biggestBet.amount) : 0,\n        type: 'currency',\n        suffix: biggestBet ? ` by ${biggestBet.playerName}` : ''\n      },\n      {\n        key: 'biggestWinner',\n        label: 'Biggest Winner',\n        value: biggestWinnerId ? playerNames[biggestWinnerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: biggestWinnerId ? ` (+${formatNumber(biggestWin)})` : ''\n      },\n      {\n        key: 'biggestLoser',\n        label: 'Biggest Loser',\n        value: biggestLoserId ? playerNames[biggestLoserId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: biggestLoserId ? ` (${formatNumber(biggestLoss)})` : ''\n      },\n      {\n        key: 'mostAggressive',\n        label: 'Most Aggressive Player',\n        value: mostAggressivePlayerId ? playerNames[mostAggressivePlayerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: mostAggressivePlayerId ? ` (${formatNumber(mostBets)} bets)` : ''\n      },\n      {\n        key: 'highestAvgBet',\n        label: 'Highest Average Bet',\n        value: highestAvgBetPlayerId ? playerNames[highestAvgBetPlayerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: highestAvgBetPlayerId ? ` (avg: ${formatNumber(Math.round(highestAvgBet))})` : ''\n      },\n      {\n        key: 'mostWinning',\n        label: 'Most Winning Player',\n        value: mostWinningPlayerId ? playerNames[mostWinningPlayerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: mostWinningPlayerId ? ` (${formatNumber(mostWins)} wins)` : ''\n      },\n      {\n        key: 'totalPenalties',\n        label: 'Total Penalties',\n        value: penalties.length,\n        type: 'number',\n        suffix: penalties.length > 0 ? ` (${formatNumber(totalPenaltyAmount)} coins)` : ''\n      },\n      {\n        key: 'unluckyPlayer',\n        label: 'Most Penalized Player',\n        value: mostPenaltiesPlayerId ? playerNames[mostPenaltiesPlayerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: mostPenaltiesPlayerId ? ` (${formatNumber(mostPenalties)} penalties)` : ''\n      }\n    ];\n  }, [transactions, playerNames]);\n\n  // Helper function to format stat values based on their type\n  const formatStatValue = (type, value) => {\n    // Handle different types of values appropriately\n    if (type === 'currency') {\n      // Return CurrencyAmount component for currency values\n      return <CurrencyAmount amount={value} size=\"small\" />;\n    }\n    \n    if (type === 'percentage') {\n      return `${(value * 100).toFixed(1)}%`;\n    }\n    \n    if (type === 'number') {\n      return value.toLocaleString();\n    }\n    \n    // Default return for text and other types\n    return value;\n  };\n\n  return (\n    <div className={styles.tabContent}>\n      {gameStats.length === 0 ? (\n        <p className={styles.noDataMessage}>No statistics available for this game.</p>\n      ) : (\n        <div className={styles.statsGrid}>\n          {gameStats.map((stat) => (\n            <div key={stat.key} className={styles.statItem}>\n              <div className={styles.statLabel}>{stat.label}</div>\n              <div className={styles.statValue}>\n                {formatStatValue(stat.type, stat.value)}\n                {stat.suffix && <span className={styles.statSuffix}>{stat.suffix}</span>}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameStats;\n","import React, { useMemo, useState } from 'react';\nimport BaseModal from './common/BaseModal';\nimport styles from './styles/GameSummaryModal.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport TransactionDownloadButton from './common/TransactionDownloadButton';\nimport GameStats from './GameStats';\n\n/**\n * Game Summary Modal component that displays running scores and settle-up calculations\n * Can be used with active game data from GameContext or with historical game data passed directly\n */\nconst GameSummaryModal = ({ onClose, gameData }) => {\n  if (!gameData) {\n    return (\n      <BaseModal\n        title=\"Game Summary\"\n        onClose={onClose}\n        style={{ maxWidth: 800 }}\n      >\n        <div className={styles.loadingMessage}>Loading game data...</div>\n      </BaseModal>\n    );\n  }\n\n  // Extract data from gameData with clean access now that structure is consistent\n  const gameTransactions = gameData.gameTransactions || [];\n  const players = gameData.players || {};\n  const gameId = gameData.id || 'unknown';\n  const showPayoutsTab = gameData.settings?.isPrivate || false;\n  \n  // Ensure gameTransactions is always an array\n  const transactions = Array.isArray(gameTransactions) ? gameTransactions : [];\n  \n  // Get player names (including those who left)\n  const playerNames = {};\n  \n  // First add current players\n  Object.entries(players).forEach(([playerId, player]) => {\n    playerNames[playerId] = player.name;\n  });\n  \n  // Then add players who left but have transactions\n  transactions.forEach(tx => {\n    if (tx.playerId && !playerNames[tx.playerId]) {\n      playerNames[tx.playerId] = tx.playerName || 'Unknown Player';\n    }\n  });\n\n  // Use server-side calculated totals (active games have totals, historical games have it at top level)\n  const playerTotals = gameData.totals || {};\n  \n  // Calculate settle-up payments\n  const settleUpPayments = useMemo(() => {\n    // For simple 2-player games, just have the loser pay the winner directly\n    if (Object.keys(playerTotals).length === 2) {\n      const players = Object.entries(playerTotals);\n      const [player1Id, player1Total] = players[0];\n      const [player2Id, player2Total] = players[1];\n      \n      // If totals sum to zero (or close to it), one player pays the other\n      if (Math.abs(player1Total + player2Total) < 0.1) {\n        if (player1Total > 0) {\n          // Player 2 pays Player 1\n          return [{\n            from: player2Id,\n            fromName: playerNames[player2Id],\n            to: player1Id,\n            toName: playerNames[player1Id],\n            amount: Math.abs(player1Total)\n          }];\n        } else if (player2Total > 0) {\n          // Player 1 pays Player 2\n          return [{\n            from: player1Id,\n            fromName: playerNames[player1Id],\n            to: player2Id,\n            toName: playerNames[player2Id],\n            amount: Math.abs(player2Total)\n          }];\n        }\n      }\n    }\n    \n    // For more complex cases with more players\n    const payments = [];\n    \n    // Split into winners and losers\n    const losers = Object.entries(playerTotals)\n      .filter(([_, amount]) => amount < 0)\n      .map(([playerId, amount]) => ({\n        playerId,\n        playerName: playerNames[playerId] || 'Unknown Player',\n        amount: Math.abs(amount) // Convert to positive amount for easier calculation\n      }));\n    \n    const winners = Object.entries(playerTotals)\n      .filter(([_, amount]) => amount > 0)\n      .map(([playerId, amount]) => ({\n        playerId,\n        playerName: playerNames[playerId] || 'Unknown Player',\n        amount\n      }));\n    \n    // Sort by amount (descending)\n    losers.sort((a, b) => b.amount - a.amount);\n    winners.sort((a, b) => b.amount - a.amount);\n    \n    // Process each winner, starting with the biggest winner\n    while (winners.length > 0 && losers.length > 0) {\n      const winner = winners[0];\n      const loser = losers[0];\n      \n      // Calculate payment amount\n      const paymentAmount = Math.min(winner.amount, loser.amount);\n      \n      if (paymentAmount > 0.01) { // Only process meaningful payments\n        // Add payment\n        payments.push({\n          from: loser.playerId,\n          fromName: loser.playerName,\n          to: winner.playerId,\n          toName: winner.playerName,\n          amount: paymentAmount\n        });\n        \n\n        \n        // Update balances\n        winner.amount -= paymentAmount;\n        loser.amount -= paymentAmount;\n        \n        // Remove settled players or re-sort if they still have balance\n        if (winner.amount < 0.01) {\n          winners.shift();\n        }\n        \n        if (loser.amount < 0.01) {\n          losers.shift();\n        }\n      } else {\n        // No meaningful payment possible\n        break;\n      }\n    }\n    \n    return payments;\n  }, [playerTotals, playerNames]);\n\n  // Track the active tab - start with 'totals' tab\n  const [activeTab, setActiveTab] = useState('totals');\n\n  return (\n    <BaseModal\n      title={`Game Summary (${gameId})`}\n      onClose={onClose}\n      headerButtons={<TransactionDownloadButton gameState={gameData} />}\n      style={{ maxWidth: 800 }}\n    >\n      <div className={styles.settingsContainer}>\n          {/* Tab Bar Navigation */}\n          <div className={styles.tabsContainer}>\n            <button \n              className={`${styles.tabButton} ${activeTab === 'totals' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('totals')}\n              data-gamepad-focusable=\"true\"\n            >\n              Totals\n            </button>\n            \n            <button \n              className={`${styles.tabButton} ${activeTab === 'stats' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('stats')}\n              data-gamepad-focusable=\"true\"\n            >\n              Stats\n            </button>\n            \n            {showPayoutsTab && (\n              <button \n                className={`${styles.tabButton} ${activeTab === 'payouts' ? styles.activeTab : ''}`}\n                onClick={() => setActiveTab('payouts')}\n                data-gamepad-focusable=\"true\"\n              >\n                Payouts\n              </button>\n            )}\n          </div>\n\n          {/* Totals Tab Content */}\n          {activeTab === 'totals' && (\n            <div className={styles.tabContent}>\n              {Object.keys(playerTotals).length === 0 ? (\n                <p className={styles.noDataMessage}>No transactions recorded yet.</p>\n              ) : (\n                <div className={styles.totalsTable}>\n                  {Object.entries(playerTotals).map(([playerId, total]) => (\n                    <div key={playerId} className={styles.totalRow}>\n                      <span className={styles.playerName}>{playerNames[playerId] || 'Unknown Player'}</span>\n                      <span className={`${styles.totalAmount} ${total >= 0 ? styles.positive : styles.negative}`}>\n                        <CurrencyAmount amount={total} size=\"small\" />\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n          \n          {/* Stats Tab Content */}\n          {activeTab === 'stats' && (\n            <GameStats gameData={gameData} />\n          )}\n\n          {/* Payouts Tab Content - Only shown for private games and when selected */}\n          {activeTab === 'payouts' && showPayoutsTab && (\n            <div className={styles.tabContent}>\n              {settleUpPayments.length === 0 ? (\n                <p className={styles.noDataMessage}>No payments needed or no transactions recorded yet.</p>\n              ) : (\n                <div className={styles.settleUpTable}>\n                  {settleUpPayments.map((payment, index) => (\n                    <div key={index} className={styles.paymentRow}>\n                      <span className={styles.paymentText}>\n                        <span className={styles.playerName}>{payment.fromName}</span> pays{' '}\n                        <span className={styles.playerName}>{payment.toName}</span>\n                      </span>\n                      <span className={styles.paymentAmount}>\n                        <CurrencyAmount amount={payment.amount} size=\"small\" />\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default GameSummaryModal;\n","import React, { useState, useEffect, useContext } from 'react';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport UserAvatar from './UserAvatar';\nimport styles from './styles/Leaderboard.module.css';\nimport { API_URL } from '../config';\nimport UserDataContext from '../contexts/UserDataContext';\n\nconst Leaderboard = () => {\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [duration, setDuration] = useState('all');\n  const userDataContext = useContext(UserDataContext);\n\n  useEffect(() => {\n    fetchLeaderboard();\n  }, [duration]);\n\n  const fetchLeaderboard = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(`${API_URL}/leaderboard?duration=${duration}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch leaderboard');\n      }\n      \n      const data = await response.json();\n      setLeaderboard(data.leaderboard || []);\n      \n      // Prefetch all user data for better performance\n      if (userDataContext && data.leaderboard) {\n        const userIds = data.leaderboard.map(player => player.userId);\n        userDataContext.prefetchUsers(userIds);\n      }\n    } catch (err) {\n      console.error('Error fetching leaderboard:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRankDisplay = (rank) => {\n    if (rank === 1) return 'ðŸ¥‡';\n    if (rank === 2) return 'ðŸ¥ˆ';\n    if (rank === 3) return 'ðŸ¥‰';\n    return `#${rank}`;\n  };\n\n  return (\n    <div className={styles.leaderboardContainer}>\n      <div className={styles.leaderboardHeader}>\n        <div className={styles.durationSelector}>\n          <button \n            className={`${styles.durationButton} ${duration === 'all' ? styles.active : ''}`}\n            onClick={() => setDuration('all')}\n            data-gamepad-focusable=\"true\"\n          >\n            All Time\n          </button>\n          <button \n            className={`${styles.durationButton} ${duration === '30days' ? styles.active : ''}`}\n            onClick={() => setDuration('30days')}\n            data-gamepad-focusable=\"true\"\n          >\n            Last 30 Days\n          </button>\n        </div>\n      </div>\n\n      {loading ? (\n        <div className={styles.loadingMessage}>\n          <div className={styles.loadingSpinner}></div>\n          Loading leaderboard...\n        </div>\n      ) : error ? (\n        <div className={styles.errorMessage}>Error: {error}</div>\n      ) : leaderboard.length === 0 ? (\n        <div className={styles.emptyMessage}>\n          No players found for this time period.\n        </div>\n      ) : (\n        <div \n          className={styles.leaderboardList}\n          data-gamepad-scrollable=\"true\"\n          tabIndex=\"0\"\n        >\n          {leaderboard.map((player) => (\n            <div key={player.userId} className={styles.leaderboardRow}>\n              <div className={styles.rankCell}>\n                <span className={styles.rank}>{getRankDisplay(player.rank)}</span>\n              </div>\n              \n              <div className={styles.playerCell}>\n                <UserAvatar \n                  userId={player.userId}\n                  size=\"small\"\n                  showName={true}\n                  showTitle={true}\n                  namePosition=\"right\"\n                />\n              </div>\n              \n              <div className={styles.statsCell}>\n                <CurrencyAmount amount={player.totalProfit} size=\"small\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Leaderboard;","import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport BaseModal from './common/BaseModal';\nimport GameSummaryModal from './GameSummaryModal';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport Leaderboard from './Leaderboard';\nimport styles from './styles/PlayerStatsModal.module.css';\nimport { API_URL } from '../config';\n\nconst PlayerStatsModal = ({ onClose }) => {\n  const { token } = useAuth();\n  const [activeTab, setActiveTab] = useState('leaderboard'); // 'leaderboard', 'stats', or 'history'\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [historyData, setHistoryData] = useState({ games: [], pagination: {} });\n  const [currentPage, setCurrentPage] = useState(0);\n  const [showGameSummary, setShowGameSummary] = useState(false);\n  const [selectedGameData, setSelectedGameData] = useState(null);\n  const [lifetimeStats, setLifetimeStats] = useState(null);\n  const [statsLoading, setStatsLoading] = useState(true);\n  const [statsError, setStatsError] = useState(null);\n  const pageSize = 5;\n\n  useEffect(() => {\n    const fetchGameHistory = async () => {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        const response = await fetch(`${API_URL}/games/history?pageSize=${pageSize}&pageNumber=${currentPage}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch game history');\n        }\n        \n        const data = await response.json();\n        setHistoryData(data);\n      } catch (err) {\n        console.error('Error fetching game history:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchGameHistory();\n  }, [token, currentPage]);\n  \n  // Fetch lifetime stats from the dedicated stats endpoint\n  useEffect(() => {\n    const fetchLifetimeStats = async () => {\n      setStatsLoading(true);\n      setStatsError(null);\n      \n      try {\n        const response = await fetch(`${API_URL}/me/stats`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch lifetime stats');\n        }\n        \n        const data = await response.json();\n        setLifetimeStats(data.stats);\n      } catch (err) {\n        console.error('Error fetching lifetime stats:', err);\n        setStatsError(err.message);\n      } finally {\n        setStatsLoading(false);\n      }\n    };\n    \n    fetchLifetimeStats();\n  }, [token]);\n\n  const handlePreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleNextPage = () => {\n    if (historyData.pagination && \n        historyData.games.length === pageSize) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Unknown';\n    \n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n  \n  // Format stat label from camelCase to Title Case with spaces\n  const formatStatLabel = (key) => {\n    // Insert space before capital letters and uppercase the first letter\n    const formatted = key\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/^./, (str) => str.toUpperCase());\n    \n    return formatted;\n  };\n  \n  // Format stat value based on the explicit type or the value itself\n  const formatStatValue = (type, value) => {\n    // Handle different types of values appropriately\n    if (typeof value === 'number') {\n      // Format based on explicit type if provided\n      if (type === 'currency') {\n        // Return CurrencyAmount component for currency values\n        return <CurrencyAmount amount={value.toFixed(2)} size=\"small\" />;\n      }\n      \n      if (type === 'percentage') {\n        return `${(value * 100).toFixed(1)}%`;\n      }\n      \n      // Just return the number for counts\n      return value.toLocaleString();\n    }\n    \n    // For boolean values\n    if (typeof value === 'boolean') {\n      return value ? 'Yes' : 'No';\n    }\n    \n    // For dates - only format as date if explicitly typed as 'date' or is an actual Date object\n    if (type === 'date' || value instanceof Date) {\n      return formatDate(value);\n    }\n    \n    // Handle numeric types explicitly\n    if (type === 'number') {\n      return Number(value).toLocaleString();\n    }\n    \n    // Default toString for anything else\n    return String(value);\n  };\n  \n  // Get the round count from the game data\n  const getRoundCount = (game) => {\n    return game.roundCount || 0;\n  };\n\n  const handleGameClick = (gameId) => {\n    // Find the selected game in our existing data\n    const selectedGame = historyData.games.find(game => game.id === gameId);\n    if (selectedGame) {\n      // Historical games now have the same structure as active games\n      setSelectedGameData(selectedGame);\n      setShowGameSummary(true);\n    }\n  };\n\n  return (\n    <>\n      <BaseModal title=\"Player Stats\" onClose={onClose} style={{ maxWidth: 800, height: '90ÃŸvh' }}>\n        <div className={baseModalStyles.settingsContainer}>\n          {/* Tab Bar Navigation */}\n          <div className={styles.tabsContainer}>\n            <button \n              className={`${styles.tabButton} ${activeTab === 'leaderboard' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('leaderboard')}\n              data-gamepad-focusable=\"true\"\n            >\n              Leaderboard\n            </button>\n            <button \n              className={`${styles.tabButton} ${activeTab === 'stats' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('stats')}\n              data-gamepad-focusable=\"true\"\n            >\n              Lifetime Stats\n            </button>\n            <button \n              className={`${styles.tabButton} ${activeTab === 'history' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('history')}\n              data-gamepad-focusable=\"true\"\n            >\n              Game History\n            </button>\n          </div>\n\n          {/* Leaderboard Tab Content */}\n          {activeTab === 'leaderboard' && (\n            <div className={styles.tabContent}>\n              <Leaderboard />\n            </div>\n          )}\n\n          {/* Lifetime Stats Tab Content */}\n          {activeTab === 'stats' && (\n            <div className={styles.tabContent}>\n              {statsLoading ? (\n                <div className={styles.loadingMessage}>\n                  <div className={styles.loadingSpinner}></div>\n                  Loading your lifetime stats...\n                </div>\n              ) : statsError ? (\n                <div className={styles.errorMessage}>Error: {statsError}</div>\n              ) : !lifetimeStats || lifetimeStats.length === 0 ? (\n                <div className={styles.statsPlaceholder}>\n                  <p>No lifetime statistics available.</p>\n                </div>\n              ) : (\n                <div \n                  className={styles.statsGrid}\n                  data-gamepad-scrollable=\"true\"\n                  tabIndex=\"0\"\n                >\n                  {lifetimeStats.map((stat, index) => (\n                    <div key={stat.key || `stat-${index}`} className={styles.statItem}>\n                      <div className={styles.statLabel}>{stat.label}</div>\n                      <div className={styles.statValue}>\n                        {formatStatValue(stat.type, stat.value)}\n                        {stat.suffix && <span className={styles.statSuffix}>{stat.suffix}</span>}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Game History Tab Content */}\n          {activeTab === 'history' && (\n            <div className={styles.tabContent}>\n              {loading ? (\n                <div className={styles.loadingMessage}>\n                  <div className={styles.loadingSpinner}></div>\n                  Loading your game history...\n                </div>\n              ) : error ? (\n                <div className={styles.errorMessage}>Error: {error}</div>\n              ) : historyData.games.length === 0 ? (\n                <div className={styles.statsPlaceholder}>\n                  <p>No games found in your history.</p>\n                </div>\n              ) : (\n                <>\n                  <div \n                    className={styles.historyTable}\n                    data-gamepad-scrollable=\"true\"\n                    tabIndex=\"0\"\n                  >\n                    <div className={styles.tableHeader}>\n                      <div className={styles.gameNameHeader}>Game</div>\n                      <div className={styles.playerCountHeader}>Players</div>\n                      <div className={styles.roundsHeader}>Rounds</div>\n                      <div className={styles.endDateHeader}>Ended</div>\n                    </div>\n                    \n                    {historyData.games.map((game) => (\n                      <div key={game.id} className={styles.historyRow}>\n                        <div className={styles.gameNameCell}>\n                          <span \n                            className={styles.gameNameLink} \n                            onClick={() => handleGameClick(game.id)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            data-gamepad-focusable=\"true\"\n                          >\n                            #{game.id}\n                          </span>\n                        </div>\n                        <div className={styles.playerCountCell}>{game.totalPlayerCount}</div>\n                        <div className={styles.roundsCell}>{getRoundCount(game)}</div>\n                        <div className={styles.endDateCell}>{formatDate(game.endedAt)}</div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className={styles.pageInfo}>\n                    <button \n                      onClick={handlePreviousPage} \n                      disabled={currentPage === 0}\n                      className={styles.pageButton}\n                      aria-label=\"Previous page\"\n                      data-gamepad-focusable=\"true\"\n                    >\n                      &larr;\n                    </button>\n                    \n                    Page {currentPage + 1}\n                    {historyData.pagination && historyData.pagination.total ? \n                      ` of ${Math.ceil(historyData.pagination.total / pageSize)}` : ''}\n                    \n                    <button \n                      onClick={handleNextPage} \n                      disabled={!historyData.pagination || historyData.games.length < pageSize}\n                      className={styles.pageButton}\n                      aria-label=\"Next page\"\n                      data-gamepad-focusable=\"true\"\n                    >\n                      &rarr;\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </BaseModal>\n      \n      {showGameSummary && selectedGameData && (\n        <GameSummaryModal \n          gameData={selectedGameData}\n          onClose={() => {\n            setShowGameSummary(false);\n            setSelectedGameData(null);\n          }} \n        />\n      )}\n      \n\n    </>\n  );\n};\n\n\n\nexport default PlayerStatsModal;\n","import React, { useState, useEffect } from 'react';\nimport BarChartIcon from '../icons/BarChartIcon';\nimport PlayerStatsModal from '../PlayerStatsModal';\nimport IconButton from './IconButton';\n\nconst PlayerStatsButton = ({ onModalStateChange, ...props }) => {\n  const [isStatsOpen, setIsStatsOpen] = useState(false);\n\n  const openStats = () => {\n    setIsStatsOpen(true);\n  };\n\n  const closeStats = () => {\n    setIsStatsOpen(false);\n  };\n\n  // Notify parent when modal state changes\n  useEffect(() => {\n    if (onModalStateChange) {\n      onModalStateChange(isStatsOpen);\n    }\n  }, [isStatsOpen, onModalStateChange]);\n\n  return (\n    <>\n      <IconButton\n        onClick={openStats}\n        icon={<BarChartIcon color=\"white\" size={20} />}\n        aria-label=\"Open Player Stats\"\n        variant=\"stats\"\n        title=\"Player Stats\"\n        {...props}\n      />\n      {/* Render the modal conditionally */}\n      {isStatsOpen && <PlayerStatsModal isOpen={isStatsOpen} onClose={closeStats} />}\n    </>\n  );\n};\n\nexport default PlayerStatsButton;\n","import React from 'react';\n\nconst StoreIcon = ({ className = 'h-6 w-6', ...props }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth={1.8}\n      stroke=\"currentColor\"\n      className={className}\n      {...props}\n    >\n      {/* Shopping bag */}\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M15.75 10.5V6a3.75 3.75 0 10-7.5 0v4.5m-2.25 9h12a1.5 1.5 0 001.5-1.5v-6a1.5 1.5 0 00-1.5-1.5h-12a1.5 1.5 0 00-1.5 1.5v6a1.5 1.5 0 001.5 1.5z\"\n      />\n    </svg>\n  );\n};\n\nexport default StoreIcon;","import React from 'react';\nimport StoreIcon from './icons/StoreIcon';\nimport IconButton from './common/IconButton';\n\nconst StoreButton = ({ onClick, ...props }) => {\n  return (\n    <IconButton\n      onClick={onClick}\n      icon={<StoreIcon style={{ color: 'white', width: 20, height: 20 }} />}\n      aria-label=\"Store\"\n      variant=\"store\"\n      title=\"Store\"\n      {...props}\n    />\n  );\n};\n\nexport default StoreButton;","import React from 'react';\n\n/**\n * Question mark icon component for rules button\n * @param {Object} props - Component props\n * @param {string} props.color - Color of the icon (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst QuestionIcon = ({ color = 'currentColor', size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    >\n      {/* Material Design style question mark icon */}\n      <circle cx=\"12\" cy=\"12\" r=\"10\" />\n      <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\n      <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"17.01\" />\n    </svg>\n  );\n};\n\nexport default QuestionIcon;\n","import React from 'react';\nimport BaseModal from './common/BaseModal';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport { ICONS } from '../constants';\n\n/**\n * Game Rules Modal that displays the rules of the game\n * @param {Object} props - Component props\n * @param {function} props.onClose - Function to call when the modal is closed\n */\nconst GameRulesModal = ({ onClose }) => {\n  return (\n    <BaseModal\n      title=\"Game Rules\"\n      onClose={onClose}\n      style={{ maxWidth: 600 }}\n    >\n      <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>Objective</div>\n          <div className={baseModalStyles.settingDescription}>\n            The goal is to bet on whether the third card will have a value that falls \"in between\" the first two cards.\n          </div>\n        </div>\n        <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>Card Values</div>\n          <div className={baseModalStyles.settingDescription}>\n            Cards are valued numerically: 2-10 as face value, Jack = 11, Queen = 12, King = 13, and Ace = 1 or 14 (player's choice).\n          </div>\n        </div>\n        <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>Game Flow</div>\n          <div className={baseModalStyles.settingDescription}>\n            <ol style={{ paddingLeft: 20, margin: 0 }}>\n              <li>Each player antes up to join the round.</li>\n              <li>The player to the right of the dealer goes first.</li>\n              <li>Two cards are dealt face up.</li>\n              <li>Player decides whether to bet or pass.</li>\n              <li>If a bet is placed, the third card is revealed.</li>\n              <li>Bets are settled.</li>\n              <li>Next player goes.</li>\n              <li>If the pot is empty, players ante up again to start a new round.</li>\n            </ol>\n          </div>\n        </div>\n        <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>Betting</div>\n          <div className={baseModalStyles.settingDescription}>\n            If you think the third card will fall between the first two cards, you can bet up to the pot amount.<br/>\n            If you win, you receive the amount of your bet from the pot.<br/>\n            If you lose, your bet is added to the pot.\n          </div>\n        </div>\n        <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>POT Button</div>\n          <div className={baseModalStyles.settingDescription}>\n            The POT button allows you to bet the entire pot amount at once for maximum winnings.\n          </div>\n        </div>\n        <div style={{ marginBottom: 6 }}>\n          <div className={baseModalStyles.sectionHeader}>Special Rules</div>\n          <div className={baseModalStyles.settingDescription}>\n            <ul style={{ paddingLeft: 20, margin: 0 }}>\n              <li><strong>Ace Choice:</strong> If the first card is an Ace, you can choose to play it as low (1) or high (14).</li>\n              <li><strong>Second Chance:</strong> If the first two cards are the same, you can chose to ante again to see another hand.</li>\n            </ul>\n          </div>\n        </div>\n    </BaseModal>\n  );\n};\n\nexport default GameRulesModal;","import React, { useState, useEffect } from 'react';\nimport IconButton from './IconButton';\nimport QuestionIcon from '../icons/QuestionIcon';\nimport GameRulesModal from '../GameRulesModal';\n\n/**\n * A standardized rules button component that opens the game rules modal\n * \n * @param {Object} props Component props\n * @param {string} props.title Custom tooltip text (optional)\n * @param {function} props.onModalStateChange Callback when modal state changes\n */\nconst RulesButton = ({ \n  title = \"View Game Rules\",\n  onModalStateChange,\n  ...restProps \n}) => {\n  const [showRules, setShowRules] = useState(false);\n\n  const openRules = () => {\n    setShowRules(true);\n  };\n\n  const closeRules = () => {\n    setShowRules(false);\n  };\n\n  // Notify parent when modal state changes\n  useEffect(() => {\n    if (onModalStateChange) {\n      onModalStateChange(showRules);\n    }\n  }, [showRules, onModalStateChange]);\n\n  return (\n    <>\n      <IconButton\n        icon={<QuestionIcon color=\"white\" size={20} />}\n        title={title}\n        onClick={openRules}\n        variant=\"default\"\n        {...restProps}\n      />\n      \n      {showRules && <GameRulesModal onClose={closeRules} />}\n    </>\n  );\n};\n\nexport default RulesButton;\n","import React, { useRef, useEffect } from 'react';\nimport { useVirtualKeyboardContext } from '../contexts/VirtualKeyboardContext';\n\n/**\n * Enhanced input component that automatically shows virtual keyboard for gamepad users\n * Drop-in replacement for regular input elements\n */\nconst GamepadInput = ({ \n  type = 'text',\n  title = '',\n  ...props \n}) => {\n  const inputRef = useRef(null);\n  const { enhanceInput } = useVirtualKeyboardContext();\n  \n  useEffect(() => {\n    if (inputRef.current) {\n      const cleanup = enhanceInput(inputRef.current, type, title);\n      return cleanup;\n    }\n  }, [enhanceInput, type, title]);\n  \n  return (\n    <input\n      ref={inputRef}\n      type={type}\n      data-gamepad-focusable=\"true\"\n      {...props}\n    />\n  );\n};\n\nexport default GamepadInput;","/**\n * Store Service for handling coin purchases and product offerings\n * Manages API calls for purchasing game currency and retrieving available products\n */\nclass StoreService {\n  constructor() {\n    // Get API URL from environment or use localhost as fallback\n    this.API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';\n    this.baseURL = `${this.API_URL}/purchases`;\n  }\n\n  /**\n   * Get the authorization header for API requests\n   * @returns {Object} Headers object with authorization\n   */\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    };\n  }\n\n  /**\n   * Get product offerings by type\n   * @param {string} offeringType - Type of offering (e.g., 'coin')\n   * @returns {Promise<Array>} Array of product offerings\n   */\n  async getOfferingsByType(offeringType) {\n    try {\n      const url = `${this.baseURL}/offerings?offeringType=${encodeURIComponent(offeringType)}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: this.getAuthHeaders(),\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch offerings`);\n      }\n\n      const data = await response.json();\n      return data.offerings || [];\n    } catch (error) {\n      console.error('[PURCHASE_SERVICE] Error fetching offerings:', error);\n      throw new Error(`Failed to fetch product offerings: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get all available product offerings\n   * @returns {Promise<Array>} Array of all product offerings\n   */\n  async getAllOfferings() {\n    try {\n      const response = await fetch(`${this.baseURL}/offerings`, {\n        method: 'GET',\n        headers: this.getAuthHeaders(),\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch offerings`);\n      }\n\n      const data = await response.json();\n      return data.offerings || [];\n    } catch (error) {\n      console.error('[PURCHASE_SERVICE] Error fetching all offerings:', error);\n      throw new Error(`Failed to fetch product offerings: ${error.message}`);\n    }\n  }\n\n  /**\n   * Process a purchase\n   * @param {string} productId - ID of the product to purchase\n   * @returns {Promise<Object>} Purchase result\n   */\n  async processPurchase(productId) {\n    try {\n      if (!productId) {\n        throw new Error('Product ID is required');\n      }\n\n      const response = await fetch(`${this.baseURL}/process`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        credentials: 'include',\n        body: JSON.stringify({ productId })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: Purchase failed`);\n      }\n\n      const result = await response.json();\n      \n      // Log successful purchase for debugging\n      console.log('[PURCHASE_SERVICE] Purchase completed:', {\n        productId,\n        coinsAdded: result.coinsAdded,\n        newBalance: result.newBalance\n      });\n\n      return result;\n    } catch (error) {\n      console.error('[PURCHASE_SERVICE] Error processing purchase:', error);\n      throw new Error(`Purchase failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get coin offerings specifically\n   * @returns {Promise<Array>} Array of coin product offerings\n   */\n  async getCoinOfferings() {\n    return this.getOfferingsByType('coin');\n  }\n}\n\n// Create a singleton instance\nconst storeService = new StoreService();\n\nexport default storeService;","import React, { useState, useEffect } from 'react';\nimport BaseModal from './common/BaseModal';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport styles from './styles/StoreModal.module.css';\nimport storeService from '../services/StoreService';\n\nconst StoreModal = ({ onClose }) => {\n  const [activeTab, setActiveTab] = useState('coins');\n  const [coinOfferings, setCoinOfferings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [purchasing, setPurchasing] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadCoinOfferings();\n  }, []);\n\n  const loadCoinOfferings = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const offerings = await storeService.getCoinOfferings();\n      setCoinOfferings(offerings);\n    } catch (err) {\n      console.error('Failed to load coin offerings:', err);\n      setError('Failed to load products. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePurchase = async (productId) => {\n    try {\n      setPurchasing(productId);\n      setError(null);\n      \n      const result = await storeService.processPurchase(productId);\n      \n      // Show success message or handle success\n      console.log('Purchase successful:', result);\n      \n      // Close modal on successful purchase\n      onClose();\n      \n    } catch (err) {\n      console.error('Purchase failed:', err);\n      setError(err.message || 'Purchase failed. Please try again.');\n    } finally {\n      setPurchasing(null);\n    }\n  };\n\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(price);\n  };\n\n  const formatCoins = (amount) => {\n    return new Intl.NumberFormat('en-US').format(amount);\n  };\n\n  if (loading) {\n    return (\n      <BaseModal title=\"Store\" onClose={onClose} style={{ maxWidth: 800, maxHeight: '80vh' }}>\n        <div style={{ textAlign: 'center', padding: '2rem', color: '#a0b9d6' }}>Loading products...</div>\n      </BaseModal>\n    );\n  }\n\n  return (\n    <BaseModal title=\"Store\" onClose={onClose} style={{ maxWidth: 800, maxHeight: '80vh' }}>\n      {/* Tab Navigation */}\n      <div className={styles.tabsContainer}>\n        <button\n          className={`${styles.tabButton} ${activeTab === 'coins' ? styles.activeTab : ''}`}\n          onClick={() => setActiveTab('coins')}\n          data-gamepad-focusable=\"true\"\n        >\n          Coin Packs\n        </button>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div style={{\n          marginBottom: '1rem',\n          padding: '0.75rem',\n          backgroundColor: 'rgba(231, 76, 60, 0.1)',\n          border: '1px solid #e74c3c',\n          borderRadius: '8px',\n          color: '#ffb3b3'\n        }}>\n          {error}\n        </div>\n      )}\n\n      {/* Coin Packs Tab Content */}\n      {activeTab === 'coins' && (\n        <div>\n          <div className={baseModalStyles.sectionHeader}>Available Coin Packs</div>\n          \n          {coinOfferings.length === 0 ? (\n            <div style={{ textAlign: 'center', padding: '2rem', color: '#a0b9d6' }}>\n              No coin packs available at the moment.\n            </div>\n          ) : (\n            <div style={{ \n              display: 'grid', \n              gap: '1rem', \n              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))' \n            }}>\n              {coinOfferings.map((offering) => (\n                <div\n                  key={offering.id}\n                  className={baseModalStyles.settingItem}\n                  style={{\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    textAlign: 'center',\n                    padding: '1.5rem',\n                    background: 'rgba(255, 255, 255, 0.08)',\n                    borderRadius: '12px',\n                    minHeight: '280px'\n                  }}\n                >\n                  {/* Product Image */}\n                  <div style={{ \n                    display: 'flex', \n                    justifyContent: 'center', \n                    alignItems: 'center',\n                    height: '80px',\n                    marginBottom: '1rem' \n                  }}>\n                    {offering.imageUrl && (\n                      <img\n                        src={offering.imageUrl}\n                        alt={offering.name}\n                        style={{\n                          width: '64px',\n                          height: '64px',\n                          objectFit: 'contain'\n                        }}\n                        onError={(e) => {\n                          e.target.style.display = 'none';\n                        }}\n                      />\n                    )}\n                  </div>\n                  \n                  {/* Product Info */}\n                  <div style={{ \n                    flex: '1',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    textAlign: 'center',\n                    marginBottom: '1rem' \n                  }}>\n                    <h3 style={{\n                      fontSize: '1.25rem',\n                      fontWeight: 'bold',\n                      color: '#FFD700',\n                      margin: '0 0 0.5rem 0',\n                      textAlign: 'center'\n                    }}>\n                      {formatCoins(offering.coinAmount)} Coins\n                    </h3>\n                    <p style={{\n                      color: '#a0b9d6',\n                      fontSize: '0.875rem',\n                      margin: '0 0 0.75rem 0',\n                      textAlign: 'center',\n                      lineHeight: '1.4'\n                    }}>\n                      {offering.description}\n                    </p>\n                    <div style={{\n                      fontSize: '1.5rem',\n                      fontWeight: 'bold',\n                      color: '#bcdcff',\n                      textAlign: 'center'\n                    }}>\n                      {formatPrice(offering.priceUSD)}\n                    </div>\n                  </div>\n                  \n                  {/* Purchase Button */}\n                  <button\n                    onClick={() => handlePurchase(offering.id)}\n                    disabled={purchasing === offering.id}\n                    className={baseModalStyles.primaryButton}\n                    style={{\n                      width: '100%',\n                      opacity: purchasing === offering.id ? 0.6 : 1,\n                      cursor: purchasing === offering.id ? 'not-allowed' : 'pointer'\n                    }}\n                    data-gamepad-focusable=\"true\"\n                  >\n                    {purchasing === offering.id ? (\n                      <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                        <div className={styles.loadingSpinner} style={{\n                          marginRight: '0.5rem'\n                        }}></div>\n                        Processing...\n                      </span>\n                    ) : (\n                      'Purchase'\n                    )}\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </BaseModal>\n  );\n};\n\nexport default StoreModal;"],"names":["CoinIcon","size","className","sizeMap","small","medium","large","pixelSize","gradientId","useMemo","Math","random","toString","substr","shineId","jsx","styles","coinIcon","children","jsxRuntimeExports","jsxs","width","height","viewBox","fill","xmlns","id","x1","y1","x2","y2","offset","stopColor","d","stroke","strokeWidth","opacity","UserAvatar","userId","showName","namePosition","showTitle","showPlayerCard","setShowPlayerCard","useState","user","useUserData","sizeClass","containerClass","charAt","toUpperCase","slice","userAvatarContainer","avatar","loading","avatarLoader","userInfo","skeletonUsername","skeletonTitle","username","profileImg","title","xp","level","initials","getInitials","API_URL","formattedImageUrl","startsWith","includes","split","pop","onMouseEnter","onMouseLeave","avatarImageContainer","src","alt","avatarImage","onError","e","console","error","target","style","display","nextSibling","initialsPlaceholder","playerCard","playerCardAvatar","playerCardImage","playerCardInitials","playerCardInfo","playerCardUsername","playerCardTitle","playerCardLevelXP","separator","xpValue","formatXP","userTitle","name","map","part","join","substring","toFixed","replace","CurrencyAmount","amount","background","customClass","containerClasses","currencyAmount","darkBackground","pillBackground","filter","Boolean","toLocaleString","GearIcon","props","strokeLinecap","strokeLinejoin","ToggleSwitch","isChecked","onChange","label","type","checked","FileUpload","onUpload","currentFileUrl","acceptedFileTypes","previewType","isUploading","setIsUploading","setError","fileInputRef","useRef","ref","async","file","files","log","success","err","accept","controls","onClick","current","click","disabled","TitlesSelector","token","useAuth","preferences","updateSelectedTitle","usePreferences","titles","setTitles","setLoading","useEffect","loadTitles","response","fetch","headers","Authorization","ok","Error","userTitles","json","message","handleTitleSelect","titleString","baseModalStyles","loadingMessage","errorMessage","length","textAlign","padding","color","overflowX","overflowY","whiteSpace","paddingBottom","margin","borderRadius","cursor","backgroundColor","selectedTitle","border","verticalAlign","flexDirection","justifyContent","fontWeight","fontSize","marginTop","description","PreferencesModal","onClose","toggleAutoAnte","toggleMute","uploadTwoSecondPotGif","uploadTwoSecondPotMp3","uploadProfileImg","BaseModal","maxWidth","maxHeight","settingsContainer","sectionHeader","settingItem","settingDescription","muted","autoAnte","alignItems","marginRight","marginBottom","IconButton","icon","variant","compact","restProps","iconButton","PreferencesButton","onModalStateChange","isPreferencesOpen","setIsPreferencesOpen","Fragment","isOpen","BarChartIcon","DownloadIcon","useGameContext","require","gameState","TransactionDownloadButton","propGameState","contextValue","gameData","gameTransactions","_a","gameId","_id","transactions","Array","isArray","csvContent","sortedTransactions","tx","timestamp","Date","sort","a","b","forEach","playerName","player","escapedName","transactionType","reason","reasonParts","round","blob","Blob","url","URL","createObjectURL","link","document","createElement","setAttribute","visibility","body","appendChild","removeChild","GameStats","players","playerNames","Object","entries","playerId","gameStats","formatNumber","num","playerTransactions","push","rounds","decks","deckCount","totalAnteAmount","reduce","sum","abs","totalBetAmount","bets","biggestBet","max","biggestPot","potAmount","penalties","totalPenaltyAmount","playerBetCounts","mostAggressivePlayerId","mostBets","count","playerBetTotals","total","highestAvgBetPlayerId","highestAvgBet","data","avg","playerWins","mostWinningPlayerId","mostWins","wins","playerPenalties","mostPenaltiesPlayerId","mostPenalties","playerProfits","totals","biggestWinnerId","biggestWin","biggestLoserId","biggestLoss","profit","key","value","suffix","stat","GameSummaryModal","showPayoutsTab","settings","isPrivate","playerTotals","settleUpPayments","keys","player1Id","player1Total","player2Id","player2Total","from","fromName","to","toName","payments","losers","_","winners","winner","loser","paymentAmount","min","shift","activeTab","setActiveTab","headerButtons","payment","index","Leaderboard","leaderboard","setLeaderboard","duration","setDuration","userDataContext","useContext","UserDataContext","fetchLeaderboard","userIds","prefetchUsers","tabIndex","rank","totalProfit","PlayerStatsModal","historyData","setHistoryData","games","pagination","currentPage","setCurrentPage","showGameSummary","setShowGameSummary","selectedGameData","setSelectedGameData","lifetimeStats","setLifetimeStats","statsLoading","setStatsLoading","statsError","setStatsError","fetchGameHistory","stats","fetchLifetimeStats","formatDate","dateString","date","Intl","DateTimeFormat","year","month","day","hour","minute","format","getRoundCount","game","roundCount","Number","String","selectedGame","find","handleGameClick","role","totalPlayerCount","endedAt","ceil","PlayerStatsButton","isStatsOpen","setIsStatsOpen","StoreIcon","StoreButton","QuestionIcon","cx","cy","r","GameRulesModal","paddingLeft","RulesButton","showRules","setShowRules","GamepadInput","inputRef","enhanceInput","useVirtualKeyboardContext","storeService","constructor","this","baseURL","getAuthHeaders","localStorage","getItem","getOfferingsByType","offeringType","encodeURIComponent","method","credentials","errorData","catch","status","offerings","getAllOfferings","processPurchase","productId","JSON","stringify","result","coinsAdded","newBalance","getCoinOfferings","StoreModal","coinOfferings","setCoinOfferings","purchasing","setPurchasing","loadCoinOfferings","gap","gridTemplateColumns","offering","minHeight","imageUrl","objectFit","flex","coinAmount","NumberFormat","lineHeight","price","priceUSD","currency","handlePurchase","primaryButton"],"mappings":"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"}