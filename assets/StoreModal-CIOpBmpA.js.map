{"version":3,"file":"StoreModal-CIOpBmpA.js","sources":["../../src/components/common/CoinIcon.jsx","../../src/components/UserAvatar.jsx","../../src/components/common/CurrencyAmount.jsx","../../src/components/icons/GearIcon.jsx","../../src/components/ToggleSwitch.jsx","../../src/components/FileUpload.jsx","../../src/components/TitlesSelector.jsx","../../src/components/PreferencesModal.jsx","../../src/components/common/IconButton.jsx","../../src/components/common/PreferencesButton.jsx","../../src/components/icons/BarChartIcon.jsx","../../src/components/icons/DownloadIcon.jsx","../../src/components/common/TransactionDownloadButton.jsx","../../src/components/GameStats.jsx","../../src/components/GameSummaryModal.jsx","../../src/components/Leaderboard.jsx","../../src/components/PlayerStatsModal.jsx","../../src/components/common/PlayerStatsButton.jsx","../../src/components/icons/StoreIcon.jsx","../../src/components/StoreButton.jsx","../../src/components/icons/QuestionIcon.jsx","../../src/components/GameRulesModal.jsx","../../src/components/common/RulesButton.jsx","../../src/components/GamepadInput.jsx","../../src/services/StoreService.js","../../src/components/StoreModal.jsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport styles from './CoinIcon.module.css';\n\n/**\n * A reusable coin icon component to replace dollar signs\n * @param {Object} props - Component props\n * @param {string} [props.size='small'] - Size of the coin icon ('small', 'medium', 'large')\n * @param {string} [props.className] - Additional CSS class to apply\n */\nconst CoinIcon = ({ size = 'small', className = '' }) => {\n  const sizeMap = {\n    small: 15,\n    medium: 19,\n    large: 24\n  };\n  \n  const pixelSize = sizeMap[size] || sizeMap.small;\n  \n  // Generate unique IDs for gradients to prevent conflicts\n  const gradientId = useMemo(() => `goldGradient-${Math.random().toString(36).substr(2, 9)}`, []);\n  const shineId = useMemo(() => `goldShine-${Math.random().toString(36).substr(2, 9)}`, []);\n  \n  return (\n    <span className={`${styles.coinIcon} ${styles[size]} ${className}`}>\n      <svg \n        width={pixelSize} \n        height={pixelSize} \n        viewBox=\"0 0 24 24\" \n        fill=\"none\" \n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {/* Diamond shape with golden gradient */}\n        <defs>\n          <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#FFD700\" />\n            <stop offset=\"50%\" stopColor=\"#FFA500\" />\n            <stop offset=\"100%\" stopColor=\"#FF8C00\" />\n          </linearGradient>\n          <linearGradient id={shineId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#FFED4E\" />\n            <stop offset=\"100%\" stopColor=\"#FFD700\" />\n          </linearGradient>\n        </defs>\n        \n        {/* Main diamond shape */}\n        <path \n          d=\"M12 2L22 12L12 22L2 12L12 2Z\" \n          fill={`url(#${gradientId})`}\n          stroke=\"#D4AF37\"\n          strokeWidth=\"0.5\"\n        />\n        \n        {/* Inner shine effect */}\n        <path \n          d=\"M12 5L18 12L12 18L6 12L12 5Z\" \n          fill={`url(#${shineId})`}\n          opacity=\"0.6\"\n        />\n        \n        {/* Top highlight */}\n        <path \n          d=\"M12 2L16 6L12 8L8 6L12 2Z\" \n          fill=\"#FFFACD\"\n          opacity=\"0.7\"\n        />\n      </svg>\n    </span>\n  );\n};\n\nexport default CoinIcon;\n","import React, { useState, useEffect } from 'react';\nimport styles from './styles/UserAvatar.module.css';\nimport { useUserData } from '../contexts/UserDataContext';\n\n/**\n * UserAvatar component displays a user's profile image or their initials if no image is available.\n * Uses centralized UserData system for consistent user information across the app.\n * \n * @param {Object} props - Component props\n * @param {string} props.userId - User ID to fetch data for\n * @param {string} props.size - Size of the avatar ('small', 'medium', 'large')\n * @param {boolean} props.showName - Whether to display the username next to the avatar\n * @param {string} props.namePosition - Position of the username ('right', 'below')\n * @param {string} props.className - Additional CSS class for styling\n * @param {boolean} props.showTitle - Whether to show the title\n */\nconst UserAvatar = ({ \n  userId,\n  size = 'medium', \n  showName = true, \n  namePosition = 'right',\n  className = '',\n  showTitle = true\n}) => {\n  const [showPlayerCard, setShowPlayerCard] = useState(false);\n  const user = useUserData(userId);\n  \n  if (!userId) return null;\n  \n  // Show loading state while user data loads\n  if (!user) {\n    const sizeClass = styles[size] || styles.medium;\n    const containerClass = showName ? styles[`container${namePosition.charAt(0).toUpperCase() + namePosition.slice(1)}`] : '';\n    \n    return (\n      <div className={`${styles.userAvatarContainer} ${containerClass} ${className}`}>\n        <div className={`${styles.avatar} ${sizeClass} ${styles.loading}`}>\n          <div className={styles.avatarLoader}></div>\n        </div>\n        {showName && (\n          <div className={styles.userInfo}>\n            <div className={styles.skeletonUsername}></div>\n            {showTitle && (\n              <div className={styles.skeletonTitle}></div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n  \n  const { username, profileImg, title, xp, level } = user;\n  const initials = getInitials(username || 'Unknown');\n  const sizeClass = styles[size] || styles.medium;\n  const containerClass = showName ? styles[`container${namePosition.charAt(0).toUpperCase() + namePosition.slice(1)}`] : '';\n  \n  // Format the image URL to point to the server\n  const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';\n  \n  // Handle different URL formats\n  let formattedImageUrl = null;\n  if (profileImg) {\n    // If the URL already starts with http, use it as is\n    if (profileImg.startsWith('http')) {\n      formattedImageUrl = profileImg;\n    } \n    // If the URL contains /uploads/, replace it with /files/\n    else if (profileImg.includes('/uploads/')) {\n      // Extract just the filename from the path\n      const filename = profileImg.split('/').pop();\n      formattedImageUrl = `${API_URL}/files/images/${filename}`;\n    }\n    // Otherwise, just append the URL to the API_URL\n    else {\n      formattedImageUrl = `${API_URL}${profileImg}`;\n    }\n  }\n\n  \n  return (\n    <div className={`${styles.userAvatarContainer} ${containerClass} ${className}`}>\n      <div \n        className={`${styles.avatar} ${sizeClass}`}\n        onMouseEnter={() => setShowPlayerCard(true)}\n        onMouseLeave={() => setShowPlayerCard(false)}\n      >\n        <div className={styles.avatarImageContainer}>\n          {formattedImageUrl ? (\n            <img \n              src={formattedImageUrl} \n              alt={`${username}'s avatar`} \n              className={styles.avatarImage}\n              onError={(e) => {\n                console.error(`Failed to load profile image for ${username}:`, e);\n                e.target.style.display = 'none';\n                e.target.nextSibling.style.display = 'flex';\n              }}\n            />\n          ) : null}\n          <div \n            className={styles.initialsPlaceholder}\n            style={{ display: formattedImageUrl ? 'none' : 'flex' }}\n          >\n            {initials}\n          </div>\n        </div>\n\n        {/* Player Card */}\n        {showPlayerCard && (\n          <div className={styles.playerCard}>\n            <div className={styles.playerCardAvatar}>\n              {formattedImageUrl ? (\n                <img \n                  src={formattedImageUrl} \n                  alt={`${username}'s avatar`} \n                  className={styles.playerCardImage}\n                />\n              ) : (\n                <div className={styles.playerCardInitials}>\n                  {initials}\n                </div>\n              )}\n            </div>\n            <div className={styles.playerCardInfo}>\n              <div className={styles.playerCardUsername}>\n                {username || 'Unknown'}\n              </div>\n              {title && (\n                <div className={styles.playerCardTitle}>\n                  {title}\n                </div>\n              )}\n              {level !== undefined && xp !== undefined && (\n                <div className={styles.playerCardLevelXP}>\n                  Level {level} <span className={styles.separator}>â€¢</span> <span className={styles.xpValue}>{formatXP(xp)} XP</span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {showName && (\n        <div className={styles.userInfo}>\n          <div className={styles.username}>\n            {username || 'Unknown'}\n          </div>\n          {showTitle && title && (\n            <div className={styles.userTitle}>\n              {title}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Helper function to get initials from a name\nconst getInitials = (name) => {\n  if (!name) return '?';\n  \n  return name\n    .split(' ')\n    .map(part => part.charAt(0))\n    .join('')\n    .toUpperCase()\n    .substring(0, 2);\n};\n\n// Helper function to format XP with abbreviations\nconst formatXP = (xp) => {\n  if (xp >= 1000000) {\n    return (xp / 1000000).toFixed(1).replace(/\\.0$/, '') + 'M';\n  }\n  if (xp >= 1000) {\n    return (xp / 1000).toFixed(1).replace(/\\.0$/, '') + 'K';\n  }\n  return xp.toString();\n};\n\nexport default UserAvatar;\n","import React from 'react';\nimport styles from './CurrencyAmount.module.css';\nimport CoinIcon from './CoinIcon.jsx';\n\n/**\n * A reusable component that displays currency amounts with consistent styling\n * @param {Object} props - Component props\n * @param {number} props.amount - The amount to display\n * @param {string} props.size - The size of the coin icon (small, medium, large)\n * @param {string} props.background - Optional custom background style (e.g. 'dark', 'pill')\n * @param {string} props.customClass - Optional custom CSS class to apply\n */\nconst CurrencyAmount = ({ amount, size, background, customClass }) => {\n  // Determine which CSS classes to apply\n  const containerClasses = [\n    styles.currencyAmount,\n    background === 'dark' ? styles.darkBackground : '',\n    background === 'pill' ? styles.pillBackground : '',\n    customClass || ''\n  ].filter(Boolean).join(' ');\n  \n  return (\n    <span className={containerClasses}>\n      <CoinIcon size={size} />\n      <span>{amount.toLocaleString()}</span>\n    </span>\n  );\n};\n\nexport default CurrencyAmount;\n","import React from 'react';\n\nconst GearIcon = ({ className = 'h-6 w-6', ...props }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth={1.5}\n      stroke=\"currentColor\"\n      className={className}\n      {...props}\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.004.827c-.29.24-.438.613-.431.992a6.759 6.759 0 010 1.905c-.007.378.141.75.431.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.29-.24.438-.613.43-.992a6.932 6.932 0 010-1.905c.007-.378-.14-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281zM15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n      />\n    </svg>\n  );\n};\n\nexport default GearIcon;\n","import React from 'react';\nimport styles from './styles/ToggleSwitch.module.css';\n\nconst ToggleSwitch = ({ isChecked, onChange, label }) => {\n  return (\n    <div className={styles.toggleContainer}>\n      <label className={styles.toggleLabel}>\n        <input\n          type=\"checkbox\"\n          checked={isChecked}\n          onChange={onChange}\n          className={styles.toggleInput}\n          data-gamepad-focusable=\"true\"\n        />\n        <span className={styles.toggleSlider}></span>\n        {label && <span className={styles.toggleText}>{label}</span>}\n      </label>\n    </div>\n  );\n};\n\nexport default ToggleSwitch;\n","import React, { useState, useRef } from 'react';\nimport styles from './styles/FileUpload.module.css';\n\nconst FileUpload = ({ \n  onUpload, \n  currentFileUrl, \n  acceptedFileTypes, \n  label,\n  previewType = 'image' // 'image', 'audio', or 'none'\n}) => {\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const fileInputRef = useRef(null);\n  \n  const handleFileChange = async (e) => {\n    const file = e.target.files[0];\n    if (!file) {\n      console.error('[FileUpload] No file selected');\n      return;\n    }\n    \n    console.log('[FileUpload] File selected:', {\n      name: file.name,\n      type: file.type,\n      size: file.size\n    });\n    \n    setError(null);\n    setIsUploading(true);\n    \n    try {\n      console.log('[FileUpload] Calling onUpload function');\n      const success = await onUpload(file);\n      console.log('[FileUpload] Upload result:', success);\n      \n      if (!success) {\n        console.error('[FileUpload] Upload failed');\n        setError('Failed to upload file. Please try again.');\n      } else {\n        console.log('[FileUpload] Upload successful');\n      }\n    } catch (err) {\n      console.error('[FileUpload] Error uploading file:', err);\n      setError('An error occurred during upload.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  \n  const handleButtonClick = () => {\n    fileInputRef.current.click();\n  };\n  \n  const renderPreview = () => {\n    if (!currentFileUrl) return null;\n    \n    if (previewType === 'image') {\n      return (\n        <div className={styles.previewContainer}>\n          <img \n            src={currentFileUrl} \n            alt=\"Preview\" \n            className={styles.imagePreview} \n          />\n        </div>\n      );\n    } else if (previewType === 'audio') {\n      return (\n        <div className={styles.previewContainer}>\n          <audio \n            controls \n            src={currentFileUrl} \n            className={styles.audioPreview}\n          >\n            Your browser does not support the audio element.\n          </audio>\n        </div>\n      );\n    }\n    \n    return null;\n  };\n  \n  return (\n    <div className={styles.fileUploadContainer}>\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileChange}\n        accept={acceptedFileTypes}\n        className={styles.fileInput}\n      />\n      \n      {currentFileUrl && renderPreview()}\n      \n      <button \n        type=\"button\" \n        onClick={handleButtonClick}\n        className={`${styles.uploadButton} ${currentFileUrl ? styles.changeButton : ''}`}\n        disabled={isUploading}\n        data-gamepad-focusable=\"true\"\n      >\n        {isUploading ? 'Uploading...' : currentFileUrl ? `Change ${label}` : `Upload ${label}`}\n      </button>\n      \n      {error && (\n        <div className={styles.errorMessage}>\n          {error}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;\n","import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { usePreferences } from '../contexts/PreferencesContext';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport { API_URL } from '../config';\n\nconst TitlesSelector = () => {\n  const { token } = useAuth();\n  const { preferences, updateSelectedTitle } = usePreferences();\n  const [titles, setTitles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadTitles();\n  }, []);\n\n  const loadTitles = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_URL}/me/titles`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load titles');\n      }\n\n      const userTitles = await response.json();\n      setTitles(userTitles);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTitleSelect = async (titleString) => {\n    try {\n      await updateSelectedTitle(titleString);\n    } catch (err) {\n      setError('Failed to update title');\n    }\n  };\n\n  if (loading) {\n    return <div className={baseModalStyles.loadingMessage}>Loading titles...</div>;\n  }\n\n  if (error) {\n    return <div className={baseModalStyles.errorMessage}>{error}</div>;\n  }\n\n  if (titles.length === 0) {\n    return (\n      <div style={{ textAlign: 'center', padding: '20px', color: '#a0b9d6' }}>\n        No titles unlocked yet. Play games to earn achievements!\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ \n      display: 'block',\n      width: '100%',\n      overflowX: 'auto',\n      overflowY: 'hidden',\n      whiteSpace: 'nowrap',\n      paddingBottom: '8px'\n    }}>\n        {/* No Title option */}\n        <div\n          onClick={() => handleTitleSelect('')}\n          style={{\n            display: 'inline-block',\n            width: '120px',\n            height: '36px',\n            padding: '8px',\n            margin: '0 8px 0 0',\n            borderRadius: '6px',\n            cursor: 'pointer',\n            textAlign: 'center',\n            backgroundColor: !preferences.selectedTitle ? 'rgba(100, 169, 255, 0.3)' : 'rgba(255, 255, 255, 0.08)',\n            border: !preferences.selectedTitle ? '2px solid #64a9ff' : '2px solid rgba(255, 255, 255, 0.15)',\n            verticalAlign: 'top',\n            whiteSpace: 'normal',\n            flexDirection: 'column',\n            justifyContent: 'center',\n          }}\n        >\n          <div style={{ fontWeight: 'bold', color: '#bcdcff', fontSize: '13px' }}>\n            No Title\n          </div>\n          <div style={{ color: '#a0b9d6', fontSize: '10px', marginTop: '2px' }}>\n            Display no title\n          </div>\n        </div>\n\n        {/* Unlocked titles */}\n        {titles.map(title => (\n          <div \n            key={title.title}\n            onClick={() => handleTitleSelect(title.title)}\n            style={{\n              display: 'inline-flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              width: '130px',\n              height: '36px',\n              padding: '8px',\n              margin: '0 8px 0 0',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              textAlign: 'center',\n              backgroundColor: preferences.selectedTitle === title.title ? 'rgba(100, 169, 255, 0.3)' : 'rgba(255, 255, 255, 0.08)',\n              border: preferences.selectedTitle === title.title ? '2px solid #64a9ff' : '2px solid rgba(255, 255, 255, 0.15)',\n              verticalAlign: 'top',\n              whiteSpace: 'normal'\n            }}\n          >\n            <div style={{ fontWeight: 'bold', color: '#bcdcff', fontSize: '13px' }}>\n              {title.title}\n            </div>\n            <div style={{ color: '#a0b9d6', fontSize: '10px', marginTop: '2px' }}>\n              {title.description}\n            </div>\n          </div>\n        ))}\n\n      {titles.length === 0 && (\n        <div style={{ \n          textAlign: 'center', \n          padding: '16px', \n          color: '#a0b9d6',\n          backgroundColor: 'rgba(255, 255, 255, 0.05)',\n          borderRadius: '6px',\n          border: '1px solid rgba(255, 255, 255, 0.1)',\n          marginTop: '8px',\n          whiteSpace: 'normal'\n        }}>\n          No titles unlocked yet. Play games to earn achievements!\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitlesSelector;","import React from 'react';\nimport { usePreferences } from '../contexts/PreferencesContext';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport BaseModal from './common/BaseModal';\nimport ToggleSwitch from './ToggleSwitch.jsx';\nimport FileUpload from './FileUpload.jsx';\nimport TitlesSelector from './TitlesSelector.jsx';\n\nconst PreferencesModal = ({ onClose }) => {\n  const { \n    preferences, \n    toggleAutoAnte,\n    toggleMute,\n    uploadTwoSecondPotGif, \n    uploadTwoSecondPotMp3, \n    uploadProfileImg,\n    loading \n  } = usePreferences();\n\n  if (loading) {\n    return (\n      <BaseModal title=\"Preferences\" onClose={onClose} style={{ maxWidth: 600, maxHeight: '25vh' }}>\n        <div className={baseModalStyles.loadingMessage}>Loading preferences...</div>\n      </BaseModal>\n    );\n  }\n\n  return (\n    <BaseModal title=\"Preferences\" onClose={onClose} style={{ maxWidth: 600, maxHeight: '80vh' }}>\n      <div className={baseModalStyles.settingsContainer}>\n        {/* Game Options Section */}\n        <div className={baseModalStyles.sectionHeader}>Game Options</div>\n\n        {/* Mute Setting */}\n        <div className={baseModalStyles.settingItem}>\n          <div className={baseModalStyles.settingDescription}>\n            <h4>Mute Sound</h4>\n            <p>Mute all game sound effects</p>\n          </div>\n          <ToggleSwitch \n            isChecked={preferences.muted}\n            onChange={toggleMute}\n          />\n        </div>\n\n        {/* Auto-Ante Setting */}\n        <div className={baseModalStyles.settingItem}>\n          <div className={baseModalStyles.settingDescription}>\n            <h4>Auto-Ante</h4>\n            <p>Automatically ante up when a new round begins</p>\n          </div>\n          <ToggleSwitch \n            isChecked={preferences.autoAnte}\n            onChange={toggleAutoAnte}\n          />\n        </div>\n\n        {/* Customization Options Section */}\n        <div className={baseModalStyles.sectionHeader}>Customization Options</div>\n\n        {/* Profile Image Setting */}\n        <div className={baseModalStyles.settingItem}>\n          <div className={baseModalStyles.settingDescription}>\n            <h4>Profile Image</h4>\n            <p>Upload a profile image to personalize your account</p>\n          </div>\n          <FileUpload\n            onUpload={uploadProfileImg}\n            currentFileUrl={preferences.profileImg}\n            acceptedFileTypes=\"image/jpeg,image/png,image/gif\"\n            label=\"Image\"\n            previewType=\"image\"\n          />\n        </div>\n\n        {/* Titles Selection */}\n        <div className={baseModalStyles.settingItem} style={{ flexDirection: 'column', alignItems: 'stretch' }}>\n          <div className={baseModalStyles.settingDescription} style={{ marginRight: 0, marginBottom: '12px' }}>\n            <h4>Title</h4>\n            <p>Choose a title to display with your name. Unlock more by playing games!</p>\n          </div>\n          <TitlesSelector />\n        </div>\n\n        {/* Two Second Pot GIF Setting */}\n        {/* <div style={{ position: 'relative' }}>\n          <div style={{\n            position: 'absolute',\n            top: '-12px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            background: '#FFD700',\n            color: '#333',\n            padding: '2px 10px',\n            borderRadius: '4px',\n            fontWeight: 'bold',\n            fontSize: '14px',\n            zIndex: 2\n          }}>\n            COMING SOON\n          </div>\n          <div className={baseModalStyles.settingItem} style={{ border: '2px dashed #FFD700', padding: '15px', borderRadius: '8px', marginTop: '12px' }}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Two Second POT GIF</h4>\n              <p>Upload a GIF to play when you slam the POT button</p>\n            </div>\n            <FileUpload\n              onUpload={uploadTwoSecondPotGif}\n              currentFileUrl={preferences.twoSecondPotGif}\n              acceptedFileTypes=\"image/gif\"\n              label=\"GIF\"\n              previewType=\"image\"\n            />\n          </div>\n        </div>\n\n        Two Second Pot Sound Setting\n        <div style={{ position: 'relative' }}>\n          <div style={{\n            position: 'absolute',\n            top: '-12px',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            background: '#FFD700',\n            color: '#333',\n            padding: '2px 10px',\n            borderRadius: '4px',\n            fontWeight: 'bold',\n            fontSize: '14px',\n            zIndex: 2\n          }}>\n            COMING SOON\n          </div>\n          <div className={baseModalStyles.settingItem} style={{ border: '2px dashed #FFD700', padding: '15px', borderRadius: '8px', marginTop: '12px' }}>\n            <div className={baseModalStyles.settingDescription}>\n              <h4>Two Second POT Sound</h4>\n              <p>Upload a sound to play when you slam the POT button</p>\n            </div>\n            <FileUpload\n              onUpload={uploadTwoSecondPotMp3}\n              currentFileUrl={preferences.twoSecondPotMp3}\n              acceptedFileTypes=\"audio/mpeg,audio/wav\"\n              label=\"Sound\"\n              previewType=\"audio\"\n            />\n          </div>\n        </div> */}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default PreferencesModal;\n","import React from 'react';\nimport styles from './styles/IconButton.module.css';\n\n/**\n * A reusable icon button component with standardized styling\n * \n * @param {Object} props Component props\n * @param {React.ReactNode} props.icon The icon to display\n * @param {string} props.title Tooltip text for the button\n * @param {function} props.onClick Click handler function\n * @param {string} props.variant Button variant ('default', 'danger', 'success')\n * @param {boolean} props.compact Whether to use compact styling\n * @param {string} props.className Additional class names\n */\nconst IconButton = ({ \n  icon, \n  title, \n  onClick, \n  variant = 'default',\n  compact = true,\n  className = '',\n  ...restProps\n}) => {\n  return (\n    <button\n      className={`${styles.iconButton} ${styles[variant]} ${className}`}\n      onClick={onClick}\n      title={title}\n      type=\"button\"\n      {...restProps}\n    >\n      {icon}\n    </button>\n  );\n};\n\nexport default IconButton;\n","import React, { useState, useEffect } from 'react';\nimport GearIcon from '../icons/GearIcon';\nimport PreferencesModal from '../PreferencesModal';\nimport IconButton from './IconButton';\n\nconst PreferencesButton = ({ onModalStateChange }) => {\n  const [isPreferencesOpen, setIsPreferencesOpen] = useState(false);\n\n  const openPreferences = () => {\n    setIsPreferencesOpen(true);\n  };\n\n  const closePreferences = () => {\n    setIsPreferencesOpen(false);\n  };\n\n  // Notify parent when modal state changes\n  useEffect(() => {\n    if (onModalStateChange) {\n      onModalStateChange(isPreferencesOpen);\n    }\n  }, [isPreferencesOpen, onModalStateChange]);\n\n  return (\n    <>\n      <IconButton\n        onClick={openPreferences}\n        icon={<GearIcon style={{ color: 'white', width: 20, height: 20 }} />}\n        aria-label=\"Open Preferences\"\n        variant=\"preferences\"\n        title=\"Preferences\"\n        data-gamepad-focusable=\"true\"\n      />\n      {/* Render the modal conditionally */}\n      {isPreferencesOpen && <PreferencesModal isOpen={isPreferencesOpen} onClose={closePreferences} />}\n    </>\n  );\n};\n\nexport default PreferencesButton;\n","import React from 'react';\n\n/**\n * Bar chart icon component for stats button\n * @param {Object} props - Component props\n * @param {string} props.color - Color of the icon (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst BarChartIcon = ({ color = 'currentColor', size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    >\n      <line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"10\"></line>\n      <line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"4\"></line>\n      <line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"14\"></line>\n      <line x1=\"3\" y1=\"20\" x2=\"21\" y2=\"20\"></line>\n    </svg>\n  );\n};\n\nexport default BarChartIcon;\n","import React from 'react';\n\n/**\n * Download CSV icon component for transaction log download button\n * @param {Object} props - Component props\n * @param {string} props.color - Color of the icon (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst DownloadIcon = ({ color = 'currentColor', size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    >\n      {/* Stylized CSV download icon with document and arrow */}\n      <path d=\"M14 3v4a1 1 0 0 0 1 1h4\" />\n      <path d=\"M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z\" />\n      <path d=\"M12 15 L12 18\" />\n      <path d=\"M9.5 16.5 L12 19 L14.5 16.5\" />\n      <path d=\"M8 10 L10 10\" />\n      <path d=\"M12 10 L14 10\" />\n      <path d=\"M16 10 L16 10\" />\n    </svg>\n  );\n};\n\nexport default DownloadIcon;\n","import React from 'react';\nimport IconButton from './IconButton';\nimport DownloadIcon from '../icons/DownloadIcon';\n// Optional import - only used if gameState not provided via props\nlet useGameContext;\ntry {\n  useGameContext = require('../../contexts/GameContext').useGameContext;\n} catch (error) {\n  // Context not available - will rely on props\n  useGameContext = () => ({ gameState: null });\n}\n\n/**\n * A specialized button component for downloading game transactions as CSV\n * \n * @param {Object} props Component props\n * @param {string} props.title Custom tooltip text (optional)\n * @param {Object} props.gameState Game state object (optional, will use context if not provided)\n */\nconst TransactionDownloadButton = ({ \n  title = \"Download Transaction Log as CSV\",\n  gameState: propGameState,\n  ...restProps \n}) => {\n  // Use provided gameState or try to get from context if available\n  let contextValue;\n  try {\n    contextValue = useGameContext ? useGameContext() : { gameState: null };\n  } catch (error) {\n    // Context not available\n    contextValue = { gameState: null };\n  }\n  \n  // Handle both the original gameState format and our new gameData format\n  const gameData = propGameState || contextValue?.gameState;\n  \n  // Extract data based on structure\n  // For historical games from the API, the structure might be slightly different\n  const gameTransactions = gameData?.gameTransactions || gameData?.gameData?.gameTransactions || [];\n  const gameId = gameData?._id || gameData?.id || 'unknown';\n\n  const downloadTransactionsCSV = () => {\n    // Ensure we have transactions as an array\n    const transactions = Array.isArray(gameTransactions) ? gameTransactions : [];\n    \n    if (transactions.length === 0) return;\n    \n    // Create CSV header\n    let csvContent = \"Player,Transaction Type,Amount,Round,Timestamp\\n\";\n    \n    // Make a copy of transactions for sorting\n    const sortedTransactions = [...transactions].map(tx => ({\n      ...tx,\n      // Ensure timestamp is a Date object for sorting\n      timestamp: tx.timestamp ? new Date(tx.timestamp) : new Date()\n    }));\n    \n    // Sort all transactions by timestamp in ascending order\n    sortedTransactions.sort((a, b) => a.timestamp - b.timestamp);\n    \n    // Add sorted transaction data to CSV\n    sortedTransactions.forEach(tx => {\n      // Format date for display\n      const timestamp = tx.timestamp ? new Date(tx.timestamp).toLocaleString() : 'N/A';\n      \n      // Escape any commas in the player name\n      const playerName = tx.playerName || tx.player || 'Unknown Player';\n      const escapedName = playerName.includes(',') ? `\"${playerName}\"` : playerName;\n      \n      // Use the transactionType field if available, otherwise derive it from reason\n      let transactionType = tx.transactionType || 'Transaction';\n      \n      // If we need to derive the transaction type from the reason\n      if (!tx.transactionType && tx.reason) {\n        // Extract the action part from the reason (e.g., \"Ante in round 1\" -> \"Ante\")\n        const reasonParts = tx.reason.split(' ');\n        transactionType = reasonParts[0]; // Take the first word as the type\n        \n        // Special case for \"Won bet\" which is two words\n        if (reasonParts[0] === 'Won') {\n          transactionType = 'Win';\n        }\n        // Special case for penalty reasons\n        else if (tx.reason.includes('penalty')) {\n          transactionType = 'Penalty';\n        }\n      }\n      \n      // Add the transaction row\n      csvContent += `${escapedName},${transactionType},${tx.amount},${tx.round || 'N/A'},${timestamp}\\n`;\n    });\n    \n    // Create and trigger download\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', `game-${gameId}-transactions.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <IconButton\n      icon={<DownloadIcon color=\"white\" size={20} />}\n      title={title}\n      onClick={downloadTransactionsCSV}\n      variant=\"default\"\n      {...restProps}\n    />\n  );\n};\n\nexport default TransactionDownloadButton;\n","import { useMemo } from 'react';\nimport styles from './styles/GameStats.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\n\nconst GameStats = ({ gameData }) => {\n  const transactions = gameData.gameTransactions;\n  const players = gameData.players;\n  \n  // Construct player names from both players and transactions\n  const playerNames = {};\n  \n  // First add current players\n  Object.entries(players).forEach(([playerId, player]) => {\n    playerNames[playerId] = player.name;\n  });\n  \n  // Then add players who left but have transactions\n  transactions.forEach(tx => {\n    if (tx.playerId && !playerNames[tx.playerId]) {\n      playerNames[tx.playerId] = tx.playerName || 'Unknown Player';\n    }\n  });\n\n  // Calculate game statistics from transaction data\n  const gameStats = useMemo(() => {\n    if (transactions.length === 0) {\n      return [];\n    }\n\n    // Helper function to format numbers with commas\n    const formatNumber = (num) => num.toLocaleString();\n\n    // Group transactions by player\n    const playerTransactions = {};\n    transactions.forEach(tx => {\n      if (!playerTransactions[tx.playerId]) {\n        playerTransactions[tx.playerId] = [];\n      }\n      playerTransactions[tx.playerId].push(tx);\n    });\n\n    // Get rounds from game data\n    const rounds = gameData.round || 1;\n    \n    // Calculate total decks - get from game data, not transactions\n    const decks = gameData.deckCount || 1;\n\n    // Calculate total ante amount\n    const totalAnteAmount = transactions\n      .filter(tx => tx.transactionType === 'Ante')\n      .reduce((sum, tx) => sum + Math.abs(tx.amount), 0);\n\n    // Calculate total bet amount\n    const totalBetAmount = transactions\n      .filter(tx => tx.transactionType === 'Bet')\n      .reduce((sum, tx) => sum + Math.abs(tx.amount), 0);\n\n    // Calculate biggest single bet\n    const bets = transactions.filter(tx => tx.transactionType === 'Bet');\n    const biggestBet = bets.length > 0 ?\n      bets.reduce((max, tx) => Math.abs(tx.amount) > Math.abs(max.amount) ? tx : max, bets[0]) :\n      null;\n\n    // Calculate biggest pot\n    const biggestPot = transactions.reduce((max, tx) => tx.potAmount > max ? tx.potAmount : max, 0);\n\n    // Calculate total penalties\n    const penalties = transactions.filter(tx => tx.transactionType === '2x' || tx.transactionType === '3x');\n    const totalPenaltyAmount = penalties.reduce((sum, tx) => sum + Math.abs(tx.amount), 0);\n\n    // Calculate player with most bets (aggressive player)\n    const playerBetCounts = {};\n    bets.forEach(tx => {\n      playerBetCounts[tx.playerId] = (playerBetCounts[tx.playerId] || 0) + 1;\n    });\n\n    let mostAggressivePlayerId = null;\n    let mostBets = 0;\n    \n    Object.entries(playerBetCounts).forEach(([playerId, count]) => {\n      if (count > mostBets) {\n        mostBets = count;\n        mostAggressivePlayerId = playerId;\n      }\n    });\n\n    // Calculate average bet size by player\n    const playerBetTotals = {};\n    bets.forEach(tx => {\n      if (!playerBetTotals[tx.playerId]) {\n        playerBetTotals[tx.playerId] = { total: 0, count: 0 };\n      }\n      playerBetTotals[tx.playerId].total += Math.abs(tx.amount);\n      playerBetTotals[tx.playerId].count += 1;\n    });\n\n    // Find player with highest average bet\n    let highestAvgBetPlayerId = null;\n    let highestAvgBet = 0;\n    \n    Object.entries(playerBetTotals).forEach(([playerId, data]) => {\n      const avg = data.total / data.count;\n      if (avg > highestAvgBet) {\n        highestAvgBet = avg;\n        highestAvgBetPlayerId = playerId;\n      }\n    });\n\n    // Calculate player wins count\n    const playerWins = {};\n    transactions\n      .filter(tx => tx.transactionType === 'Win')\n      .forEach(tx => {\n        playerWins[tx.playerId] = (playerWins[tx.playerId] || 0) + 1;\n      });\n\n    // Find most winning player\n    let mostWinningPlayerId = null;\n    let mostWins = 0;\n    \n    Object.entries(playerWins).forEach(([playerId, wins]) => {\n      if (wins > mostWins) {\n        mostWins = wins;\n        mostWinningPlayerId = playerId;\n      }\n    });\n\n    // Calculate penalty counts by player\n    const playerPenalties = {};\n    penalties.forEach(tx => {\n      playerPenalties[tx.playerId] = (playerPenalties[tx.playerId] || 0) + 1;\n    });\n\n    // Find player with most penalties\n    let mostPenaltiesPlayerId = null;\n    let mostPenalties = 0;\n    \n    Object.entries(playerPenalties).forEach(([playerId, count]) => {\n      if (count > mostPenalties) {\n        mostPenalties = count;\n        mostPenaltiesPlayerId = playerId;\n      }\n    });\n\n    // Use server-side calculated totals\n    const playerProfits = gameData.totals || {};\n\n    // Find biggest winner and loser\n    let biggestWinnerId = null;\n    let biggestWin = 0;\n    let biggestLoserId = null;\n    let biggestLoss = 0;\n    \n    Object.entries(playerProfits).forEach(([playerId, profit]) => {\n      if (profit > biggestWin) {\n        biggestWin = profit;\n        biggestWinnerId = playerId;\n      }\n      if (profit < biggestLoss) {\n        biggestLoss = profit;\n        biggestLoserId = playerId;\n      }\n    });\n\n    // Build stats array with all the interesting stats we've calculated\n    return [\n      {\n        key: 'totalDecks',\n        label: 'Total Decks',\n        value: decks,\n        type: 'number'\n      },\n      {\n        key: 'totalRounds',\n        label: 'Total Rounds',\n        value: rounds,\n        type: 'number'\n      },\n      {\n        key: 'totalBets',\n        label: 'Total Bets Placed',\n        value: bets.length,\n        type: 'number'\n      },\n      {\n        key: 'totalAnte',\n        label: 'Total Ante Amount',\n        value: totalAnteAmount,\n        type: 'currency'\n      },\n      {\n        key: 'totalBetAmount',\n        label: 'Total Bet Amount',\n        value: totalBetAmount,\n        type: 'currency'\n      },\n      {\n        key: 'biggestPot',\n        label: 'Biggest Pot',\n        value: biggestPot,\n        type: 'currency'\n      },\n      {\n        key: 'biggestBet',\n        label: 'Biggest Single Bet',\n        value: biggestBet ? Math.abs(biggestBet.amount) : 0,\n        type: 'currency',\n        suffix: biggestBet ? ` by ${biggestBet.playerName}` : ''\n      },\n      {\n        key: 'biggestWinner',\n        label: 'Biggest Winner',\n        value: biggestWinnerId ? playerNames[biggestWinnerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: biggestWinnerId ? ` (+${formatNumber(biggestWin)})` : ''\n      },\n      {\n        key: 'biggestLoser',\n        label: 'Biggest Loser',\n        value: biggestLoserId ? playerNames[biggestLoserId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: biggestLoserId ? ` (${formatNumber(biggestLoss)})` : ''\n      },\n      {\n        key: 'mostAggressive',\n        label: 'Most Aggressive Player',\n        value: mostAggressivePlayerId ? playerNames[mostAggressivePlayerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: mostAggressivePlayerId ? ` (${formatNumber(mostBets)} bets)` : ''\n      },\n      {\n        key: 'highestAvgBet',\n        label: 'Highest Average Bet',\n        value: highestAvgBetPlayerId ? playerNames[highestAvgBetPlayerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: highestAvgBetPlayerId ? ` (avg: ${formatNumber(Math.round(highestAvgBet))})` : ''\n      },\n      {\n        key: 'mostWinning',\n        label: 'Most Winning Player',\n        value: mostWinningPlayerId ? playerNames[mostWinningPlayerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: mostWinningPlayerId ? ` (${formatNumber(mostWins)} wins)` : ''\n      },\n      {\n        key: 'totalPenalties',\n        label: 'Total Penalties',\n        value: penalties.length,\n        type: 'number',\n        suffix: penalties.length > 0 ? ` (${formatNumber(totalPenaltyAmount)} coins)` : ''\n      },\n      {\n        key: 'unluckyPlayer',\n        label: 'Most Penalized Player',\n        value: mostPenaltiesPlayerId ? playerNames[mostPenaltiesPlayerId] || 'Unknown Player' : 'N/A',\n        type: 'text',\n        suffix: mostPenaltiesPlayerId ? ` (${formatNumber(mostPenalties)} penalties)` : ''\n      }\n    ];\n  }, [transactions, playerNames]);\n\n  // Helper function to format stat values based on their type\n  const formatStatValue = (type, value) => {\n    // Handle different types of values appropriately\n    if (type === 'currency') {\n      // Return CurrencyAmount component for currency values\n      return <CurrencyAmount amount={value} size=\"small\" />;\n    }\n    \n    if (type === 'percentage') {\n      return `${(value * 100).toFixed(1)}%`;\n    }\n    \n    if (type === 'number') {\n      return value.toLocaleString();\n    }\n    \n    // Default return for text and other types\n    return value;\n  };\n\n  return (\n    <div className={styles.tabContent}>\n      {gameStats.length === 0 ? (\n        <p className={styles.noDataMessage}>No statistics available for this game.</p>\n      ) : (\n        <div className={styles.statsGrid}>\n          {gameStats.map((stat) => (\n            <div key={stat.key} className={styles.statItem}>\n              <div className={styles.statLabel}>{stat.label}</div>\n              <div className={styles.statValue}>\n                {formatStatValue(stat.type, stat.value)}\n                {stat.suffix && <span className={styles.statSuffix}>{stat.suffix}</span>}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameStats;\n","import React, { useMemo, useState } from 'react';\nimport BaseModal from './common/BaseModal';\nimport styles from './styles/GameSummaryModal.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport TransactionDownloadButton from './common/TransactionDownloadButton';\nimport GameStats from './GameStats';\n\n/**\n * Game Summary Modal component that displays running scores and settle-up calculations\n * Can be used with active game data from GameContext or with historical game data passed directly\n */\nconst GameSummaryModal = ({ onClose, gameData }) => {\n  if (!gameData) {\n    return (\n      <BaseModal\n        title=\"Game Summary\"\n        onClose={onClose}\n        style={{ maxWidth: 800 }}\n      >\n        <div className={styles.loadingMessage}>Loading game data...</div>\n      </BaseModal>\n    );\n  }\n\n  // Extract data from gameData with clean access now that structure is consistent\n  const gameTransactions = gameData.gameTransactions || [];\n  const players = gameData.players || {};\n  const gameId = gameData.id || 'unknown';\n  const showPayoutsTab = gameData.settings?.isPrivate || false;\n  \n  // Ensure gameTransactions is always an array\n  const transactions = Array.isArray(gameTransactions) ? gameTransactions : [];\n  \n  // Get player names (including those who left)\n  const playerNames = {};\n  \n  // First add current players\n  Object.entries(players).forEach(([playerId, player]) => {\n    playerNames[playerId] = player.name;\n  });\n  \n  // Then add players who left but have transactions\n  transactions.forEach(tx => {\n    if (tx.playerId && !playerNames[tx.playerId]) {\n      playerNames[tx.playerId] = tx.playerName || 'Unknown Player';\n    }\n  });\n\n  // Use server-side calculated totals (active games have totals, historical games have it at top level)\n  const playerTotals = gameData.totals || {};\n  \n  // Calculate settle-up payments\n  const settleUpPayments = useMemo(() => {\n    // For simple 2-player games, just have the loser pay the winner directly\n    if (Object.keys(playerTotals).length === 2) {\n      const players = Object.entries(playerTotals);\n      const [player1Id, player1Total] = players[0];\n      const [player2Id, player2Total] = players[1];\n      \n      // If totals sum to zero (or close to it), one player pays the other\n      if (Math.abs(player1Total + player2Total) < 0.1) {\n        if (player1Total > 0) {\n          // Player 2 pays Player 1\n          return [{\n            from: player2Id,\n            fromName: playerNames[player2Id],\n            to: player1Id,\n            toName: playerNames[player1Id],\n            amount: Math.abs(player1Total)\n          }];\n        } else if (player2Total > 0) {\n          // Player 1 pays Player 2\n          return [{\n            from: player1Id,\n            fromName: playerNames[player1Id],\n            to: player2Id,\n            toName: playerNames[player2Id],\n            amount: Math.abs(player2Total)\n          }];\n        }\n      }\n    }\n    \n    // For more complex cases with more players\n    const payments = [];\n    \n    // Split into winners and losers\n    const losers = Object.entries(playerTotals)\n      .filter(([_, amount]) => amount < 0)\n      .map(([playerId, amount]) => ({\n        playerId,\n        playerName: playerNames[playerId] || 'Unknown Player',\n        amount: Math.abs(amount) // Convert to positive amount for easier calculation\n      }));\n    \n    const winners = Object.entries(playerTotals)\n      .filter(([_, amount]) => amount > 0)\n      .map(([playerId, amount]) => ({\n        playerId,\n        playerName: playerNames[playerId] || 'Unknown Player',\n        amount\n      }));\n    \n    // Sort by amount (descending)\n    losers.sort((a, b) => b.amount - a.amount);\n    winners.sort((a, b) => b.amount - a.amount);\n    \n    // Process each winner, starting with the biggest winner\n    while (winners.length > 0 && losers.length > 0) {\n      const winner = winners[0];\n      const loser = losers[0];\n      \n      // Calculate payment amount\n      const paymentAmount = Math.min(winner.amount, loser.amount);\n      \n      if (paymentAmount > 0.01) { // Only process meaningful payments\n        // Add payment\n        payments.push({\n          from: loser.playerId,\n          fromName: loser.playerName,\n          to: winner.playerId,\n          toName: winner.playerName,\n          amount: paymentAmount\n        });\n        \n\n        \n        // Update balances\n        winner.amount -= paymentAmount;\n        loser.amount -= paymentAmount;\n        \n        // Remove settled players or re-sort if they still have balance\n        if (winner.amount < 0.01) {\n          winners.shift();\n        }\n        \n        if (loser.amount < 0.01) {\n          losers.shift();\n        }\n      } else {\n        // No meaningful payment possible\n        break;\n      }\n    }\n    \n    return payments;\n  }, [playerTotals, playerNames]);\n\n  // Track the active tab - start with 'totals' tab\n  const [activeTab, setActiveTab] = useState('totals');\n\n  return (\n    <BaseModal\n      title={`Game Summary (${gameId})`}\n      onClose={onClose}\n      headerButtons={<TransactionDownloadButton gameState={gameData} />}\n      style={{ maxWidth: 800 }}\n    >\n      <div className={styles.settingsContainer}>\n          {/* Tab Bar Navigation */}\n          <div className={styles.tabsContainer}>\n            <button \n              className={`${styles.tabButton} ${activeTab === 'totals' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('totals')}\n              data-gamepad-focusable=\"true\"\n            >\n              Totals\n            </button>\n            \n            <button \n              className={`${styles.tabButton} ${activeTab === 'stats' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('stats')}\n              data-gamepad-focusable=\"true\"\n            >\n              Stats\n            </button>\n            \n            {showPayoutsTab && (\n              <button \n                className={`${styles.tabButton} ${activeTab === 'payouts' ? styles.activeTab : ''}`}\n                onClick={() => setActiveTab('payouts')}\n                data-gamepad-focusable=\"true\"\n              >\n                Payouts\n              </button>\n            )}\n          </div>\n\n          {/* Totals Tab Content */}\n          {activeTab === 'totals' && (\n            <div className={styles.tabContent}>\n              {Object.keys(playerTotals).length === 0 ? (\n                <p className={styles.noDataMessage}>No transactions recorded yet.</p>\n              ) : (\n                <div className={styles.totalsTable}>\n                  {Object.entries(playerTotals).map(([playerId, total]) => (\n                    <div key={playerId} className={styles.totalRow}>\n                      <span className={styles.playerName}>{playerNames[playerId] || 'Unknown Player'}</span>\n                      <span className={`${styles.totalAmount} ${total >= 0 ? styles.positive : styles.negative}`}>\n                        <CurrencyAmount amount={total} size=\"small\" />\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n          \n          {/* Stats Tab Content */}\n          {activeTab === 'stats' && (\n            <GameStats gameData={gameData} />\n          )}\n\n          {/* Payouts Tab Content - Only shown for private games and when selected */}\n          {activeTab === 'payouts' && showPayoutsTab && (\n            <div className={styles.tabContent}>\n              {settleUpPayments.length === 0 ? (\n                <p className={styles.noDataMessage}>No payments needed or no transactions recorded yet.</p>\n              ) : (\n                <div className={styles.settleUpTable}>\n                  {settleUpPayments.map((payment, index) => (\n                    <div key={index} className={styles.paymentRow}>\n                      <span className={styles.paymentText}>\n                        <span className={styles.playerName}>{payment.fromName}</span> pays{' '}\n                        <span className={styles.playerName}>{payment.toName}</span>\n                      </span>\n                      <span className={styles.paymentAmount}>\n                        <CurrencyAmount amount={payment.amount} size=\"small\" />\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n      </div>\n    </BaseModal>\n  );\n};\n\nexport default GameSummaryModal;\n","import React, { useState, useEffect, useContext } from 'react';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport UserAvatar from './UserAvatar';\nimport styles from './styles/Leaderboard.module.css';\nimport { API_URL } from '../config';\nimport UserDataContext from '../contexts/UserDataContext';\n\nconst Leaderboard = () => {\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [duration, setDuration] = useState('all');\n  const userDataContext = useContext(UserDataContext);\n\n  useEffect(() => {\n    fetchLeaderboard();\n  }, [duration]);\n\n  const fetchLeaderboard = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(`${API_URL}/leaderboard?duration=${duration}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch leaderboard');\n      }\n      \n      const data = await response.json();\n      setLeaderboard(data.leaderboard || []);\n      \n      // Prefetch all user data for better performance\n      if (userDataContext && data.leaderboard) {\n        const userIds = data.leaderboard.map(player => player.userId);\n        userDataContext.prefetchUsers(userIds);\n      }\n    } catch (err) {\n      console.error('Error fetching leaderboard:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRankDisplay = (rank) => {\n    if (rank === 1) return 'ðŸ¥‡';\n    if (rank === 2) return 'ðŸ¥ˆ';\n    if (rank === 3) return 'ðŸ¥‰';\n    return `#${rank}`;\n  };\n\n  return (\n    <div className={styles.leaderboardContainer}>\n      <div className={styles.leaderboardHeader}>\n        <div className={styles.durationSelector}>\n          <button \n            className={`${styles.durationButton} ${duration === 'all' ? styles.active : ''}`}\n            onClick={() => setDuration('all')}\n            data-gamepad-focusable=\"true\"\n          >\n            All Time\n          </button>\n          <button \n            className={`${styles.durationButton} ${duration === '30days' ? styles.active : ''}`}\n            onClick={() => setDuration('30days')}\n            data-gamepad-focusable=\"true\"\n          >\n            Last 30 Days\n          </button>\n        </div>\n      </div>\n\n      {loading ? (\n        <div className={styles.loadingMessage}>\n          <div className={styles.loadingSpinner}></div>\n          Loading leaderboard...\n        </div>\n      ) : error ? (\n        <div className={styles.errorMessage}>Error: {error}</div>\n      ) : leaderboard.length === 0 ? (\n        <div className={styles.emptyMessage}>\n          No players found for this time period.\n        </div>\n      ) : (\n        <div \n          className={styles.leaderboardList}\n          data-gamepad-scrollable=\"true\"\n          tabIndex=\"0\"\n        >\n          {leaderboard.map((player) => (\n            <div key={player.userId} className={styles.leaderboardRow}>\n              <div className={styles.rankCell}>\n                <span className={styles.rank}>{getRankDisplay(player.rank)}</span>\n              </div>\n              \n              <div className={styles.playerCell}>\n                <UserAvatar \n                  userId={player.userId}\n                  size=\"small\"\n                  showName={true}\n                  showTitle={true}\n                  namePosition=\"right\"\n                />\n              </div>\n              \n              <div className={styles.statsCell}>\n                <CurrencyAmount amount={player.totalProfit} size=\"small\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Leaderboard;","import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport BaseModal from './common/BaseModal';\nimport GameSummaryModal from './GameSummaryModal';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport Leaderboard from './Leaderboard';\nimport styles from './styles/PlayerStatsModal.module.css';\nimport { API_URL } from '../config';\n\nconst PlayerStatsModal = ({ onClose }) => {\n  const { token } = useAuth();\n  const [activeTab, setActiveTab] = useState('leaderboard'); // 'leaderboard', 'stats', or 'history'\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [historyData, setHistoryData] = useState({ games: [], pagination: {} });\n  const [currentPage, setCurrentPage] = useState(0);\n  const [showGameSummary, setShowGameSummary] = useState(false);\n  const [selectedGameData, setSelectedGameData] = useState(null);\n  const [lifetimeStats, setLifetimeStats] = useState(null);\n  const [statsLoading, setStatsLoading] = useState(true);\n  const [statsError, setStatsError] = useState(null);\n  const pageSize = 5;\n\n  useEffect(() => {\n    const fetchGameHistory = async () => {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        const response = await fetch(`${API_URL}/games/history?pageSize=${pageSize}&pageNumber=${currentPage}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch game history');\n        }\n        \n        const data = await response.json();\n        setHistoryData(data);\n      } catch (err) {\n        console.error('Error fetching game history:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchGameHistory();\n  }, [token, currentPage]);\n  \n  // Fetch lifetime stats from the dedicated stats endpoint\n  useEffect(() => {\n    const fetchLifetimeStats = async () => {\n      setStatsLoading(true);\n      setStatsError(null);\n      \n      try {\n        const response = await fetch(`${API_URL}/me/stats`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch lifetime stats');\n        }\n        \n        const data = await response.json();\n        setLifetimeStats(data.stats);\n      } catch (err) {\n        console.error('Error fetching lifetime stats:', err);\n        setStatsError(err.message);\n      } finally {\n        setStatsLoading(false);\n      }\n    };\n    \n    fetchLifetimeStats();\n  }, [token]);\n\n  const handlePreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleNextPage = () => {\n    if (historyData.pagination && \n        historyData.games.length === pageSize) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Unknown';\n    \n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n  \n  // Format stat label from camelCase to Title Case with spaces\n  const formatStatLabel = (key) => {\n    // Insert space before capital letters and uppercase the first letter\n    const formatted = key\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/^./, (str) => str.toUpperCase());\n    \n    return formatted;\n  };\n  \n  // Format stat value based on the explicit type or the value itself\n  const formatStatValue = (type, value) => {\n    // Handle different types of values appropriately\n    if (typeof value === 'number') {\n      // Format based on explicit type if provided\n      if (type === 'currency') {\n        // Return CurrencyAmount component for currency values\n        return <CurrencyAmount amount={value.toFixed(2)} size=\"small\" />;\n      }\n      \n      if (type === 'percentage') {\n        return `${(value * 100).toFixed(1)}%`;\n      }\n      \n      // Just return the number for counts\n      return value.toLocaleString();\n    }\n    \n    // For boolean values\n    if (typeof value === 'boolean') {\n      return value ? 'Yes' : 'No';\n    }\n    \n    // For dates - only format as date if explicitly typed as 'date' or is an actual Date object\n    if (type === 'date' || value instanceof Date) {\n      return formatDate(value);\n    }\n    \n    // Handle numeric types explicitly\n    if (type === 'number') {\n      return Number(value).toLocaleString();\n    }\n    \n    // Default toString for anything else\n    return String(value);\n  };\n  \n  // Get the round count from the game data\n  const getRoundCount = (game) => {\n    return game.roundCount || 0;\n  };\n\n  const handleGameClick = (gameId) => {\n    // Find the selected game in our existing data\n    const selectedGame = historyData.games.find(game => game.id === gameId);\n    if (selectedGame) {\n      // Historical games now have the same structure as active games\n      setSelectedGameData(selectedGame);\n      setShowGameSummary(true);\n    }\n  };\n\n  return (\n    <>\n      <BaseModal title=\"Player Stats\" onClose={onClose} style={{ maxWidth: 800, height: '90ÃŸvh' }}>\n        <div className={baseModalStyles.settingsContainer}>\n          {/* Tab Bar Navigation */}\n          <div className={styles.tabsContainer}>\n            <button \n              className={`${styles.tabButton} ${activeTab === 'leaderboard' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('leaderboard')}\n              data-gamepad-focusable=\"true\"\n            >\n              Leaderboard\n            </button>\n            <button \n              className={`${styles.tabButton} ${activeTab === 'stats' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('stats')}\n              data-gamepad-focusable=\"true\"\n            >\n              Lifetime Stats\n            </button>\n            <button \n              className={`${styles.tabButton} ${activeTab === 'history' ? styles.activeTab : ''}`}\n              onClick={() => setActiveTab('history')}\n              data-gamepad-focusable=\"true\"\n            >\n              Game History\n            </button>\n          </div>\n\n          {/* Leaderboard Tab Content */}\n          {activeTab === 'leaderboard' && (\n            <div className={styles.tabContent}>\n              <Leaderboard />\n            </div>\n          )}\n\n          {/* Lifetime Stats Tab Content */}\n          {activeTab === 'stats' && (\n            <div className={styles.tabContent}>\n              {statsLoading ? (\n                <div className={styles.loadingMessage}>\n                  <div className={styles.loadingSpinner}></div>\n                  Loading your lifetime stats...\n                </div>\n              ) : statsError ? (\n                <div className={styles.errorMessage}>Error: {statsError}</div>\n              ) : !lifetimeStats || lifetimeStats.length === 0 ? (\n                <div className={styles.statsPlaceholder}>\n                  <p>No lifetime statistics available.</p>\n                </div>\n              ) : (\n                <div \n                  className={styles.statsGrid}\n                  data-gamepad-scrollable=\"true\"\n                  tabIndex=\"0\"\n                >\n                  {lifetimeStats.map((stat, index) => (\n                    <div key={stat.key || `stat-${index}`} className={styles.statItem}>\n                      <div className={styles.statLabel}>{stat.label}</div>\n                      <div className={styles.statValue}>\n                        {formatStatValue(stat.type, stat.value)}\n                        {stat.suffix && <span className={styles.statSuffix}>{stat.suffix}</span>}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Game History Tab Content */}\n          {activeTab === 'history' && (\n            <div className={styles.tabContent}>\n              {loading ? (\n                <div className={styles.loadingMessage}>\n                  <div className={styles.loadingSpinner}></div>\n                  Loading your game history...\n                </div>\n              ) : error ? (\n                <div className={styles.errorMessage}>Error: {error}</div>\n              ) : historyData.games.length === 0 ? (\n                <div className={styles.statsPlaceholder}>\n                  <p>No games found in your history.</p>\n                </div>\n              ) : (\n                <>\n                  <div \n                    className={styles.historyTable}\n                    data-gamepad-scrollable=\"true\"\n                    tabIndex=\"0\"\n                  >\n                    <div className={styles.tableHeader}>\n                      <div className={styles.gameNameHeader}>Game</div>\n                      <div className={styles.playerCountHeader}>Players</div>\n                      <div className={styles.roundsHeader}>Rounds</div>\n                      <div className={styles.endDateHeader}>Ended</div>\n                    </div>\n                    \n                    {historyData.games.map((game) => (\n                      <div key={game.id} className={styles.historyRow}>\n                        <div className={styles.gameNameCell}>\n                          <span \n                            className={styles.gameNameLink} \n                            onClick={() => handleGameClick(game.id)}\n                            tabIndex=\"0\"\n                            role=\"button\"\n                            data-gamepad-focusable=\"true\"\n                          >\n                            #{game.id}\n                          </span>\n                        </div>\n                        <div className={styles.playerCountCell}>{game.totalPlayerCount}</div>\n                        <div className={styles.roundsCell}>{getRoundCount(game)}</div>\n                        <div className={styles.endDateCell}>{formatDate(game.endedAt)}</div>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className={styles.pageInfo}>\n                    <button \n                      onClick={handlePreviousPage} \n                      disabled={currentPage === 0}\n                      className={styles.pageButton}\n                      aria-label=\"Previous page\"\n                      data-gamepad-focusable=\"true\"\n                    >\n                      &larr;\n                    </button>\n                    \n                    Page {currentPage + 1}\n                    {historyData.pagination && historyData.pagination.total ? \n                      ` of ${Math.ceil(historyData.pagination.total / pageSize)}` : ''}\n                    \n                    <button \n                      onClick={handleNextPage} \n                      disabled={!historyData.pagination || historyData.games.length < pageSize}\n                      className={styles.pageButton}\n                      aria-label=\"Next page\"\n                      data-gamepad-focusable=\"true\"\n                    >\n                      &rarr;\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </BaseModal>\n      \n      {showGameSummary && selectedGameData && (\n        <GameSummaryModal \n          gameData={selectedGameData}\n          onClose={() => {\n            setShowGameSummary(false);\n            setSelectedGameData(null);\n          }} \n        />\n      )}\n      \n\n    </>\n  );\n};\n\n\n\nexport default PlayerStatsModal;\n","import React, { useState, useEffect } from 'react';\nimport BarChartIcon from '../icons/BarChartIcon';\nimport PlayerStatsModal from '../PlayerStatsModal';\nimport IconButton from './IconButton';\n\nconst PlayerStatsButton = ({ onModalStateChange, ...props }) => {\n  const [isStatsOpen, setIsStatsOpen] = useState(false);\n\n  const openStats = () => {\n    setIsStatsOpen(true);\n  };\n\n  const closeStats = () => {\n    setIsStatsOpen(false);\n  };\n\n  // Notify parent when modal state changes\n  useEffect(() => {\n    if (onModalStateChange) {\n      onModalStateChange(isStatsOpen);\n    }\n  }, [isStatsOpen, onModalStateChange]);\n\n  return (\n    <>\n      <IconButton\n        onClick={openStats}\n        icon={<BarChartIcon color=\"white\" size={20} />}\n        aria-label=\"Open Player Stats\"\n        variant=\"stats\"\n        title=\"Player Stats\"\n        {...props}\n      />\n      {/* Render the modal conditionally */}\n      {isStatsOpen && <PlayerStatsModal isOpen={isStatsOpen} onClose={closeStats} />}\n    </>\n  );\n};\n\nexport default PlayerStatsButton;\n","import React from 'react';\n\nconst StoreIcon = ({ className = 'h-6 w-6', ...props }) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth={1.8}\n      stroke=\"currentColor\"\n      className={className}\n      {...props}\n    >\n      {/* Shopping bag */}\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M15.75 10.5V6a3.75 3.75 0 10-7.5 0v4.5m-2.25 9h12a1.5 1.5 0 001.5-1.5v-6a1.5 1.5 0 00-1.5-1.5h-12a1.5 1.5 0 00-1.5 1.5v6a1.5 1.5 0 001.5 1.5z\"\n      />\n    </svg>\n  );\n};\n\nexport default StoreIcon;","import React from 'react';\nimport StoreIcon from './icons/StoreIcon';\nimport IconButton from './common/IconButton';\n\nconst StoreButton = ({ onClick, ...props }) => {\n  return (\n    <IconButton\n      onClick={onClick}\n      icon={<StoreIcon style={{ color: 'white', width: 20, height: 20 }} />}\n      aria-label=\"Store\"\n      variant=\"store\"\n      title=\"Store\"\n      {...props}\n    />\n  );\n};\n\nexport default StoreButton;","import React from 'react';\n\n/**\n * Question mark icon component for rules button\n * @param {Object} props - Component props\n * @param {string} props.color - Color of the icon (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst QuestionIcon = ({ color = 'currentColor', size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    >\n      {/* Material Design style question mark icon */}\n      <circle cx=\"12\" cy=\"12\" r=\"10\" />\n      <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\n      <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"17.01\" />\n    </svg>\n  );\n};\n\nexport default QuestionIcon;\n","import React from 'react';\nimport BaseModal from './common/BaseModal';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport { ICONS } from '../constants';\n\n/**\n * Game Rules Modal that displays the rules of the game\n * @param {Object} props - Component props\n * @param {function} props.onClose - Function to call when the modal is closed\n */\nconst GameRulesModal = ({ onClose }) => {\n  return (\n    <BaseModal\n      title=\"Game Rules\"\n      onClose={onClose}\n      style={{ maxWidth: 600 }}\n    >\n      <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>Objective</div>\n          <div className={baseModalStyles.settingDescription}>\n            The goal is to bet on whether the third card will have a value that falls \"in between\" the first two cards.\n          </div>\n        </div>\n        <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>Card Values</div>\n          <div className={baseModalStyles.settingDescription}>\n            Cards are valued numerically: 2-10 as face value, Jack = 11, Queen = 12, King = 13, and Ace = 1 or 14 (player's choice).\n          </div>\n        </div>\n        <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>Game Flow</div>\n          <div className={baseModalStyles.settingDescription}>\n            <ol style={{ paddingLeft: 20, margin: 0 }}>\n              <li>Each player antes up to join the round.</li>\n              <li>The player to the right of the dealer goes first.</li>\n              <li>Two cards are dealt face up.</li>\n              <li>Player decides whether to bet or pass.</li>\n              <li>If a bet is placed, the third card is revealed.</li>\n              <li>Bets are settled.</li>\n              <li>Next player goes.</li>\n              <li>If the pot is empty, players ante up again to start a new round.</li>\n            </ol>\n          </div>\n        </div>\n        <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>Betting</div>\n          <div className={baseModalStyles.settingDescription}>\n            If you think the third card will fall between the first two cards, you can bet up to the pot amount.<br/>\n            If you win, you receive the amount of your bet from the pot.<br/>\n            If you lose, your bet is added to the pot.\n          </div>\n        </div>\n        <div style={{ marginBottom: 22 }}>\n          <div className={baseModalStyles.sectionHeader}>POT Button</div>\n          <div className={baseModalStyles.settingDescription}>\n            The POT button allows you to bet the entire pot amount at once for maximum winnings.\n          </div>\n        </div>\n        <div style={{ marginBottom: 6 }}>\n          <div className={baseModalStyles.sectionHeader}>Special Rules</div>\n          <div className={baseModalStyles.settingDescription}>\n            <ul style={{ paddingLeft: 20, margin: 0 }}>\n              <li><strong>Ace Choice:</strong> If the first card is an Ace, you can choose to play it as low (1) or high (14).</li>\n              <li><strong>Second Chance:</strong> If the first two cards are the same, you can chose to ante again to see another hand.</li>\n            </ul>\n          </div>\n        </div>\n    </BaseModal>\n  );\n};\n\nexport default GameRulesModal;","import React, { useState, useEffect } from 'react';\nimport IconButton from './IconButton';\nimport QuestionIcon from '../icons/QuestionIcon';\nimport GameRulesModal from '../GameRulesModal';\n\n/**\n * A standardized rules button component that opens the game rules modal\n * \n * @param {Object} props Component props\n * @param {string} props.title Custom tooltip text (optional)\n * @param {function} props.onModalStateChange Callback when modal state changes\n */\nconst RulesButton = ({ \n  title = \"View Game Rules\",\n  onModalStateChange,\n  ...restProps \n}) => {\n  const [showRules, setShowRules] = useState(false);\n\n  const openRules = () => {\n    setShowRules(true);\n  };\n\n  const closeRules = () => {\n    setShowRules(false);\n  };\n\n  // Notify parent when modal state changes\n  useEffect(() => {\n    if (onModalStateChange) {\n      onModalStateChange(showRules);\n    }\n  }, [showRules, onModalStateChange]);\n\n  return (\n    <>\n      <IconButton\n        icon={<QuestionIcon color=\"white\" size={20} />}\n        title={title}\n        onClick={openRules}\n        variant=\"default\"\n        {...restProps}\n      />\n      \n      {showRules && <GameRulesModal onClose={closeRules} />}\n    </>\n  );\n};\n\nexport default RulesButton;\n","import React, { useRef, useEffect } from 'react';\nimport { useVirtualKeyboardContext } from '../contexts/VirtualKeyboardContext';\n\n/**\n * Enhanced input component that automatically shows virtual keyboard for gamepad users\n * Drop-in replacement for regular input elements\n */\nconst GamepadInput = ({ \n  type = 'text',\n  title = '',\n  ...props \n}) => {\n  const inputRef = useRef(null);\n  const { enhanceInput } = useVirtualKeyboardContext();\n  \n  useEffect(() => {\n    if (inputRef.current) {\n      const cleanup = enhanceInput(inputRef.current, type, title);\n      return cleanup;\n    }\n  }, [enhanceInput, type, title]);\n  \n  return (\n    <input\n      ref={inputRef}\n      type={type}\n      data-gamepad-focusable=\"true\"\n      {...props}\n    />\n  );\n};\n\nexport default GamepadInput;","/**\n * Store Service for handling coin purchases and product offerings\n * Manages API calls for purchasing game currency and retrieving available products\n */\nclass StoreService {\n  constructor() {\n    // Get API URL from environment or use localhost as fallback\n    this.API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';\n    this.baseURL = `${this.API_URL}/purchases`;\n  }\n\n  /**\n   * Get the authorization header for API requests\n   * @returns {Object} Headers object with authorization\n   */\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    };\n  }\n\n  /**\n   * Get product offerings by type\n   * @param {string} offeringType - Type of offering (e.g., 'coin')\n   * @returns {Promise<Array>} Array of product offerings\n   */\n  async getOfferingsByType(offeringType) {\n    try {\n      const url = `${this.baseURL}/offerings?offeringType=${encodeURIComponent(offeringType)}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: this.getAuthHeaders(),\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch offerings`);\n      }\n\n      const data = await response.json();\n      return data.offerings || [];\n    } catch (error) {\n      console.error('[PURCHASE_SERVICE] Error fetching offerings:', error);\n      throw new Error(`Failed to fetch product offerings: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get all available product offerings\n   * @returns {Promise<Array>} Array of all product offerings\n   */\n  async getAllOfferings() {\n    try {\n      const response = await fetch(`${this.baseURL}/offerings`, {\n        method: 'GET',\n        headers: this.getAuthHeaders(),\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: Failed to fetch offerings`);\n      }\n\n      const data = await response.json();\n      return data.offerings || [];\n    } catch (error) {\n      console.error('[PURCHASE_SERVICE] Error fetching all offerings:', error);\n      throw new Error(`Failed to fetch product offerings: ${error.message}`);\n    }\n  }\n\n  /**\n   * Process a purchase\n   * @param {string} productId - ID of the product to purchase\n   * @returns {Promise<Object>} Purchase result\n   */\n  async processPurchase(productId) {\n    try {\n      if (!productId) {\n        throw new Error('Product ID is required');\n      }\n\n      const response = await fetch(`${this.baseURL}/process`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        credentials: 'include',\n        body: JSON.stringify({ productId })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: Purchase failed`);\n      }\n\n      const result = await response.json();\n      \n      // Log successful purchase for debugging\n      console.log('[PURCHASE_SERVICE] Purchase completed:', {\n        productId,\n        coinsAdded: result.coinsAdded,\n        newBalance: result.newBalance\n      });\n\n      return result;\n    } catch (error) {\n      console.error('[PURCHASE_SERVICE] Error processing purchase:', error);\n      throw new Error(`Purchase failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get coin offerings specifically\n   * @returns {Promise<Array>} Array of coin product offerings\n   */\n  async getCoinOfferings() {\n    return this.getOfferingsByType('coin');\n  }\n}\n\n// Create a singleton instance\nconst storeService = new StoreService();\n\nexport default storeService;","import React, { useState, useEffect } from 'react';\nimport BaseModal from './common/BaseModal';\nimport baseModalStyles from './common/BaseModal.module.css';\nimport styles from './styles/StoreModal.module.css';\nimport storeService from '../services/StoreService';\n\nconst StoreModal = ({ onClose }) => {\n  const [activeTab, setActiveTab] = useState('coins');\n  const [coinOfferings, setCoinOfferings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [purchasing, setPurchasing] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadCoinOfferings();\n  }, []);\n\n  const loadCoinOfferings = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const offerings = await storeService.getCoinOfferings();\n      setCoinOfferings(offerings);\n    } catch (err) {\n      console.error('Failed to load coin offerings:', err);\n      setError('Failed to load products. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePurchase = async (productId) => {\n    try {\n      setPurchasing(productId);\n      setError(null);\n      \n      const result = await storeService.processPurchase(productId);\n      \n      // Show success message or handle success\n      console.log('Purchase successful:', result);\n      \n      // Close modal on successful purchase\n      onClose();\n      \n    } catch (err) {\n      console.error('Purchase failed:', err);\n      setError(err.message || 'Purchase failed. Please try again.');\n    } finally {\n      setPurchasing(null);\n    }\n  };\n\n  const formatPrice = (price) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(price);\n  };\n\n  const formatCoins = (amount) => {\n    return new Intl.NumberFormat('en-US').format(amount);\n  };\n\n  if (loading) {\n    return (\n      <BaseModal title=\"Store\" onClose={onClose} style={{ maxWidth: 800, maxHeight: '80vh' }}>\n        <div style={{ textAlign: 'center', padding: '2rem', color: '#a0b9d6' }}>Loading products...</div>\n      </BaseModal>\n    );\n  }\n\n  return (\n    <BaseModal title=\"Store\" onClose={onClose} style={{ maxWidth: 800, maxHeight: '80vh' }}>\n      {/* Tab Navigation */}\n      <div className={styles.tabsContainer}>\n        <button\n          className={`${styles.tabButton} ${activeTab === 'coins' ? styles.activeTab : ''}`}\n          onClick={() => setActiveTab('coins')}\n          data-gamepad-focusable=\"true\"\n        >\n          Coin Packs\n        </button>\n      </div>\n\n      {/* Error Message */}\n      {error && (\n        <div style={{\n          marginBottom: '1rem',\n          padding: '0.75rem',\n          backgroundColor: 'rgba(231, 76, 60, 0.1)',\n          border: '1px solid #e74c3c',\n          borderRadius: '8px',\n          color: '#ffb3b3'\n        }}>\n          {error}\n        </div>\n      )}\n\n      {/* Coin Packs Tab Content */}\n      {activeTab === 'coins' && (\n        <div>\n          <div className={baseModalStyles.sectionHeader}>Available Coin Packs</div>\n          \n          {coinOfferings.length === 0 ? (\n            <div style={{ textAlign: 'center', padding: '2rem', color: '#a0b9d6' }}>\n              No coin packs available at the moment.\n            </div>\n          ) : (\n            <div style={{ \n              display: 'grid', \n              gap: '1rem', \n              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))' \n            }}>\n              {coinOfferings.map((offering) => (\n                <div\n                  key={offering.id}\n                  className={baseModalStyles.settingItem}\n                  style={{\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    textAlign: 'center',\n                    padding: '1.5rem',\n                    background: 'rgba(255, 255, 255, 0.08)',\n                    borderRadius: '12px',\n                    minHeight: '280px'\n                  }}\n                >\n                  {/* Product Image */}\n                  <div style={{ \n                    display: 'flex', \n                    justifyContent: 'center', \n                    alignItems: 'center',\n                    height: '80px',\n                    marginBottom: '1rem' \n                  }}>\n                    {offering.imageUrl && (\n                      <img\n                        src={offering.imageUrl}\n                        alt={offering.name}\n                        style={{\n                          width: '64px',\n                          height: '64px',\n                          objectFit: 'contain'\n                        }}\n                        onError={(e) => {\n                          e.target.style.display = 'none';\n                        }}\n                      />\n                    )}\n                  </div>\n                  \n                  {/* Product Info */}\n                  <div style={{ \n                    flex: '1',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    textAlign: 'center',\n                    marginBottom: '1rem' \n                  }}>\n                    <h3 style={{\n                      fontSize: '1.25rem',\n                      fontWeight: 'bold',\n                      color: '#FFD700',\n                      margin: '0 0 0.5rem 0',\n                      textAlign: 'center'\n                    }}>\n                      {formatCoins(offering.coinAmount)} Coins\n                    </h3>\n                    <p style={{\n                      color: '#a0b9d6',\n                      fontSize: '0.875rem',\n                      margin: '0 0 0.75rem 0',\n                      textAlign: 'center',\n                      lineHeight: '1.4'\n                    }}>\n                      {offering.description}\n                    </p>\n                    <div style={{\n                      fontSize: '1.5rem',\n                      fontWeight: 'bold',\n                      color: '#bcdcff',\n                      textAlign: 'center'\n                    }}>\n                      {formatPrice(offering.priceUSD)}\n                    </div>\n                  </div>\n                  \n                  {/* Purchase Button */}\n                  <button\n                    onClick={() => handlePurchase(offering.id)}\n                    disabled={purchasing === offering.id}\n                    className={baseModalStyles.primaryButton}\n                    style={{\n                      width: '100%',\n                      opacity: purchasing === offering.id ? 0.6 : 1,\n                      cursor: purchasing === offering.id ? 'not-allowed' : 'pointer'\n                    }}\n                    data-gamepad-focusable=\"true\"\n                  >\n                    {purchasing === offering.id ? (\n                      <span style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                        <div className={styles.loadingSpinner} style={{\n                          marginRight: '0.5rem'\n                        }}></div>\n                        Processing...\n                      </span>\n                    ) : (\n                      'Purchase'\n                    )}\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </BaseModal>\n  );\n};\n\nexport default StoreModal;"],"names":["useMemo","jsx","styles","jsxs","useState","sizeClass","containerClass","useRef","useEffect","Fragment","players","useContext"],"mappings":"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"}