{"version":3,"file":"GameRoom-CWYEpZue.js","sources":["../../src/constants.js","../../src/contexts/GameContext.jsx","../../src/components/icons/ExitIcon.jsx","../../src/components/common/LeaveButton.jsx","../../src/components/GameHeader.jsx","../../src/components/icons/ArrowIcon.jsx","../../src/components/CardDisplay.jsx","../../src/components/PotButton.jsx","../../src/components/BettingPanel.jsx","../../src/components/PlayerList.jsx","../../src/components/PotDisplay.jsx","../../src/components/DeckDisplay.jsx","../../src/components/AutoAnteToggle.jsx","../../src/components/AnteControls.jsx","../../src/components/ResultsPanel.jsx","../../src/components/AceChoicePanel.jsx","../../src/components/SecondChancePanel.jsx","../../src/components/GameLog.jsx","../../src/components/EmojiReactions.jsx","../../src/components/GameScreen.jsx","../../src/components/common/PasswordPromptModal.jsx","../../src/components/GameRoom.jsx"],"sourcesContent":["/**\n * Frontend Constants - Game logic and UI constants for the web client\n * \n * ⚠️  SHARED CONSTANTS - Keep synchronized with backend! ⚠️\n * Some constants must match @am-games-api/src/constants.js\n * Any changes to shared constants should be reflected in the backend constants file.\n */\n\n// ========================================\n// SHARED CONSTANTS (Frontend + Backend)\n// ========================================\n\n/**\n * Game phase constants for consistent phase management across the application\n * 🔄 SHARED: Must match backend GamePhases\n */\nexport const GamePhases = {\n  // Initial phase when waiting for players and anteeing up\n  WAITING: 'waiting',\n  \n  // Phase when cards are being dealt\n  DEALING: 'dealing',\n  \n  // Phase when players are betting\n  BETTING: 'betting',\n  \n  // Phase when middle card is being revealed\n  REVEALING: 'revealing',\n  \n  // Phase when round results are shown\n  RESULTS: 'results'\n};\n\n/**\n * Core game configuration constants\n * 🔄 SHARED: Must match backend GAME_CONSTANTS\n */\nexport const GAME_CONSTANTS = {\n  // Game configuration\n  ANTE_AMOUNT: 1,  // Fixed ante amount - always $1\n  STARTING_BALANCE: 2000,  // Starting player balance\n  FULL_DECK_SIZE: 52,  // Number of cards in a full deck\n  RECONNECTION_TIMEOUT: 30000,  // Time window for player reconnection (30 seconds)\n  MAX_SEATS: 16, // Maximum number of seats/players allowed in a game\n  \n  // Timer durations (in milliseconds)\n  // 🔄 SHARED: Backend uses these for game logic, frontend for UI timers\n  TIMERS: {\n    DEAL_FIRST_CARD_DELAY: 1000,    // Delay before dealing the first card (1 second)\n    DEAL_SECOND_CARD_DELAY: 1000,   // Delay before dealing the second card (1 second)\n    DEAL_THIRD_CARD_DELAY: 2000,    // Delay before revealing the third card (2 seconds)\n    DEALING_DURATION: 3000,         // Total duration of dealing phase (3 seconds)\n    BETTING_DURATION: 30000,        // Duration for betting phase (30 seconds)\n    DECISION_DURATION: 15000,       // Duration for ace and second chance decisions (15 seconds)\n    REVEALING_DURATION: 3000,       // Duration for revealing phase\n    RESULTS_DURATION: 5000,         // Duration to show results before moving to next round (5 seconds)\n    PLAYER_INACTIVITY_TIMEOUT: 30000//Timeout for inactive players in WAITING phase\n  }\n};\n\n// ========================================\n// FRONTEND-ONLY CONSTANTS\n// ========================================\n\n/**\n * UI Icons used throughout the application\n * 🎨 FRONTEND-ONLY: These are only used for UI display\n */\nexport const ICONS = {\n  POT: '🍯',\n  DEALER: '🃏',\n  CHECK: '✓',\n  DECK: '🃏'\n};\n\n// Export specific commonly used constants for convenience\nexport const { TIMERS, ANTE_AMOUNT, STARTING_BALANCE, FULL_DECK_SIZE, RECONNECTION_TIMEOUT, MAX_SEATS } = GAME_CONSTANTS;","import React, { createContext, useState, useContext, useEffect, useCallback, useRef } from 'react';\nimport { useSocket } from './SocketContext.jsx';\nimport { useAuth } from './AuthContext.jsx';\nimport soundService from '../services/SoundService';\n\n// Create context\nconst GameContext = createContext();\n\n// Custom hook to use the game context\nexport const useGameContext = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGameContext must be used within a GameProvider');\n  }\n  return context;\n};\n\nexport const GameProvider = ({ children, gameId, initialGameState = null }) => {\n  // Get socket from socket context\n  const { socket, error: socketError } = useSocket();\n  \n  // Get user from auth context\n  const { user } = useAuth();\n  \n  // Game-specific state - we only need to track the full gameState object and error\n  /** @type {[GameState|null, React.Dispatch<React.SetStateAction<GameState|null>>]} */\n  const [gameState, setGameState] = useState(initialGameState);\n  \n  // Keep track of previous players to detect joins/leaves\n  const prevPlayersRef = useRef({});\n  \n  // Keep track of previous active player to detect turn changes\n  const prevActivePlayerRef = useRef(null);\n  \n  /** @type {[string|null, React.Dispatch<React.SetStateAction<string|null>>]} */\n  const [error, setError] = useState(null);\n\n  // Function to explicitly clear the provider's error state\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  // Initialize with socket error if any\n  useEffect(() => {\n    if (socketError) {\n      setError(socketError);\n    }\n  }, [socketError]);\n  // Set up game-specific event handlers\n  useEffect(() => {\n    if (!socket) return;\n\n    // Handle game reconnection\n    socket.on('gameReconnected', (data) => {\n      console.log(`[Game] Reconnected to game: ${data.gameId}`, data.game);\n      \n      // Update game state with the full state from the server\n      setGameState(data.game);\n      \n      // Log reconnection with user ID from AuthContext\n      console.log(`[Game] Successfully reconnected as user ID: ${user?.id}`);\n      \n      // Clear any errors\n      setError(null);\n\n      // CRITICAL: Force a refresh of the player's game state to ensure betting works\n      if (data.game && data.game.id) {\n        // Small delay to ensure the state is fully updated\n        setTimeout(() => {\n          console.log(`[Game] Requesting fresh game state after reconnection`);\n          socket.emit('getGameState', { gameId: data.game.id });\n        }, 500);\n      }\n    });\n    \n    // Handle receiving updated game state\n    socket.on('gameState', (data) => {\n      if (data && data.id) { \n        // Restore check to prevent setting identical state\n        if (JSON.stringify(gameState) !== JSON.stringify(data)) {\n          // Check if it's now the player's turn and play alert sound if needed\n          if (data.currentPlayerId && user?.id) {\n            const isMyTurn = data.currentPlayerId === user.id;\n            const wasPreviouslyMyTurn = prevActivePlayerRef.current === user.id;\n            \n            // Only play sound if it wasn't my turn before but now it is\n            if (isMyTurn && !wasPreviouslyMyTurn) {\n              soundService.play('ui.alert');\n            }\n            \n            // Update the previous active player reference\n            prevActivePlayerRef.current = data.currentPlayerId;\n          }\n          \n          setGameState(data);\n          clearError(); // Clear any previous context errors on successful state update\n        } \n      } else {\n      }\n    });\n    \n    // Game-specific error handling\n    socket.on('gameError', (message) => {\n      console.error('Game error:', message);\n      setError(message);\n    });\n    \n    // Clean up game-specific event listeners\n    return () => {\n      socket.off('gameReconnected');\n      socket.off('gameState');\n      socket.off('gameError');\n    };\n  }, [socket]);\n\n  // Game-specific actions\n  const placeBet = useCallback((amount) => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('placeBet', { bet: amount, gameId });\n    } catch (err) {\n      console.error('Error placing bet:', err);\n      setError('Failed to place bet. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  const payAnte = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('payAnte', { gameId });\n    } catch (err) {\n      console.error('Error paying ante:', err);\n      setError('Failed to pay ante. Please try again.');\n    }\n  }, [socket, gameId]);\n\n  const dealCards = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('dealCards', { gameId });\n    } catch (err) {\n      console.error('Error dealing cards:', err);\n      setError('Failed to deal cards. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  const revealMiddleCard = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('revealMiddleCard', { gameId });\n    } catch (err) {\n      console.error('Error revealing middle card:', err);\n      setError('Failed to reveal middle card. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  const nextRound = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('nextRound', { gameId });\n    } catch (err) {\n      console.error('Error moving to next round:', err);\n      setError('Failed to move to next round. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  // Player ready function (for paying ante)\n  const playerReady = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      // Server is listening for 'ready' event, not 'playerReady'\n      socket.emit('ready');\n    } catch (err) {\n      console.error('Error setting player ready:', err);\n      setError('Failed to set player ready. Please try again.');\n    }\n  }, [socket, gameId]);\n  \n  // Player unready function (withdraw ante)\n  const playerUnready = useCallback(() => {\n    if (!socket || !gameId) return;\n    \n    try {\n      socket.emit('unready');\n    } catch (err) {\n      console.error('Error setting player unready:', err);\n      setError('Failed to set player unready. Please try again.');\n    }\n  }, [socket, gameId]);\n\n  /**\n   * @typedef {Object} GameContextValue\n   * @property {GameState|null} gameState - The complete game state\n   * @property {string|null} error - Any error message \n   * @property {(amount: number) => void} placeBet - Function to place a bet\n   * @property {() => void} payAnte - Function to pay the ante\n   * @property {() => void} playerReady - Function to set player ready (pay ante)\n   * @property {() => void} playerUnready - Function to set player unready (withdraw ante)\n   * @property {() => void} dealCards - Function to deal cards\n   * @property {() => void} revealMiddleCard - Function to reveal the middle card\n   * @property {() => void} nextRound - Function to move to the next round\n   * @property {() => void} clearError - Function to clear any error\n   * @property {string|null} gameId - Current game ID\n   */\n\n  /** @type {GameContextValue} */\n  const value = {\n    // Game state - just provide the complete gameState object\n    gameState,\n    error,\n    gameId,\n    \n    // Game actions\n    placeBet,\n    payAnte,\n    playerReady,\n    playerUnready,\n    dealCards,\n    revealMiddleCard,\n    nextRound,\n    // Helper methods\n    clearError,\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n};\n\n// Named exports for specific pieces of state/actions\nexport const useGameState = () => {\n  const { gameState, players, currentPlayer, cards, gamePhase, dealerName, deckNumber, remainingCards, error } = useGameContext();\n  return { gameState, players, currentPlayer, cards, gamePhase, dealerName, deckNumber, remainingCards, error };\n};\n\nexport const useGameActions = () => {\n  const { placeBet, payAnte, dealCards, revealMiddleCard, nextRound, clearError } = useGameContext();\n  return { placeBet, payAnte, dealCards, revealMiddleCard, nextRound, clearError };\n};\n\nexport default GameContext;\n","import React from 'react';\n\n/**\n * Exit/door icon component for leave game button\n * @param {Object} props - Component props\n * @param {string} props.color - Color of the icon (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst ExitIcon = ({ color = 'currentColor', size = 24 }) => {\n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n    >\n      {/* Material Design style exit/logout icon */}\n      <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n      <polyline points=\"16 17 21 12 16 7\" />\n      <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\n    </svg>\n  );\n};\n\nexport default ExitIcon;\n","import React from 'react';\nimport IconButton from './IconButton';\nimport ExitIcon from '../icons/ExitIcon';\n\n/**\n * A standardized leave/exit button component\n * \n * @param {Object} props Component props\n * @param {function} props.onClick Handler for when the button is clicked\n * @param {string} props.title Custom tooltip text (optional)\n */\nconst LeaveButton = ({ \n  onClick, \n  title = \"Leave Game\",\n  ...restProps \n}) => {\n  return (\n    <IconButton\n      icon={<ExitIcon color=\"white\" size={20} />}\n      title={title}\n      onClick={onClick}\n      variant=\"danger\"\n      {...restProps}\n    />\n  );\n};\n\nexport default LeaveButton;\n","import React, { useState, useEffect } from 'react';\nimport styles from './styles/GameHeader.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { TIMERS, ICONS } from '../constants';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport GameSummaryModal from './GameSummaryModal.jsx';\nimport StoreModal from './StoreModal.jsx';\nimport RulesButton from './common/RulesButton';\nimport PlayerStatsButton from './common/PlayerStatsButton';\nimport PreferencesButton from './common/PreferencesButton';\nimport StoreButton from './StoreButton';\nimport LeaveButton from './common/LeaveButton';\n\n// Phase display mapping with icons and friendly names\nconst phaseDisplayMap = {\n  waiting: { text: 'Waiting for Players', icon: '👥' },\n  dealing: { text: 'Dealing Cards', icon: ICONS.DEALER },\n  revealing: { text: 'Revealing Cards', icon: '🥁' },\n  results: { text: 'Round Results', icon: '🏆' }\n};\n\nconst GameHeader = ({ handleLeaveGame, onModalStateChange }) => {\n  const { gameState, gameId } = useGameContext();\n  const { socket } = useSocket();\n  const { user } = useAuth();\n  \n  // Get the current user's balance from game state (real-time) or fallback to auth context\n  const currentUserId = socket?.auth?.userId;\n  const currentPlayer = currentUserId && gameState?.players ? gameState.players[currentUserId] : null;\n  const playerBalance = currentPlayer?.balance ?? user?.balance ?? 0;\n  const currentPhase = gameState?.phase || 'waiting';\n  \n  // Check if user is ready (committed to current hand)\n  const isPlayerReady = currentPlayer?.isReady || false;\n  const [timeLeft, setTimeLeft] = useState(null);\n  const [showGameSummary, setShowGameSummary] = useState(false);\n  const [showStoreModal, setShowStoreModal] = useState(false);\n  const [isPreferencesOpen, setIsPreferencesOpen] = useState(false);\n  const [isRulesOpen, setIsRulesOpen] = useState(false);\n  const [isStatsOpen, setIsStatsOpen] = useState(false);\n\n  // Timer effect for phases\n  useEffect(() => {\n    let timer;\n    \n    if (currentPhase === 'dealing') {\n      setTimeLeft(TIMERS.DEALING_DURATION);\n      timer = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 100));\n      }, 100);\n    } else if (currentPhase === 'betting') {\n      setTimeLeft(TIMERS.BETTING_DURATION);\n      timer = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 100));\n      }, 100);\n    } else if (currentPhase === 'revealing') {\n      setTimeLeft(TIMERS.REVEALING_DURATION);\n      timer = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 100));\n      }, 100);\n    } else if (currentPhase === 'results') {\n      setTimeLeft(TIMERS.RESULTS_DURATION);\n      timer = setInterval(() => {\n        setTimeLeft(prev => Math.max(0, prev - 100));\n      }, 100);\n    } else {\n      setTimeLeft(null);\n    }\n\n    return () => {\n      if (timer) clearInterval(timer);\n    };\n  }, [currentPhase, gameState?.waitingForAceDecision]);\n\n  // Notify parent when modal state changes\n  useEffect(() => {\n    const isModalOpen = showGameSummary || showStoreModal || isPreferencesOpen || isRulesOpen || isStatsOpen;\n    if (onModalStateChange) {\n      onModalStateChange(isModalOpen);\n    }\n  }, [showGameSummary, showStoreModal, isPreferencesOpen, isRulesOpen, isStatsOpen, onModalStateChange]);\n  \n  // Get the phase display information\n  let phaseInfo = phaseDisplayMap[currentPhase] || { text: 'Unknown Phase', icon: '❓' };\n  \n  // Override phase info if waiting for Ace decision\n  if (gameState?.waitingForAceDecision && currentPhase === 'dealing') {\n    phaseInfo = { text: 'Choosing Ace Value', icon: '🤔' };\n  }\n  \n  // Override phase info if waiting for second chance decision\n  if (gameState?.waitingForSecondChance) {\n    phaseInfo = { text: 'Second Chance Decision', icon: '🤔' };\n  }\n  \n  // Check if current user is the current player (using userId instead of socket.id)\n  const isCurrentPlayersTurn = socket && socket.auth?.userId && gameState?.currentPlayerId === socket.auth.userId;\n  \n  // Special handling for betting phase\n  if (currentPhase === 'betting' && gameState?.currentPlayerId && gameState?.players) {\n    const currentPlayer = gameState.players[gameState.currentPlayerId];\n    \n    if (currentPlayer) {\n      if (isCurrentPlayersTurn) {\n        // It's YOUR turn to bet\n        phaseInfo = {\n          text: `Pass or Bet`,\n          icon: '🤔'\n        };\n      } else {\n        // It's someone else's turn\n        phaseInfo = {\n          text: `${currentPlayer.name} is Betting`,\n          icon: '🤔'\n        };\n      }\n    } else {\n      phaseInfo = { text: 'Betting Round', icon: '🤔' };\n    }\n  }\n  \n  return (\n    <div className={styles.headerContainer}>\n      {/* Desktop layout - single row with 3 cells */}\n      <div className={styles.desktopLayout}>\n        {/* Left: Logo and game ID */}\n        <div className={styles.headerLeft}>\n          <h1 className={styles.gameTitle}>In Between <span className={styles.liveTag}>LIVE</span></h1>\n          <p className={styles.gameIdText}>\n            <span \n              className={styles.gameIdLink} \n              onClick={() => setShowGameSummary(true)}\n              title=\"Click to view game summary\"\n              data-gamepad-focusable=\"true\"\n              tabIndex=\"0\"\n            >\n              Game #{gameId}\n            </span>\n          </p>\n        </div>\n        \n        {/* Middle: Phase indicator */}\n        <div className={styles.headerCenter}>\n          <div \n            className={`${styles.gamePhase} ${currentPhase === 'betting' ? \n              (isCurrentPlayersTurn ? styles.phaseBettingYourTurn : styles.phaseBettingWaiting) : \n              styles[`phase${currentPhase.charAt(0).toUpperCase() + currentPhase.slice(1)}`]}`} \n            data-phase={currentPhase}\n          >\n            <span className={styles.phaseIcon}>{phaseInfo.icon}</span>\n            <span className={styles.phaseText}>{phaseInfo.text}</span>\n            {timeLeft !== null && (\n              <div className={styles.timerBar}>\n                <div \n                  className={styles.timerProgress} \n                  style={{ \n                    width: `${(timeLeft / (currentPhase === 'dealing' ? TIMERS.DEALING_DURATION :\n                                         currentPhase === 'betting' ? TIMERS.BETTING_DURATION :\n                                         currentPhase === 'revealing' ? TIMERS.REVEALING_DURATION :\n                                         TIMERS.RESULTS_DURATION)) * 100}%`\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Right: Balance and buttons */}\n        <div className={styles.headerRight}>\n          <div className={styles.controlsStack}>\n            <div className={styles.balanceDisplay}>\n              Balance: <CurrencyAmount amount={Number(playerBalance)} size=\"small\" />\n            </div>\n            <div className={styles.controlsGroup}>\n              <PreferencesButton \n                onModalStateChange={setIsPreferencesOpen}\n                data-gamepad-focusable=\"true\" \n              />\n              <RulesButton \n                onModalStateChange={setIsRulesOpen}\n                data-gamepad-focusable=\"true\" \n              />\n              <PlayerStatsButton \n                onModalStateChange={setIsStatsOpen}\n                data-gamepad-focusable=\"true\" \n              />\n              <StoreButton onClick={() => setShowStoreModal(true)} data-gamepad-focusable=\"true\" />\n              <LeaveButton \n                onClick={handleLeaveGame} \n                disabled={isPlayerReady}\n                data-gamepad-focusable=\"true\" \n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile layout - two rows */}\n      <div className={styles.mobileLayout}>\n        {/* Top row: Logo/ID, Balance/Buttons */}\n        <div className={styles.mobileTopRow}>\n          <div className={styles.headerLeft}>\n            <h1 className={styles.gameTitle}>In Between <span className={styles.liveTag}>LIVE</span></h1>\n            <p className={styles.gameIdText}>\n              <span \n                className={styles.gameIdLink} \n                onClick={() => setShowGameSummary(true)}\n                title=\"Click to view game summary\"\n                data-gamepad-focusable=\"true\"\n                tabIndex=\"0\"\n              >\n                Game #{gameId}\n              </span>\n            </p>\n          </div>\n          \n          <div className={styles.mobileRight}>\n            <div className={styles.mobileControlsStack}>\n              <div className={styles.balanceDisplay}>\n                Balance: <CurrencyAmount amount={Number(playerBalance)} size=\"small\" />\n              </div>\n              <div className={styles.mobileActions}>\n                <PreferencesButton \n                  onModalStateChange={setIsPreferencesOpen}\n                  data-gamepad-focusable=\"true\" \n                />\n                <RulesButton \n                  onModalStateChange={setIsRulesOpen}\n                  data-gamepad-focusable=\"true\" \n                />\n                <PlayerStatsButton \n                  onModalStateChange={setIsStatsOpen}\n                  data-gamepad-focusable=\"true\" \n                />\n                <StoreButton onClick={() => setShowStoreModal(true)} data-gamepad-focusable=\"true\" />\n                <LeaveButton \n                onClick={handleLeaveGame} \n                disabled={isPlayerReady}\n                data-gamepad-focusable=\"true\" \n              />\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Bottom row: Phase indicator (full width) */}\n        <div className={styles.mobileBottomRow}>\n          <div \n            className={`${styles.gamePhase} ${currentPhase === 'betting' ? \n              (isCurrentPlayersTurn ? styles.phaseBettingYourTurn : styles.phaseBettingWaiting) : \n              styles[`phase${currentPhase.charAt(0).toUpperCase() + currentPhase.slice(1)}`]}`} \n            data-phase={currentPhase}\n          >\n            <span className={styles.phaseIcon}>{phaseInfo.icon}</span>\n            <span className={styles.phaseText}>{phaseInfo.text}</span>\n            {timeLeft !== null && (\n              <div className={styles.timerBar}>\n                <div \n                  className={styles.timerProgress} \n                  style={{ \n                    width: `${(timeLeft / (currentPhase === 'dealing' ? TIMERS.DEALING_DURATION :\n                                         currentPhase === 'betting' ? TIMERS.BETTING_DURATION :\n                                         currentPhase === 'revealing' ? TIMERS.REVEALING_DURATION :\n                                         TIMERS.RESULTS_DURATION)) * 100}%`\n                  }}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Game Summary Modal */}\n      {showGameSummary && (\n        <GameSummaryModal \n          onClose={() => setShowGameSummary(false)} \n          gameData={gameState}\n        />\n      )}\n      \n      {/* Store Modal */}\n      {showStoreModal && (\n        <StoreModal\n          onClose={() => setShowStoreModal(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GameHeader;\n","import React from 'react';\n\n/**\n * Arrow icon component that can be rotated to point up or down\n * @param {Object} props - Component props\n * @param {string} props.direction - Direction of the arrow ('up' or 'down')\n * @param {string} props.color - Color of the arrow (default: 'currentColor')\n * @param {number} props.size - Size of the icon in pixels (default: 24)\n */\nconst ArrowIcon = ({ direction = 'up', color = 'currentColor', size = 24 }) => {\n  // Determine rotation based on direction\n  const rotation = direction === 'down' ? 'rotate(180deg)' : 'rotate(0deg)';\n  \n  return (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      width={size} \n      height={size} \n      viewBox=\"0 0 24 24\" \n      fill=\"none\" \n      stroke={color} \n      strokeWidth=\"2\" \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\"\n      style={{ transform: rotation, display: 'inline-block', transformOrigin: 'center' }}\n    >\n      {/* This is the shift/arrow up icon from Material Design */}\n      <path d=\"M7 11l5-5 5 5M7 17l5-5 5 5\" />\n    </svg>\n  );\n};\n\nexport default ArrowIcon;\n","import React from 'react';\nimport styles from './styles/CardDisplay.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport ArrowIcon from './icons/ArrowIcon';\n\nconst CardDisplay = () => {\n  const { gameState } = useGameContext();\n  \n  if (!gameState) {\n    return <div className={styles.loading}>Loading game state...</div>;\n  }\n  \n  const { \n    firstCard,\n    secondCard,\n    thirdCard,\n    phase,\n    dealer\n  } = gameState;\n  \n  // Card state is managed by the game context\n  \n  const dealerName = dealer?.name;\n  const cardLabels = {\n    '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9', '10': '10',\n    'J': 'J', 'Q': 'Q', 'K': 'K', 'A': 'A'\n  };\n  \n  // Map for handling both string names and direct symbols\n  const suitSymbols = {\n    'hearts': '♥',\n    'diamonds': '♦',\n    'clubs': '♣',\n    'spades': '♠',\n    // Handle direct Unicode symbols as well\n    '♥': '♥',\n    '♦': '♦',\n    '♣': '♣',\n    '♠': '♠'\n  };\n  \n  // Helper to determine if a suit is red\n  const isRedSuit = (suit) => {\n    return suit === '♥' || suit === '♦' || suit === 'hearts' || suit === 'diamonds';\n  };\n  \n  const renderCard = (card, index) => {\n    if (!card) return (\n      <div key={`empty-${index}`} className={styles.card}>\n        <div className={styles.cardBack}></div>\n      </div>\n    );\n    \n    const isRed = isRedSuit(card.suit);\n    const isAce = card.value === 'A';\n    const isAceLow = card.isAceLow;\n    const isMiddleCard = index === 1; // Index 1 is the middle card position\n    \n    return (\n      <div key={`${card.value}-${card.suit}-${index}`} \n        className={`${styles.card} ${isRed ? styles.redCard : styles.blackCard} ${isAce ? styles.aceCard : ''}`}\n      >\n        {isAce && !isMiddleCard && (\n          <div className={`${styles.aceIndicator} ${isAceLow ? styles.aceLow : styles.aceHigh} ${isRed ? styles.redCard : styles.blackCard}`}>\n            {isAceLow ? (\n              <span className={styles.indicatorContent}>LOW <ArrowIcon direction=\"down\" color={isRed ? '#e74c3c' : '#2c3e50'} size={16} /></span>\n            ) : (\n              <span className={styles.indicatorContent}>HIGH <ArrowIcon direction=\"up\" color={isRed ? '#e74c3c' : '#2c3e50'} size={16} /></span>\n            )}\n          </div>\n        )}\n        <div className={styles.cardCorner}>\n          <div className={styles.cardValue}>{cardLabels[card.value]}</div>\n          <div className={styles.cardSuit}>{suitSymbols[card.suit]}</div>\n        </div>\n        <div className={styles.cardCenter}>\n          {suitSymbols[card.suit]}\n        </div>\n        <div className={`${styles.cardCorner} ${styles.bottomRight}`}>\n          <div className={styles.cardValue}>{cardLabels[card.value]}</div>\n          <div className={styles.cardSuit}>{suitSymbols[card.suit]}</div>\n        </div>\n      </div>\n    );\n  };\n  \n  // Function to handle card positioning \n  const renderCardLayout = () => {\n    // Create an array of 3 nulls to represent the card slots\n    let displayCards = [null, null, null];\n    \n    // Check if we have a valid game state with cards\n    if (!firstCard && !secondCard && !thirdCard) {\n      return displayCards.map((card, index) => renderCard(card, index));\n    }\n    \n    // Handle the individual card properties\n    if (firstCard) {\n      displayCards[0] = {...firstCard}; // Left position - use spread operator to create a copy\n    }\n    \n    if (secondCard) {\n      displayCards[2] = {...secondCard}; // Right position - use spread operator to create a copy\n    }\n    \n    if (thirdCard) {\n      displayCards[1] = {...thirdCard}; // Middle position - use spread operator to create a copy\n    }\n    \n    return displayCards.map((card, index) => renderCard(card, index));\n  };\n\n  return (\n    <div className={styles.cardDisplayContainer}>\n      <div className={`${styles.cardsRow} ${phase === 'dealing' ? styles.dealingPhase : ''} ${phase === 'revealing' ? styles.revealingPhase : ''}`}>\n        {renderCardLayout()}\n      </div>\n    </div>\n  );\n};\n\nexport default CardDisplay;\n","import React from 'react';\nimport styles from './styles/PotButton.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\n\n/**\n * PotButton - The most epic, baller button in the entire game\n * Features a shimmering gold border with a shiny silver background to make the gold currency pop\n * Includes multiple overlapping layers and effects for maximum visual impact\n * \n * @param {Object} props - Component props\n * @param {number} props.amount - The pot amount to display\n * @param {boolean} props.disabled - Whether the button is disabled\n * @param {function} props.onClick - Function to call when the button is clicked\n */\nconst PotButton = ({ amount, disabled, onClick, ...props }) => {\n  return (\n    <button\n      className={`${styles.potButton} ${disabled ? styles.disabled : ''}`}\n      onClick={onClick}\n      disabled={disabled}\n      aria-label={`Bet the pot: ${amount} chips`}\n      {...props}\n    >\n      {/* Layer 2: Gold border with texture */}\n      <div className={styles.shimmerBorder}></div>\n      \n      {/* Layer 4: Silver metallic background */}\n      <div className={styles.buttonBackground}></div>\n      \n      {/* Layer 5: Light reflection effects */}\n      <div className={styles.reflectionEffect}></div>\n      \n      {/* Layer 6-8: Button content with 3D transform */}\n      <div className={styles.buttonContent}>\n        <span className={styles.potText}>POT</span>\n        <span className={styles.potAmount}>\n          <CurrencyAmount amount={amount} background=\"pill\" />\n        </span>\n      </div>\n    </button>\n  );\n};\n\nexport default PotButton;\n","import React, { useState } from 'react';\nimport styles from './styles/BettingPanel.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport PotButton from './PotButton.jsx';\nimport GamepadInput from './GamepadInput';\n\nconst BettingPanel = () => {\n  // Get game state and actions from context\n  const { gameState, placeBet } = useGameContext();\n  const { socket } = useSocket();\n  // Initialize state first - before any conditional returns\n  const [customBet, setCustomBet] = useState('');\n  \n  if (!gameState) return null;\n  \n  const { \n    players, \n    currentPlayerId, \n    pot: potAmount, \n    phase,\n    firstCard,\n    secondCard\n  } = gameState;\n  \n  // Only show in betting phase\n  if (phase !== 'betting') return null;\n  \n  const isCurrentPlayer = socket && currentPlayerId === socket.auth?.userId;\n  const myPlayer = socket && players && socket.auth?.userId ? players[socket.auth.userId] : null;\n  const playerBalance = Number(myPlayer?.balance || 0);\n  \n  const handleCustomBetChange = (e) => {\n    // Only allow numbers\n    const value = e.target.value.replace(/[^0-9]/g, '');\n    \n    // Don't allow bets greater than pot or player balance\n    const maxBet = Math.min(potAmount, playerBalance);\n    if (value && parseInt(value) > maxBet) {\n      setCustomBet(maxBet.toString());\n    } else {\n      setCustomBet(value);\n    }\n  };\n  \n  const handleCustomBetSubmit = () => {\n    if (customBet && !isNaN(customBet)) {\n      const betAmount = parseInt(customBet, 10);\n      // Verify bet is at least $1 and at most the pot/balance\n      if (betAmount >= 1 && betAmount <= Math.min(potAmount, playerBalance)) {\n        placeBet(betAmount);\n        setCustomBet('');\n      }\n    }\n  };\n  \n  // Helper to handle Enter key in the custom bet input\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleCustomBetSubmit();\n    }\n  };\n  \n\n  \n  const renderBettingControls = () => {\n    if (!isCurrentPlayer) return null;\n    \n    return (\n      <div className={styles.betContainer}>\n        <p className={styles.betText}>Place your bet (Min: <CurrencyAmount amount={1} />, Max: <CurrencyAmount amount={Math.min(potAmount, playerBalance)} />)</p>\n        \n        {/* Extreme options row */}\n        <div className={styles.extremeOptionsRow}>\n          <button\n            className={`${styles.betButton} ${styles.extremeButton} ${styles.passButton}`}\n            onClick={() => placeBet(0)}\n            data-gamepad-focusable=\"true\"\n            autoFocus\n          >\n            PASS\n          </button>\n          \n          <PotButton \n            amount={potAmount}\n            onClick={() => placeBet(potAmount)}\n            disabled={potAmount > playerBalance}\n            data-gamepad-focusable=\"true\"\n          />\n        </div>\n        \n        {/* Standard bet options */}\n        <div className={styles.betButtons}>\n          {[1, 2, 5].map(amount => {\n            const maxBet = Math.min(potAmount, playerBalance);\n            const disabled = amount > maxBet;\n            return (\n              <button\n                key={amount}\n                className={`${styles.betButton} ${disabled ? styles.disabledButton : ''}`}\n                onClick={() => placeBet(amount)}\n                disabled={disabled}\n                data-gamepad-focusable=\"true\"\n              >\n                <CurrencyAmount amount={amount} />\n              </button>\n            );\n          })}\n          \n          {/* Custom bet input */}\n          <div className={styles.customBetContainer}>\n            <GamepadInput\n              title=\"Enter Bet Amount\"\n              type=\"number\"\n              className={styles.customBetInput}\n              placeholder=\"Custom\"\n              value={customBet}\n              onChange={handleCustomBetChange}\n              onKeyPress={handleKeyPress}\n            />\n            <button\n              className={styles.customBetButton}\n              onClick={handleCustomBetSubmit}\n              disabled={!customBet}\n              data-gamepad-focusable=\"true\"\n            >\n              Bet\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n\n  // Only render the panel for the current player\n  if (!isCurrentPlayer) return null;\n  \n  return (\n    <div className={styles.bettingPanel}>\n      {renderBettingControls()}\n    </div>\n  );\n};\n\nexport default BettingPanel;\n","import React, { useRef, useEffect, useState, useMemo, useContext } from 'react';\nimport styles from './styles/PlayerList.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport UserAvatar from './UserAvatar.jsx';\nimport { ICONS } from '../constants';\nimport UserDataContext from '../contexts/UserDataContext';\n\nconst PlayerList = () => {\n  const { gameState } = useGameContext();\n  const { socket } = useSocket();\n  const userDataContext = useContext(UserDataContext);\n  \n  // Prefetch user data for all players when game state changes\n  useEffect(() => {\n    if (gameState?.players && userDataContext) {\n      const userIds = Object.values(gameState.players).map(player => player.userId).filter(Boolean);\n      if (userIds.length > 0) {\n        userDataContext.prefetchUsers(userIds);\n      }\n    }\n  }, [gameState?.players, userDataContext]);\n  \n  if (!gameState || !gameState.players) {\n    return (\n      <div className={styles.emptyPlayerList}>\n        <p>Waiting for game data...</p>\n      </div>\n    );\n  }\n  \n  const { players, currentPlayerId, dealerId, gameTransactions = [] } = gameState;\n  const currentUserId = socket?.auth?.userId;\n  \n  // Use server-side calculated totals\n  const playerTotals = gameState.totals || {};\n  if (!players || Object.keys(players).length === 0) {\n    return (\n      <div className={styles.emptyPlayerList}>\n        <p>Waiting for players to join...</p>\n      </div>\n    );\n  }\n\n  \n  return (\n    <div className={styles.playersContainer}>\n      <h3 className={styles.playersTitle}>Scoreboard</h3>\n      \n      <div className={styles.playersList}>\n        {/* Use gameState.seats to render players in seat order */}\n        {gameState.seats\n          .filter(playerId => playerId !== null && players[playerId])\n          .map(playerId => {\n            const player = players[playerId];\n            const isCurrentPlayer = playerId === currentPlayerId;\n            // Compare player.userId with currentUserId instead of comparing playerId with currentUserId\n            const isCurrentUser = player.userId === currentUserId;\n            const isDealer = playerId === dealerId; // Use playerId instead of player.id\n            const isDisconnected = player.disconnected === true;\n            \n            return (\n              <div \n                key={playerId} \n                className={`\n                  ${styles.playerItem}\n                  ${isCurrentPlayer ? styles.currentPlayer : ''}\n                  ${isCurrentUser ? styles.currentUser : ''}\n                `}\n              >\n              <div className={styles.playerInfo}>\n                <UserAvatar \n                  userId={player.userId}\n                  size=\"small\" \n                  showName={false}\n                />\n                <span className={styles.playerName}>\n                  {player.name}\n                  <span className={styles.playerStatus}>\n                    {isDealer && ` ${ICONS.DEALER}`}\n                    {player.disconnected && <span className={styles.disconnectedIndicator} title=\"Player disconnected\">⚠️ Disconnected</span>}\n                  </span>\n                </span>\n              </div>\n              <div className={styles.playerBalanceContainer}>\n                <BalanceDisplay balance={playerTotals[playerId] || 0} />\n\n                <div \n                  className={`\n                    ${styles.readyIndicator} \n                    ${player.isSittingOut ? styles.sittingOut : (player.isReady ? styles.ready : styles.notReady)}\n                  `}\n                  title={player.isSittingOut ? 'Sitting Out' : (player.isReady ? 'Ready' : 'Not Ready')}\n                >\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst BalanceDisplay = ({ balance }) => {\n  const [prevBalance, setPrevBalance] = useState(balance);\n  const [animationClass, setAnimationClass] = useState('');\n  const timeoutRef = useRef(null);\n\n  useEffect(() => {\n    if (balance !== prevBalance) {\n      // Determine if balance increased or decreased\n      const isIncrease = balance > prevBalance;\n      setAnimationClass(isIncrease ? styles.balanceIncrease : styles.balanceDecrease);\n\n      // Clear previous timeout if it exists\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n\n      // Remove animation class after animation completes\n      timeoutRef.current = setTimeout(() => {\n        setAnimationClass('');\n      }, 1000); // Match animation duration\n\n      setPrevBalance(balance);\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [balance]);\n\n  return (\n    <span className={`${styles.playerBalance} ${animationClass}`}>\n      <CurrencyAmount amount={balance} />\n    </span>\n  );\n};\n\nexport default PlayerList;\n","import React from 'react';\nimport styles from './styles/PotDisplay.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport { ICONS } from '../constants';\n\nconst PotDisplay = () => {\n  const { gameState } = useGameContext();\n  \n  if (!gameState) return null;\n  \n  const { pot, round = 1 } = gameState;\n  \n  return (\n    <div className={styles.potDisplayContainer}>\n      <div className={styles.potIconWrapper}>\n        <span className={styles.potIcon}>{ICONS.POT}</span>\n      </div>\n      <div className={styles.potInfo}>\n        <h3 className={styles.potLabel}>\n          POT <span className={styles.potCounter}>({round})</span>\n        </h3>\n        <span className={styles.potAmount}><CurrencyAmount amount={pot} size=\"medium\" /></span>\n      </div>\n    </div>\n  );\n};\n\nexport default PotDisplay;\n","import React from 'react';\nimport styles from './styles/DeckDisplay.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { ICONS } from '../constants';\n\nconst DeckDisplay = () => {\n  const { gameState } = useGameContext();\n  \n  if (!gameState) return null;\n  \n  // Get the deck size and deck count from the game state\n  const { deckSize = 0, deckCount = 1 } = gameState;\n  \n  // Calculate the visual thickness of the deck based on remaining cards\n  const getThicknessClass = () => {\n    if (deckSize >= 40) return styles.deckThick;\n    if (deckSize >= 25) return styles.deckMedium;\n    if (deckSize >= 10) return styles.deckThin;\n    return styles.deckVeryThin;\n  };\n  \n  return (\n    <div className={styles.deckDisplayContainer}>\n      <div className={`${styles.deckVisual} ${getThicknessClass()}`}>\n        <div className={styles.deckIcon}>{ICONS.DECK}</div>\n      </div>\n      <div className={styles.deckInfo}>\n        <h3 className={styles.deckLabel}>\n          DECK <span className={styles.deckCounter}>({deckCount})</span>\n        </h3>\n        <span className={styles.deckCount}>{deckSize}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default DeckDisplay;\n","import React from 'react';\nimport { usePreferences } from '../contexts/PreferencesContext';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport styles from './styles/AutoAnteToggle.module.css';\n\nconst AutoAnteToggle = () => {\n  const { preferences, toggleAutoAnte, loading } = usePreferences();\n  const { gameState, playerReady } = useGameContext();\n  const { socket } = useSocket();\n  \n  const handleToggle = async () => {\n    const newValue = !preferences.autoAnte;\n    const success = await toggleAutoAnte();\n    \n    // Only auto-ante if the player is not already anted\n    if (newValue && success && playerReady) {\n      // Check if player is already anted (using userId instead of socket.id)\n      let myPlayer = null;\n      if (socket && socket.auth?.userId && gameState?.players) {\n        // Find player by userId\n        const playerIds = Object.keys(gameState.players);\n        for (const id of playerIds) {\n          if (gameState.players[id].userId === socket.auth.userId) {\n            myPlayer = gameState.players[id];\n            break;\n          }\n        }\n      }\n      const isPlayerReady = myPlayer?.isReady;\n      \n      // Only call playerReady if the player is not already ready\n      if (!isPlayerReady) {\n        playerReady();\n      }\n    }\n  };\n  \n  if (loading) {\n    return <div className={styles.loading}>Loading preferences...</div>;\n  }\n  \n  return (\n    <div className={styles.toggleContainer}>\n      <label className={styles.toggleLabel}>\n        <input\n          type=\"checkbox\"\n          checked={preferences.autoAnte}\n          onChange={handleToggle}\n          className={styles.toggleInput}\n          data-gamepad-focusable=\"true\"\n        />\n        <span className={styles.toggleSlider}></span>\n        <span className={styles.toggleText}>\n          Auto-Ante\n        </span>\n      </label>\n    </div>\n  );\n};\n\nexport default AutoAnteToggle;\n","import React from 'react';\nimport styles from './styles/AnteControls.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport CurrencyAmount from './common/CurrencyAmount';\nimport { ICONS } from '../constants';\nimport AutoAnteToggle from './AutoAnteToggle.jsx';\n\n\nconst AnteControls = () => {\n  // Get game state and actions from context\n  const { gameState, playerReady, playerUnready } = useGameContext();\n  const { socket } = useSocket();\n  const { user } = useAuth();\n  \n  if (!gameState) return null;\n  \n  const { \n    players, \n    anteAmount, \n    phase \n  } = gameState;\n  \n  // Only show in waiting phase\n  if (phase !== 'waiting') return null;\n  \n  // Find the player by user ID\n  let myPlayer = null;\n  if (socket && socket.auth?.userId && players) {\n    // Find player by userId\n    const playerIds = Object.keys(players);\n    for (const id of playerIds) {\n      if (players[id].userId === socket.auth.userId) {\n        myPlayer = players[id];\n        break;\n      }\n    }\n  } else if (user && players) {\n    // If we can't find by socket ID, try to find by user ID\n    const playerIds = Object.keys(players);\n    for (const id of playerIds) {\n      if (players[id].userId === user.id) {\n        myPlayer = players[id];\n        console.log(`[AnteControls] Found player by user ID instead of socket ID`);\n        break;\n      }\n    }\n  }\n  \n  // Get player balance and ready status\n  const playerBalance = Number(myPlayer?.balance || 0);\n  const isPlayerReady = myPlayer?.isReady;\n  \n  // Check if player has enough chips\n  const hasEnoughChips = playerBalance >= anteAmount;\n  \n  // Player state and readiness is managed by the game context\n  \n  return (\n    <div className={styles.anteControlsWrapper}>\n      <div className={styles.controlsContainer}>\n        {/* Main action button (Ante or Back Out) */}\n        <div className={styles.buttonContainerRow}>\n          {!isPlayerReady ? (\n            // Player is not ready - show Ante button and Sit Out button side by side\n            <div className={styles.buttonContainerRow}>\n              <button \n                className={styles.anteButton}\n                onClick={playerReady}\n                disabled={!hasEnoughChips}\n                aria-label=\"Ante up\"\n                data-gamepad-focusable=\"true\"\n                autoFocus\n              >\n                {/* Add shimmer border for glimmering effect */}\n                <div className={styles.shimmerBorder}></div>\n                <span className={styles.anteIcon}>{ICONS.CHECK}</span>\n                <div className={styles.buttonInfo}>\n                  <h3 className={styles.buttonLabel}>ANTE</h3>\n                  <span className={styles.buttonAmount}><CurrencyAmount amount={anteAmount} /></span>\n                </div>\n              </button>\n\n              <button\n                className={`${styles.backOutButton} ${styles.sitOutHalfWidth}`}\n                onClick={() => {\n                  if (socket && gameState && user) {\n                    socket.emit('sitOut', {\n                      gameId: gameState.id,\n                      userId: socket.auth?.userId || user.id\n                    });\n                  }\n                }}\n                disabled={myPlayer?.isSittingOut} // Disable if sitting out\n                title={myPlayer?.isSittingOut ? \"You are currently sitting out\" : \"Sit out next round\"}\n                aria-label=\"Sit Out\"\n                data-gamepad-focusable=\"true\"\n              >\n                <div className={styles.shimmerBorder}></div>\n                <div className={styles.buttonInfo}>\n                  <h3 className={styles.buttonLabel}>SIT OUT</h3>\n                </div>\n              </button>\n\n              {!hasEnoughChips && (\n                <p className={styles.notEnoughChipsText}>Not enough coins (<CurrencyAmount amount={anteAmount} /> required)</p>\n              )}\n            </div>\n          ) : (\n            // Player is ready - show Back Out button\n            <div className={styles.buttonContainerRow}>\n              <button \n                className={styles.backOutButton}\n                onClick={() => {\n                  if (typeof playerUnready === 'function') {\n                    playerUnready();\n                  } else {\n                    console.error('playerUnready is not a function');\n                  }\n                }}\n                aria-label=\"Back out\"\n                data-gamepad-focusable=\"true\"\n              >\n                {/* Add shimmer border for glimmering effect */}\n                <div className={styles.shimmerBorder}></div>\n                <span className={styles.backOutIcon}>✕</span>\n                <div className={styles.buttonInfo}>\n                  <h3 className={styles.buttonLabel}>BACK OUT</h3>\n                </div>\n              </button>\n            </div>\n          )}\n        </div>\n        \n        {/* Auto-Ante toggle - always shown */}\n        <div className={styles.autoAnteContainer}>\n          <AutoAnteToggle />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnteControls;\n","import { useGameContext } from '../contexts/GameContext';\nimport styles from './styles/ResultsPanel.module.css';\nimport CurrencyAmount from './common/CurrencyAmount';\n\n/**\n * Results panel component that displays the outcome of a hand during the results phase\n */\nconst ResultsPanel = () => {\n  const { gameState } = useGameContext();\n\n  // If there's no result, don't render anything\n  if (!gameState.result) return null;\n\n  const { result, players, resultCountdown } = gameState;\n  const playerName = players[result.playerId]?.name;\n\n  const renderWinResult = () => (\n    <>\n      <h2 className={`${styles.resultText} ${styles.winText}`}>\n        {playerName} WON!\n      </h2>\n      {result.winnings > 0 && (\n        <p className={styles.winningsText}>\n          Winnings: <CurrencyAmount amount={result.winnings / 2} size=\"medium\" />\n        </p>\n      )}\n    </>\n  );\n\n  const renderLossResult = () => (\n    <>\n      <h2 className={`${styles.resultText} ${styles.loseText}`}>\n        {playerName} LOST!\n      </h2>\n      {result.betAmount > 0 && (\n        <p className={styles.winningsText}>\n          Loss: <CurrencyAmount amount={result.betAmount} size=\"medium\" />\n        </p>\n      )}\n    </>\n  );\n\n  const renderTieResult = () => {\n    const penaltyAmount = result.betAmount * (result.isTripleAceTie ? 3 : 2);\n    \n    return (\n      <>\n        <div className={styles.penaltyWarning}>\n          <div className={styles.cautionTape}></div>\n        </div>\n        <h2 className={`${styles.resultText} ${styles.tieText}`}>\n          {playerName} {result.isTripleAceTie ? '3X' : '2X'} PENALTY!\n        </h2>\n        {result.betAmount > 0 && (\n          <p className={styles.winningsText}>\n            Penalty: <CurrencyAmount amount={penaltyAmount} size=\"medium\" />\n          </p>\n        )}\n      </>\n    );\n  };\n\n  const renderOutcome = () => {\n    switch (result.outcome) {\n      case 'win':\n        return renderWinResult();\n      case 'lose':\n        return renderLossResult();\n      case 'tie':\n        return renderTieResult();\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={styles.resultsPanel}>\n      {/* Card display section removed - cards are now visible in the game board */}\n\n      <div className={styles.resultContent}>\n        {renderOutcome()}\n        \n        {resultCountdown && (\n          <div className={styles.countdownContainer}>\n            <p className={styles.countdownText}>\n              Next hand in: {resultCountdown.countdownSeconds}s\n            </p>\n            <div className={styles.countdownProgress}>\n              <div \n                className={styles.countdownBar} \n                style={{ width: `${(resultCountdown.countdownSeconds / 5) * 100}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsPanel;","import React, { useState, useEffect } from 'react';\nimport styles from './styles/AceChoicePanel.module.css';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport ArrowIcon from './icons/ArrowIcon';\n\nconst AceChoicePanel = () => {\n  const { socket } = useSocket();\n  const { gameState } = useGameContext();\n  const { user } = useAuth();\n  const [countdown, setCountdown] = useState(15);\n  \n  // Set up countdown timer when the component mounts\n  useEffect(() => {\n    if (gameState?.waitingForAceDecision && socket?.auth?.userId === gameState.currentPlayerId) {\n      setCountdown(15); // Reset to 15 seconds\n      \n      const timer = setInterval(() => {\n        setCountdown(prevCount => {\n          if (prevCount <= 1) {\n            clearInterval(timer);\n            return 0;\n          }\n          return prevCount - 1;\n        });\n      }, 1000);\n      \n      return () => clearInterval(timer);\n    }\n  }, [gameState?.waitingForAceDecision, gameState?.currentPlayerId, socket?.auth?.userId]);\n  \n  const handleAceChoice = (isAceLow) => {\n    socket.emit('chooseAceValue', { isAceLow });\n  };\n  \n  // Check if it's the current player's turn\n  const isCurrentPlayersTurn = socket?.auth?.userId === gameState.currentPlayerId;\n  const currentPlayerName = gameState.players[gameState.currentPlayerId]?.name || 'Current player';\n  \n  const renderAceChoiceControls = () => {\n    if (!isCurrentPlayersTurn) return null;\n    \n    return (\n      <div className={styles.aceChoiceControls}>\n        <p className={styles.aceChoiceText}>\n          You've been dealt an Ace! Choose whether it should be high or low.\n          <span className={styles.countdown}> ({countdown}s)</span>\n        </p>\n        \n        <div className={styles.aceChoiceButtons}>\n          <button \n            className={`${styles.aceChoiceButton} ${styles.aceHighButton}`}\n            onClick={() => handleAceChoice(false)}\n            data-gamepad-focusable=\"true\"\n            autoFocus\n          >\n            <span className={styles.buttonContent}>ACE HIGH <ArrowIcon direction=\"up\" color=\"white\" size={20} /></span>\n          </button>\n          <button \n            className={`${styles.aceChoiceButton} ${styles.aceLowButton}`}\n            onClick={() => handleAceChoice(true)}\n            data-gamepad-focusable=\"true\"\n          >\n            <span className={styles.buttonContent}>ACE LOW <ArrowIcon direction=\"down\" color=\"white\" size={20} /></span>\n          </button>\n        </div>\n      </div>\n    );\n  };\n  \n  const renderWaitingMessage = () => {\n    if (isCurrentPlayersTurn) return null;\n    \n    return (\n      <div className={styles.waitingMessage}>\n        <p className={styles.waitingText}>\n          {currentPlayerName} is choosing whether their Ace is high or low...\n        </p>\n      </div>\n    );\n  };\n  \n  return (\n    <div className={styles.aceChoicePanel}>\n      {renderAceChoiceControls()}\n      {renderWaitingMessage()}\n    </div>\n  );\n};\n\nexport default AceChoicePanel;\n","import React, { useState, useEffect } from 'react';\nimport styles from './styles/SecondChancePanel.module.css';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport CurrencyAmount from './common/CurrencyAmount';\n\nconst SecondChancePanel = () => {\n  const { gameState } = useGameContext();\n  const { socket } = useSocket();\n  const [loading, setLoading] = useState(false);\n  const [actionType, setActionType] = useState(null); // 'ante' or 'pass'\n  const [countdown, setCountdown] = useState(15);\n  \n  // Set up countdown timer when the component mounts\n  useEffect(() => {\n    if (gameState?.waitingForSecondChance && socket?.auth?.userId === gameState.currentPlayerId) {\n      setCountdown(15); // Reset to 15 seconds\n      \n      const timer = setInterval(() => {\n        setCountdown(prevCount => {\n          if (prevCount <= 1) {\n            clearInterval(timer);\n            return 0;\n          }\n          return prevCount - 1;\n        });\n      }, 1000);\n      \n      return () => clearInterval(timer);\n    }\n  }, [gameState?.waitingForSecondChance, gameState?.currentPlayerId, socket?.auth?.userId]);\n  \n  const { \n    players, \n    currentPlayerId, \n    anteAmount = 1\n  } = gameState;\n  \n  const isCurrentPlayer = socket && currentPlayerId === socket.auth?.userId;\n  const currentPlayer = players[currentPlayerId];\n  \n  const handleSecondChance = (anteAgain) => {\n    if (socket) {\n      setLoading(true);\n      setActionType(anteAgain ? 'ante' : 'pass');\n      socket.emit('secondChance', { anteAgain });\n    }\n  };\n  \n  const renderSecondChanceControls = () => {\n    if (!isCurrentPlayer) return null;\n    \n    return (\n      <div className={styles.secondChanceControls}>\n        <p className={styles.secondChanceText}>\n          Would you like to ante up again for a second chance?\n          <span className={styles.countdown}> ({countdown}s)</span>\n        </p>\n        \n        <div className={styles.secondChanceButtons}>\n          <button\n            className={`${styles.secondChanceButton} ${styles.anteAgainButton}`}\n            onClick={() => handleSecondChance(true)}\n            data-gamepad-focusable=\"true\"\n            autoFocus\n          >\n            {loading && actionType === 'ante' ? 'Processing...' : (\n              <>\n                Ante Up <span className={styles.currencyWrapper}>\n                  <CurrencyAmount amount={anteAmount} size=\"small\" />\n                </span>\n              </>\n            )}\n          </button>\n          <button\n            className={`${styles.secondChanceButton} ${styles.passButton}`}\n            onClick={() => handleSecondChance(false)}\n            data-gamepad-focusable=\"true\"\n          >\n            {loading && actionType === 'pass' ? 'Processing...' : 'Pass'}\n          </button>\n        </div>\n      </div>\n    );\n  };\n  \n  const renderWaitingMessage = () => {\n    if (isCurrentPlayer) return null;\n    \n    return (\n      <div className={styles.waitingMessage}>\n          <p className={styles.waitingText}>\n            {currentPlayer?.name} is deciding whether to take a second chance.\n          </p>\n      </div>\n    );\n  };\n  \n  return (\n    <div className={styles.secondChancePanel}>\n      {renderSecondChanceControls()}\n      {renderWaitingMessage()}\n    </div>\n  );\n};\n\nexport default SecondChancePanel;\n","import React, { useState } from 'react';\nimport styles from './styles/GameLog.module.css';\nimport { useGameContext } from '../contexts/GameContext';\n\nconst GameLog = () => {\n  const { gameState } = useGameContext();\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  if (!gameState || !gameState.gameLog) return null;\n  \n  // Get the game log entries\n  const logEntries = gameState.gameLog || [];\n  \n  // Format timestamp to readable time\n  const formatTime = (timestamp) => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n  };\n  \n  // Toggle expanded state\n  const toggleExpanded = () => {\n    setIsExpanded(!isExpanded);\n  };\n  \n  // Determine how many entries to show\n  const displayEntries = isExpanded ? logEntries : logEntries.slice(0, 5);\n  \n  return (\n    <div className={styles.gameLogContainer}>\n      <div className={styles.gameLogHeader} onClick={toggleExpanded}>\n        <h3>Game Log</h3>\n        <span className={styles.expandIcon}>{isExpanded ? '▲' : '▼'}</span>\n      </div>\n      \n      <div className={`${styles.gameLogEntries} ${isExpanded ? styles.expanded : ''}`}>\n        {displayEntries.length === 0 ? (\n          <div className={styles.emptyLog}>No game events yet</div>\n        ) : (\n          displayEntries.map((entry, index) => (\n            <div key={index} className={styles.logEntry}>\n              <span className={styles.logTime}>{formatTime(entry.timestamp)}</span>\n              <span className={styles.logMessage}>{entry.message}</span>\n            </div>\n          ))\n        )}\n      </div>\n      \n      {!isExpanded && logEntries.length > 5 && (\n        <div className={styles.showMoreButton} onClick={toggleExpanded}>\n          Show {logEntries.length - 5} more entries\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameLog;\n","import React, { useState } from 'react';\nimport styles from './styles/EmojiReactions.module.css';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useGameContext } from '../contexts/GameContext';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst EmojiReactions = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { socket } = useSocket();\n  const { gameState } = useGameContext();\n  const { user } = useAuth();\n\n  // Available emojis for reactions - colors matched to emoji appearance\n  const emojis = [\n    { emoji: '🔥', name: 'Fire', color: '#FF6B35' },       // Orange-red flame\n    { emoji: '😄', name: 'Happy', color: '#FFD93D' },      // Yellow happy face\n    { emoji: '💩', name: 'Poop', color: '#8B4513' },       // Brown\n    { emoji: '😎', name: 'Cool', color: '#4A5568' },       // Dark gray (sunglasses)\n    { emoji: '🤯', name: 'Mind Blown', color: '#FFA500' }, // Orange explosion\n    { emoji: '😈', name: 'Devilish', color: '#9333EA' },   // Purple devil\n    { emoji: '😬', name: 'Worried', color: '#FCD34D' },    // Yellow grimace\n    { emoji: '👏', name: 'Applause', color: '#FBBF24' },   // Skin tone yellow\n    { emoji: '😭', name: 'Crying', color: '#3B82F6' },     // Blue tears\n    { emoji: '🤡', name: 'Clown', color: '#EF4444' },      // Red nose\n    { emoji: '💪', name: 'Strong', color: '#F59E0B' },     // Skin/muscle tone\n    { emoji: '😅', name: 'Nervous', color: '#60A5FA' },    // Blue sweat drop\n    { emoji: '🎉', name: 'Celebration', color: '#A855F7' }, // Multi-color party\n    { emoji: '🤔', name: 'Thinking', color: '#6B7280' },   // Neutral gray\n    { emoji: '🙈', name: 'See No Evil', color: '#A0522D' }, // Monkey brown\n    { emoji: '😤', name: 'Confident', color: '#DC2626' }   // Red anger/steam\n  ];\n\n  const handleEmojiClick = (emojiData) => {\n    if (!socket || !gameState || !user) {\n      return;\n    }\n\n    // Send emoji reaction to server\n    socket.emit('emojiReaction', {\n      gameId: gameState.id,\n      emoji: emojiData.emoji,\n      color: emojiData.color,\n      playerName: user.username\n    });\n\n    // Close panel after selection\n    setIsOpen(false);\n  };\n\n  const togglePanel = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className={styles.emojiReactions}>\n      {/* Toggle button */}\n      <button\n        className={styles.toggleButton}\n        onClick={togglePanel}\n        data-gamepad-focusable=\"true\"\n        aria-label=\"Toggle emoji reactions\"\n      >\n        😊\n      </button>\n\n      {/* Emoji panel */}\n      {isOpen && (\n        <div className={styles.emojiPanel}>\n          <div className={styles.emojiGrid}>\n            {emojis.map((emojiData, index) => (\n              <button\n                key={index}\n                className={styles.emojiButton}\n                onClick={() => handleEmojiClick(emojiData)}\n                data-gamepad-focusable=\"true\"\n                title={emojiData.name}\n                style={{ '--emoji-color': emojiData.color }}\n              >\n                {emojiData.emoji}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmojiReactions;","import React, { useEffect, useState } from 'react';\nimport styles from './styles/GameScreen.module.css';\nimport GameHeader from './GameHeader.jsx';\nimport CardDisplay from './CardDisplay.jsx';\nimport BettingPanel from './BettingPanel.jsx';\nimport PlayerList from './PlayerList.jsx';\nimport PotDisplay from './PotDisplay.jsx';\nimport DeckDisplay from './DeckDisplay.jsx';\nimport AnteControls from './AnteControls.jsx';\nimport ResultsPanel from './ResultsPanel.jsx';\nimport AceChoicePanel from './AceChoicePanel.jsx';\nimport SecondChancePanel from './SecondChancePanel.jsx';\nimport GameLog from './GameLog.jsx';\nimport EmojiReactions from './EmojiReactions.jsx';\n\nimport { useGameContext } from '../contexts/GameContext';\nimport { useSocket } from '../contexts/SocketContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useGamepadNavigation } from '../hooks/useGamepadNavigation';\n\nconst GameScreen = ({ onReturnToLobby }) => {\n  // Track modal state to hide emoji reactions\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  // Get state and actions from context\n  const { \n    gameState,\n    error,\n    clearError\n  } = useGameContext();\n  \n  // Initialize gamepad navigation\n  const { isGamepadConnected } = useGamepadNavigation(true);\n  \n  // Auto-clear errors after 10 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        clearError();\n      }, 10000); // 10 seconds\n      \n      return () => clearTimeout(timer);\n    }\n  }, [error, clearError]);\n  \n  // Handle returning to lobby\n  const handleLeaveGame = () => {\n    // Call the parent callback\n    if (onReturnToLobby) {\n      onReturnToLobby();\n    }\n  };\n  \n  // Get the socket instance for event emission\n  const { socket } = useSocket(); \n  // Get the authenticated user data from AuthContext\n  const { user } = useAuth(); \n  \n  // Safety check for null gameState or missing phase\n  if (!gameState) {\n    return (\n      <div className={styles.loadingContainer}>\n        <p>Loading game state...</p>\n      </div>\n    );\n  }\n  \n  // Make sure we have a valid phase\n  const phase = gameState.phase || 'waiting';\n\n  // Find the current player based on the authenticated user ID from AuthContext\n  // Assuming the user object from AuthContext has an 'id' property\n  const currentUserId = user?.id; // Use user.id (adjust if property name is different e.g., user.userId)\n  const currentPlayer = gameState.players && currentUserId ? gameState.players[currentUserId] : null;\n\n  // Handler for the 'I'm Back' button\n  const handleImBackClick = () => {\n    if (socket && gameState.id) {\n      socket.emit('imBack', { gameId: gameState.id });\n    } else {\n      console.error(\"Cannot emit 'imBack': socket or gameId missing.\");\n    }\n  };\n\n\n  return (\n    <div className={styles.gameContainer}>\n      <div className={`${styles.gameScreen} mobile-scale-content`}>\n        <GameHeader \n          handleLeaveGame={handleLeaveGame} \n          onModalStateChange={setIsModalOpen}\n        />\n        \n        {error && (\n          <div className={styles.errorContainer}>\n            <p className={styles.errorText}>{error}</p>\n          </div>\n        )}\n        \n        <div className={styles.gameInfoWrapper}>\n          <DeckDisplay />\n          <PotDisplay />\n        </div>\n        \n        {/* Always show the CardDisplay component */}\n        <CardDisplay />\n        \n        {/* Primary check: Is the current player sitting out? */}\n        {currentPlayer?.isSittingOut ? (\n          // If sitting out, always show the 'I'm Back!' button regardless of phase\n          <button onClick={handleImBackClick} className={styles.imBackButton} data-gamepad-focusable=\"true\" autoFocus> \n            I'm Back!\n          </button>\n        ) : (\n          // If not sitting out, render controls based on the game phase\n          phase === 'waiting' ? (\n            /* Show ante controls during waiting phase */\n            <AnteControls />\n          ) : phase === 'results' ? (\n            /* Show the results panel during results phase */\n            <ResultsPanel />\n          ) : gameState.waitingForAceDecision ? (\n            /* Show the Ace choice panel when first card is an Ace */\n            <AceChoicePanel />\n          ) : gameState.waitingForSecondChance ? (\n            /* Show the Second Chance panel when matching cards are dealt */\n            <SecondChancePanel />\n          ) : phase === 'betting' ? (\n            /* Show the betting panel only during betting phase */\n            <BettingPanel />\n          ) : null\n        )}\n        \n        <div className={styles.gameBottomSection}>\n          <div className={styles.playerListContainer}>\n            <PlayerList />\n          </div>\n          <div className={styles.gameLogContainer}>\n            <GameLog />\n          </div>\n        </div>\n      </div>\n      \n      {/* Emoji reactions - positioned outside scaled content, hidden when modal is open */}\n      {!isModalOpen && <EmojiReactions />}\n    </div>\n  );\n};\n\nexport default GameScreen;\n","import React, { useState } from 'react';\nimport styles from './PasswordPromptModal.module.css';\nimport GamepadInput from '../GamepadInput';\n\nfunction PasswordPromptModal({ isOpen, onClose, onSubmit, gameId }) {\n  const [password, setPassword] = useState('');\n\n  if (!isOpen) return null;\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); // Prevent default form submission\n    onSubmit(password);\n    setPassword(''); // Clear password after submit\n  };\n\n  const handleCancel = () => {\n    setPassword(''); // Clear password on cancel\n    onClose();\n  };\n\n  return (\n    <div className={styles.modalOverlay}>\n      <div className={styles.modalContent}>\n        <h2>Password Required</h2>\n        <p>Please enter the password for game <strong>{gameId || ''}</strong>:</p>\n        <form onSubmit={handleSubmit}>\n          <GamepadInput\n            title=\"Enter Game Password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className={styles.passwordInput}\n            autoFocus\n            required\n          />\n          <div className={styles.modalActions}>\n            <button type=\"button\" onClick={handleCancel} className={`${styles.modalButton} ${styles.cancelButton}`} data-gamepad-focusable=\"true\">\n              Cancel\n            </button>\n            <button type=\"submit\" className={`${styles.modalButton} ${styles.submitButton}`} data-gamepad-focusable=\"true\">\n              Join Game\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default PasswordPromptModal;\n","import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { GameProvider, useGameContext } from '../contexts/GameContext';\nimport GameScreen from './GameScreen';\nimport { useSocket } from '../contexts/SocketContext';\nimport { LoadingScreen } from './common/LoadingScreen';\nimport PasswordPromptModal from './common/PasswordPromptModal';\nimport soundService from '../services/SoundService';\n\nconst GameRoom = () => {\n  const { gameId } = useParams();\n  const navigate = useNavigate();\n  const { socket, isConnected } = useSocket();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n  const hasInitiatedJoin = useRef(false); // Ref to track true initiation\n\n  const handleReturnToLobby = useCallback(() => {\n    if (socket && isConnected && gameId) {\n      soundService.play('ui.leave'); \n      socket.emit('leaveGame', { gameId }); \n      navigate('/');\n    }\n  }, [socket, isConnected, gameId, navigate]);\n\n  const handlePasswordSubmit = useCallback((password) => {\n    setIsPasswordModalOpen(false);\n    if (socket && gameId && password) {\n      setError(null); \n      socket.emit('joinGame', { gameId, password });\n      setLoading(true);\n    }\n  }, [socket, gameId]);\n\n  const handlePasswordCancel = useCallback(() => {\n    setIsPasswordModalOpen(false);\n    navigate('/');\n  }, [navigate]);\n\n  useEffect(() => {\n    setError(null);          \n    setIsPasswordModalOpen(false); \n    setLoading(true);        \n  }, [gameId]);\n\n  useEffect(() => {\n    if (!socket) {\n      return; \n    }\n\n    const onGameJoined = (data) => {\n      if (data && data.game && data.game.id === gameId) {\n        soundService.play('ui.join');\n        setLoading(false);\n        setError(null);\n        setIsPasswordModalOpen(false);\n      }\n    };\n\n    const onError = (errorData) => {\n      const message = errorData.message || 'An unknown error occurred';\n\n      if (message === 'Password required') {\n        console.error(errorData);\n        setIsPasswordModalOpen(true);\n        setLoading(false);\n        setError(null);\n      } else if (message === 'Invalid password') {\n        console.error(errorData);\n        setError('Invalid password.');\n        setIsPasswordModalOpen(true);\n        setLoading(false);\n      } else if (message === 'Game not found') {\n        navigate('/');\n      } else if (message === 'Game is full') {\n        setError(message);\n        setLoading(false);\n        setIsPasswordModalOpen(false);\n        setTimeout(() => navigate('/'), 3000);\n      } else {\n        setError(message);\n        setLoading(false);\n        setIsPasswordModalOpen(false);\n      }\n    };\n\n    socket.on('gameJoined', onGameJoined);\n    socket.on('error', onError);\n\n    return () => {\n      socket.off('gameJoined', onGameJoined);\n      socket.off('error', onError);\n    };\n  }, [socket, gameId, navigate]); \n\n  useEffect(() => {\n    // Use ref to prevent double emission due to StrictMode or rapid state changes\n    if (socket && gameId && !hasInitiatedJoin.current) {\n      hasInitiatedJoin.current = true; // Mark as initiated *immediately*\n      setLoading(true); \n      setError(null); \n      setIsPasswordModalOpen(false); \n      socket.emit('joinGame', { gameId });\n    } else {\n    }\n    // Dependencies remain minimal: only run when socket or gameId fundamentally change\n  }, [socket, gameId]); \n\n  const GameRoomContent = () => {\n    const { gameState } = useGameContext(); \n    const { socket } = useSocket();\n    \n    // Add beforeunload listener to warn users who are ready (in an active hand)\n    useEffect(() => {\n      const handleBeforeUnload = (e) => {\n        const currentUserId = socket?.auth?.userId;\n        const currentPlayer = currentUserId && gameState?.players ? gameState.players[currentUserId] : null;\n        const isPlayerReady = currentPlayer?.isReady || false;\n        \n        // Only show warning if player is ready (has ante'd and is in the hand)\n        if (isPlayerReady) {\n          e.preventDefault();\n          e.returnValue = 'You have money in the pot! Are you sure you want to leave?';\n          return e.returnValue;\n        }\n      };\n      \n      window.addEventListener('beforeunload', handleBeforeUnload);\n      \n      return () => {\n        window.removeEventListener('beforeunload', handleBeforeUnload);\n      };\n    }, [gameState, socket]);\n\n    return (\n      <>\n        <PasswordPromptModal \n          isOpen={isPasswordModalOpen}\n          onClose={handlePasswordCancel}\n          onSubmit={handlePasswordSubmit}\n          gameId={gameId} \n        />\n\n        {loading && <LoadingScreen message={`Joining game ${gameId}...`} />} \n        \n        {error && !loading && !isPasswordModalOpen && (\n          <div className=\"error-container\" style={{ padding: '20px', color: 'red', textAlign: 'center' }}>\n            <h2>An error occurred</h2>\n            <p>{error}</p>\n        {/* Suggest refreshing the page instead of navigating back */}\n        <button onClick={() => window.location.reload()}>Refresh Page</button>\n          </div>\n        )}\n        \n        {!loading && !error && gameState && \n          <GameScreen onReturnToLobby={handleReturnToLobby} />\n        }\n      </>\n    );\n  };\n\n  return (\n    <GameProvider gameId={gameId}>\n      <GameRoomContent /> \n    </GameProvider>\n  );\n};\n\nexport default GameRoom;\n"],"names":["ICONS","TIMERS","DEALING_DURATION","BETTING_DURATION","REVEALING_DURATION","RESULTS_DURATION","GameContext","createContext","useGameContext","context","useContext","Error","GameProvider","children","gameId","initialGameState","socket","error","socketError","useSocket","user","useAuth","gameState","setGameState","useState","useRef","prevActivePlayerRef","setError","clearError","useCallback","useEffect","on","data","game","id","setTimeout","emit","JSON","stringify","currentPlayerId","isMyTurn","wasPreviouslyMyTurn","current","soundService","play","message","off","placeBet","amount","bet","err","payAnte","dealCards","revealMiddleCard","nextRound","playerReady","playerUnready","value","jsx","Provider","ExitIcon","color","size","jsxRuntimeExports","jsxs","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","points","x1","y1","x2","y2","LeaveButton","onClick","title","restProps","IconButton","icon","variant","phaseDisplayMap","waiting","text","dealing","revealing","results","GameHeader","handleLeaveGame","onModalStateChange","currentUserId","_a","auth","userId","currentPlayer","players","playerBalance","balance","currentPhase","phase","isPlayerReady","isReady","timeLeft","setTimeLeft","showGameSummary","setShowGameSummary","showStoreModal","setShowStoreModal","isPreferencesOpen","setIsPreferencesOpen","isRulesOpen","setIsRulesOpen","isStatsOpen","setIsStatsOpen","timer","setInterval","Math","max","prev","waitingForAceDecision","phaseInfo","waitingForSecondChance","isCurrentPlayersTurn","_b","name","className","styles","headerContainer","desktopLayout","headerLeft","gameTitle","liveTag","gameIdText","gameIdLink","tabIndex","headerCenter","gamePhase","phaseBettingYourTurn","phaseBettingWaiting","charAt","toUpperCase","slice","phaseIcon","phaseText","timerBar","timerProgress","style","headerRight","controlsStack","balanceDisplay","CurrencyAmount","Number","controlsGroup","PreferencesButton","RulesButton","PlayerStatsButton","StoreButton","disabled","mobileLayout","mobileTopRow","mobileRight","mobileControlsStack","mobileActions","mobileBottomRow","GameSummaryModal","onClose","gameData","StoreModal","ArrowIcon","direction","rotation","transform","display","transformOrigin","CardDisplay","loading","firstCard","secondCard","thirdCard","dealer","cardLabels","J","Q","K","A","suitSymbols","hearts","diamonds","clubs","spades","renderCard","card","index","cardBack","isRed","suit","isAce","isAceLow","isMiddleCard","redCard","blackCard","aceCard","aceIndicator","aceLow","aceHigh","indicatorContent","cardCorner","cardValue","cardSuit","cardCenter","bottomRight","cardDisplayContainer","cardsRow","dealingPhase","revealingPhase","displayCards","map","renderCardLayout","PotButton","props","background","BettingPanel","customBet","setCustomBet","pot","potAmount","isCurrentPlayer","myPlayer","handleCustomBetChange","e","target","replace","maxBet","min","parseInt","toString","handleCustomBetSubmit","isNaN","betAmount","handleKeyPress","key","autoFocus","GamepadInput","type","placeholder","onChange","onKeyPress","PlayerList","userDataContext","UserDataContext","userIds","Object","values","player","filter","Boolean","length","prefetchUsers","dealerId","gameTransactions","playerTotals","totals","keys","seats","playerId","isCurrentUser","isDealer","disconnected","UserAvatar","showName","BalanceDisplay","isSittingOut","prevBalance","setPrevBalance","animationClass","setAnimationClass","timeoutRef","clearTimeout","PotDisplay","round","DeckDisplay","deckSize","deckCount","AutoAnteToggle","preferences","toggleAutoAnte","usePreferences","checked","autoAnte","async","newValue","success","playerIds","AnteControls","anteAmount","hasEnoughChips","ResultsPanel","result","resultCountdown","playerName","resultsPanel","resultContent","outcome","Fragment","resultText","winText","winnings","winningsText","loseText","penaltyAmount","isTripleAceTie","penaltyWarning","cautionTape","tieText","renderTieResult","renderOutcome","countdownContainer","countdownText","countdownSeconds","countdownProgress","countdownBar","AceChoicePanel","countdown","setCountdown","prevCount","clearInterval","handleAceChoice","currentPlayerName","_c","SecondChancePanel","setLoading","actionType","setActionType","handleSecondChance","anteAgain","GameLog","isExpanded","setIsExpanded","gameLog","logEntries","toggleExpanded","displayEntries","entry","timestamp","Date","toLocaleTimeString","hour","minute","second","EmojiReactions","isOpen","setIsOpen","emoji","emojiData","username","handleEmojiClick","GameScreen","onReturnToLobby","isModalOpen","setIsModalOpen","useGamepadNavigation","PasswordPromptModal","onSubmit","password","setPassword","preventDefault","required","GameRoom","useParams","navigate","useNavigate","isConnected","isPasswordModalOpen","setIsPasswordModalOpen","hasInitiatedJoin","handleReturnToLobby","handlePasswordSubmit","handlePasswordCancel","onGameJoined","onError","errorData","GameRoomContent","handleBeforeUnload","socket2","returnValue","window","addEventListener","removeEventListener","LoadingScreen","padding","textAlign","location","reload"],"mappings":"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"}